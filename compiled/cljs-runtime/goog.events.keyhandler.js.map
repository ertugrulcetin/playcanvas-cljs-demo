{
"version":3,
"file":"goog.events.keyhandler.js",
"lineCount":148,
"mappings":"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",
"sources":["goog/events/keyhandler.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview This file contains a class for working with keyboard events\n * that repeat consistently across browsers and platforms. It also unifies the\n * key code so that it is the same in all browsers and platforms.\n *\n * Different web browsers have very different keyboard event handling. Most\n * importantly is that only certain browsers repeat keydown events:\n * IE, Opera, FF/Win32, and Safari 3 repeat keydown events.\n * FF/Mac and Safari 2 do not.\n *\n * For the purposes of this code, \"Safari 3\" means WebKit 525+, when WebKit\n * decided that they should try to match IE's key handling behavior.\n * Safari 3.0.4, which shipped with Leopard (WebKit 523), has the\n * Safari 2 behavior.\n *\n * Firefox, Safari, Opera prevent on keypress\n *\n * IE prevents on keydown\n *\n * Firefox does not fire keypress for shift, ctrl, alt\n * Firefox does fire keydown for shift, ctrl, alt, meta\n * Firefox does not repeat keydown for shift, ctrl, alt, meta\n *\n * Firefox does not fire keypress for up and down in an input\n *\n * Opera fires keypress for shift, ctrl, alt, meta\n * Opera does not repeat keypress for shift, ctrl, alt, meta\n *\n * Safari 2 and 3 do not fire keypress for shift, ctrl, alt\n * Safari 2 does not fire keydown for shift, ctrl, alt\n * Safari 3 *does* fire keydown for shift, ctrl, alt\n *\n * IE provides the keycode for keyup/down events and the charcode (in the\n * keycode field) for keypress.\n *\n * Mozilla provides the keycode for keyup/down and the charcode for keypress\n * unless it's a non text modifying key in which case the keycode is provided.\n *\n * Safari 3 provides the keycode and charcode for all events.\n *\n * Opera provides the keycode for keyup/down event and either the charcode or\n * the keycode (in the keycode field) for keypress events.\n *\n * Firefox x11 doesn't fire keydown events if a another key is already held down\n * until the first key is released. This can cause a key event to be fired with\n * a keyCode for the first key and a charCode for the second key.\n *\n * Safari in keypress\n *\n *        charCode keyCode which\n * ENTER:       13      13    13\n * F1:       63236   63236 63236\n * F8:       63243   63243 63243\n * ...\n * p:          112     112   112\n * P:           80      80    80\n *\n * Firefox, keypress:\n *\n *        charCode keyCode which\n * ENTER:        0      13    13\n * F1:           0     112     0\n * F8:           0     119     0\n * ...\n * p:          112       0   112\n * P:           80       0    80\n *\n * Opera, Mac+Win32, keypress:\n *\n *         charCode keyCode which\n * ENTER: undefined      13    13\n * F1:    undefined     112     0\n * F8:    undefined     119     0\n * ...\n * p:     undefined     112   112\n * P:     undefined      80    80\n *\n * IE7, keydown\n *\n *         charCode keyCode     which\n * ENTER: undefined      13 undefined\n * F1:    undefined     112 undefined\n * F8:    undefined     119 undefined\n * ...\n * p:     undefined      80 undefined\n * P:     undefined      80 undefined\n *\n * @see ../demos/keyhandler.html\n */\n\n\ngoog.provide('goog.events.KeyHandler');\ngoog.provide('goog.events.KeyHandler.EventType');\n\ngoog.require('goog.events');\ngoog.require('goog.events.BrowserEvent');\ngoog.require('goog.events.EventTarget');\ngoog.require('goog.events.EventType');\ngoog.require('goog.events.KeyCodes');\ngoog.require('goog.events.KeyEvent');\ngoog.require('goog.userAgent');\n\n\n\n/**\n * A wrapper around an element that you want to listen to keyboard events on.\n * @param {Element|Document=} opt_element The element or document to listen on.\n * @param {boolean=} opt_capture Whether to listen for browser events in\n *     capture phase (defaults to false).\n * @constructor\n * @extends {goog.events.EventTarget}\n * @final\n */\ngoog.events.KeyHandler = function(opt_element, opt_capture) {\n  'use strict';\n  goog.events.EventTarget.call(this);\n\n  if (opt_element) {\n    this.attach(opt_element, opt_capture);\n  }\n};\ngoog.inherits(goog.events.KeyHandler, goog.events.EventTarget);\n\n\n/**\n * This is the element that we will listen to the real keyboard events on.\n * @type {?Element|?Document|null}\n * @private\n */\ngoog.events.KeyHandler.prototype.element_ = null;\n\n\n/**\n * The key for the key press listener.\n * @type {?goog.events.Key}\n * @private\n */\ngoog.events.KeyHandler.prototype.keyPressKey_ = null;\n\n\n/**\n * The key for the key down listener.\n * @type {?goog.events.Key}\n * @private\n */\ngoog.events.KeyHandler.prototype.keyDownKey_ = null;\n\n\n/**\n * The key for the key up listener.\n * @type {?goog.events.Key}\n * @private\n */\ngoog.events.KeyHandler.prototype.keyUpKey_ = null;\n\n\n/**\n * Used to detect keyboard repeat events.\n * @private\n * @type {number}\n */\ngoog.events.KeyHandler.prototype.lastKey_ = -1;\n\n\n/**\n * Keycode recorded for key down events. As most browsers don't report the\n * keycode in the key press event we need to record it in the key down phase.\n * @private\n * @type {number}\n */\ngoog.events.KeyHandler.prototype.keyCode_ = -1;\n\n\n/**\n * Alt key recorded for key down events. FF on Mac does not report the alt key\n * flag in the key press event, we need to record it in the key down phase.\n * @type {boolean}\n * @private\n */\ngoog.events.KeyHandler.prototype.altKey_ = false;\n\n\n/**\n * Enum type for the events fired by the key handler\n * @const\n * @deprecated use `goog.events.KeyEvent.EventType` instead.\n */\ngoog.events.KeyHandler.EventType = goog.events.KeyEvent.EventType;\n\n\n/**\n * An enumeration of key codes that Safari 2 does incorrectly\n * @type {Object}\n * @private\n */\ngoog.events.KeyHandler.safariKey_ = {\n  '3': goog.events.KeyCodes.ENTER,             // 13\n  '12': goog.events.KeyCodes.NUMLOCK,          // 144\n  '63232': goog.events.KeyCodes.UP,            // 38\n  '63233': goog.events.KeyCodes.DOWN,          // 40\n  '63234': goog.events.KeyCodes.LEFT,          // 37\n  '63235': goog.events.KeyCodes.RIGHT,         // 39\n  '63236': goog.events.KeyCodes.F1,            // 112\n  '63237': goog.events.KeyCodes.F2,            // 113\n  '63238': goog.events.KeyCodes.F3,            // 114\n  '63239': goog.events.KeyCodes.F4,            // 115\n  '63240': goog.events.KeyCodes.F5,            // 116\n  '63241': goog.events.KeyCodes.F6,            // 117\n  '63242': goog.events.KeyCodes.F7,            // 118\n  '63243': goog.events.KeyCodes.F8,            // 119\n  '63244': goog.events.KeyCodes.F9,            // 120\n  '63245': goog.events.KeyCodes.F10,           // 121\n  '63246': goog.events.KeyCodes.F11,           // 122\n  '63247': goog.events.KeyCodes.F12,           // 123\n  '63248': goog.events.KeyCodes.PRINT_SCREEN,  // 44\n  '63272': goog.events.KeyCodes.DELETE,        // 46\n  '63273': goog.events.KeyCodes.HOME,          // 36\n  '63275': goog.events.KeyCodes.END,           // 35\n  '63276': goog.events.KeyCodes.PAGE_UP,       // 33\n  '63277': goog.events.KeyCodes.PAGE_DOWN,     // 34\n  '63289': goog.events.KeyCodes.NUMLOCK,       // 144\n  '63302': goog.events.KeyCodes.INSERT         // 45\n};\n\n\n/**\n * An enumeration of key identifiers currently part of the W3C draft for DOM3\n * and their mappings to keyCodes.\n * http://www.w3.org/TR/DOM-Level-3-Events/keyset.html#KeySet-Set\n * This is currently supported in Safari and should be platform independent.\n * @type {Object}\n * @private\n */\ngoog.events.KeyHandler.keyIdentifier_ = {\n  'Up': goog.events.KeyCodes.UP,               // 38\n  'Down': goog.events.KeyCodes.DOWN,           // 40\n  'Left': goog.events.KeyCodes.LEFT,           // 37\n  'Right': goog.events.KeyCodes.RIGHT,         // 39\n  'Enter': goog.events.KeyCodes.ENTER,         // 13\n  'F1': goog.events.KeyCodes.F1,               // 112\n  'F2': goog.events.KeyCodes.F2,               // 113\n  'F3': goog.events.KeyCodes.F3,               // 114\n  'F4': goog.events.KeyCodes.F4,               // 115\n  'F5': goog.events.KeyCodes.F5,               // 116\n  'F6': goog.events.KeyCodes.F6,               // 117\n  'F7': goog.events.KeyCodes.F7,               // 118\n  'F8': goog.events.KeyCodes.F8,               // 119\n  'F9': goog.events.KeyCodes.F9,               // 120\n  'F10': goog.events.KeyCodes.F10,             // 121\n  'F11': goog.events.KeyCodes.F11,             // 122\n  'F12': goog.events.KeyCodes.F12,             // 123\n  'U+007F': goog.events.KeyCodes.DELETE,       // 46\n  'Home': goog.events.KeyCodes.HOME,           // 36\n  'End': goog.events.KeyCodes.END,             // 35\n  'PageUp': goog.events.KeyCodes.PAGE_UP,      // 33\n  'PageDown': goog.events.KeyCodes.PAGE_DOWN,  // 34\n  'Insert': goog.events.KeyCodes.INSERT        // 45\n};\n\n\n\n\n/**\n * If true, the alt key flag is saved during the key down and reused when\n * handling the key press. FF on Mac does not set the alt flag in the key press\n * event.\n * @type {boolean}\n * @private\n */\ngoog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_ =\n    goog.userAgent.MAC && goog.userAgent.GECKO;\n\n\n/**\n * Records the keycode for browsers that only returns the keycode for key up/\n * down events. For browser/key combinations that doesn't trigger a key pressed\n * event it also fires the patched key event.\n * @param {goog.events.BrowserEvent} e The key down event.\n * @private\n */\ngoog.events.KeyHandler.prototype.handleKeyDown_ = function(e) {\n  'use strict';\n  // Ctrl-Tab and Alt-Tab can cause the focus to be moved to another window\n  // before we've caught a key-up event.  If the last-key was one of these we\n  // reset the state.\n  if (goog.userAgent.WEBKIT || goog.userAgent.EDGE) {\n    if (this.lastKey_ == goog.events.KeyCodes.CTRL && !e.ctrlKey ||\n        this.lastKey_ == goog.events.KeyCodes.ALT && !e.altKey ||\n        goog.userAgent.MAC && this.lastKey_ == goog.events.KeyCodes.META &&\n            !e.metaKey) {\n      this.resetState();\n    }\n  }\n\n  if (this.lastKey_ == -1) {\n    if (e.ctrlKey && e.keyCode != goog.events.KeyCodes.CTRL) {\n      this.lastKey_ = goog.events.KeyCodes.CTRL;\n    } else if (e.altKey && e.keyCode != goog.events.KeyCodes.ALT) {\n      this.lastKey_ = goog.events.KeyCodes.ALT;\n    } else if (e.metaKey && e.keyCode != goog.events.KeyCodes.META) {\n      this.lastKey_ = goog.events.KeyCodes.META;\n    }\n  }\n\n  if (!goog.events.KeyCodes.firesKeyPressEvent(\n          e.keyCode, this.lastKey_, e.shiftKey, e.ctrlKey, e.altKey,\n          e.metaKey)) {\n    this.handleEvent(e);\n  } else {\n    this.keyCode_ = goog.events.KeyCodes.normalizeKeyCode(e.keyCode);\n    if (goog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_) {\n      this.altKey_ = e.altKey;\n    }\n  }\n};\n\n\n/**\n * Resets the stored previous values. Needed to be called for webkit which will\n * not generate a key up for meta key operations. This should only be called\n * when having finished with repeat key possibilities.\n */\ngoog.events.KeyHandler.prototype.resetState = function() {\n  'use strict';\n  this.lastKey_ = -1;\n  this.keyCode_ = -1;\n};\n\n\n/**\n * Clears the stored previous key value, resetting the key repeat status. Uses\n * -1 because the Safari 3 Windows beta reports 0 for certain keys (like Home\n * and End.)\n * @param {goog.events.BrowserEvent} e The keyup event.\n * @private\n */\ngoog.events.KeyHandler.prototype.handleKeyup_ = function(e) {\n  'use strict';\n  this.resetState();\n  this.altKey_ = e.altKey;\n};\n\n\n/**\n * Handles the events on the element.\n * @param {goog.events.BrowserEvent} e  The keyboard event sent from the\n *     browser.\n */\ngoog.events.KeyHandler.prototype.handleEvent = function(e) {\n  'use strict';\n  var be = e.getBrowserEvent();\n  var keyCode, charCode;\n  var altKey = be.altKey;\n\n  // IE reports the character code in the keyCode field for keypress events.\n  // There are two exceptions however, Enter and Escape.\n  if (goog.userAgent.IE && e.type == goog.events.EventType.KEYPRESS) {\n    keyCode = this.keyCode_;\n    charCode = keyCode != goog.events.KeyCodes.ENTER &&\n            keyCode != goog.events.KeyCodes.ESC ?\n        be.keyCode :\n        0;\n\n    // Safari reports the character code in the keyCode field for keypress\n    // events but also has a charCode field.\n  } else if (\n      (goog.userAgent.WEBKIT || goog.userAgent.EDGE) &&\n      e.type == goog.events.EventType.KEYPRESS) {\n    keyCode = this.keyCode_;\n    charCode = be.charCode >= 0 && be.charCode < 63232 &&\n            goog.events.KeyCodes.isCharacterKey(keyCode) ?\n        be.charCode :\n        0;\n\n    // Opera reports the keycode or the character code in the keyCode field.\n  } else {\n    if (e.type == goog.events.EventType.KEYPRESS) {\n      if (goog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_) {\n        altKey = this.altKey_;\n      }\n\n      // Newer versions of Firefox will set the keyCode of non-function keys to\n      // be the same as charCode. We need to account for this and update the\n      // key event values accordingly. See\n      // https://github.com/google/closure-library/issues/932 for more details.\n      if (be.keyCode == be.charCode) {\n        // Adjust any function key (ie. non-printable, such as ESC or\n        // backspace) to not have a charCode. We don't want these keys to\n        // accidentally be interpreted as insertable characters.\n        if (be.keyCode < 0x20) {\n          keyCode = be.keyCode;\n          charCode = 0;\n        } else {\n          // For character keys, we want to use the preserved key code rather\n          // than the keyCode on the browser event, which now uses the charCode.\n          // These differ (eg. pressing 'a' gives keydown with keyCode = 65,\n          // keypress with keyCode = charCode = 97) and so we need to account\n          // for this.\n          keyCode = this.keyCode_;\n          charCode = be.charCode;\n        }\n      } else {\n        keyCode = be.keyCode || this.keyCode_;\n        charCode = be.charCode || 0;\n      }\n    } else {\n      keyCode = be.keyCode || this.keyCode_;\n      charCode = be.charCode || 0;\n    }\n\n    // On the Mac, shift-/ triggers a question mark char code and no key code\n    // (WIN_KEY_FF_LINUX), so we synthesize the latter.\n    if (goog.userAgent.MAC && charCode == goog.events.KeyCodes.QUESTION_MARK &&\n        keyCode == goog.events.KeyCodes.WIN_KEY) {\n      keyCode = goog.events.KeyCodes.SLASH;\n    }\n  }\n\n  keyCode = goog.events.KeyCodes.normalizeKeyCode(keyCode);\n  var key = keyCode;\n\n  // Correct the key value for certain browser-specific quirks.\n  if (keyCode) {\n    if (keyCode >= 63232 && keyCode in goog.events.KeyHandler.safariKey_) {\n      // NOTE(nicksantos): Safari 3 has fixed this problem,\n      // this is only needed for Safari 2.\n      key = goog.events.KeyHandler.safariKey_[keyCode];\n    } else {\n      // Safari returns 25 for Shift+Tab instead of 9.\n      if (keyCode == 25 && e.shiftKey) {\n        key = 9;\n      }\n    }\n  } else if (\n      be.keyIdentifier &&\n      be.keyIdentifier in goog.events.KeyHandler.keyIdentifier_) {\n    // This is needed for Safari Windows because it currently doesn't give a\n    // keyCode/which for non printable keys.\n    key = goog.events.KeyHandler.keyIdentifier_[be.keyIdentifier];\n  }\n\n  // If this was a redundant keypress event, we ignore it to avoid double-firing\n  // an event as the event would've been handled by KEYDOWN. Gecko is currently\n  // in the process of removing keypress events for non-printable characters\n  // (https://bugzilla.mozilla.org/show_bug.cgi?id=968056) so we simulate this\n  // logic here for older Gecko versions which still fire the events.\n  if (goog.userAgent.GECKO && e.type == goog.events.EventType.KEYPRESS &&\n      !goog.events.KeyCodes.firesKeyPressEvent(\n          key, this.lastKey_, e.shiftKey, e.ctrlKey, altKey, e.metaKey)) {\n    return;\n  }\n\n  // If we get the same keycode as a keydown/keypress without having seen a\n  // keyup event, then this event was caused by key repeat.\n  var repeat = key == this.lastKey_;\n  this.lastKey_ = key;\n\n  var event = new goog.events.KeyEvent(key, charCode, repeat, be);\n  event.altKey = altKey;\n  this.dispatchEvent(event);\n};\n\n\n/**\n * Returns the element listened on for the real keyboard events.\n * @return {Element|Document|null} The element listened on for the real\n *     keyboard events.\n */\ngoog.events.KeyHandler.prototype.getElement = function() {\n  'use strict';\n  return this.element_;\n};\n\n\n/**\n * Adds the proper key event listeners to the element.\n * @param {Element|Document} element The element to listen on.\n * @param {boolean=} opt_capture Whether to listen for browser events in\n *     capture phase (defaults to false).\n */\ngoog.events.KeyHandler.prototype.attach = function(element, opt_capture) {\n  'use strict';\n  if (this.keyUpKey_) {\n    this.detach();\n  }\n\n  this.element_ = element;\n\n  this.keyPressKey_ = goog.events.listen(\n      this.element_, goog.events.EventType.KEYPRESS, this, opt_capture);\n\n  // Most browsers (Safari 2 being the notable exception) doesn't include the\n  // keyCode in keypress events (IE has the char code in the keyCode field and\n  // Mozilla only included the keyCode if there's no charCode). Thus we have to\n  // listen for keydown to capture the keycode.\n  this.keyDownKey_ = goog.events.listen(\n      this.element_, goog.events.EventType.KEYDOWN, this.handleKeyDown_,\n      opt_capture, this);\n\n\n  this.keyUpKey_ = goog.events.listen(\n      this.element_, goog.events.EventType.KEYUP, this.handleKeyup_,\n      opt_capture, this);\n};\n\n\n/**\n * Removes the listeners that may exist.\n */\ngoog.events.KeyHandler.prototype.detach = function() {\n  'use strict';\n  if (this.keyPressKey_) {\n    goog.events.unlistenByKey(this.keyPressKey_);\n    goog.events.unlistenByKey(this.keyDownKey_);\n    goog.events.unlistenByKey(this.keyUpKey_);\n    this.keyPressKey_ = null;\n    this.keyDownKey_ = null;\n    this.keyUpKey_ = null;\n  }\n  this.element_ = null;\n  this.lastKey_ = -1;\n  this.keyCode_ = -1;\n};\n\n\n/** @override */\ngoog.events.KeyHandler.prototype.disposeInternal = function() {\n  'use strict';\n  goog.events.KeyHandler.superClass_.disposeInternal.call(this);\n  this.detach();\n};\n"],
"names":["goog","provide","require","events","KeyHandler","goog.events.KeyHandler","opt_element","opt_capture","EventTarget","call","attach","inherits","prototype","element_","keyPressKey_","keyDownKey_","keyUpKey_","lastKey_","keyCode_","altKey_","EventType","KeyEvent","safariKey_","KeyCodes","ENTER","NUMLOCK","UP","DOWN","LEFT","RIGHT","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","PRINT_SCREEN","DELETE","HOME","END","PAGE_UP","PAGE_DOWN","INSERT","keyIdentifier_","SAVE_ALT_FOR_KEYPRESS_","userAgent","MAC","GECKO","handleKeyDown_","goog.events.KeyHandler.prototype.handleKeyDown_","e","WEBKIT","EDGE","CTRL","ctrlKey","ALT","altKey","META","metaKey","resetState","keyCode","firesKeyPressEvent","shiftKey","handleEvent","normalizeKeyCode","goog.events.KeyHandler.prototype.resetState","handleKeyup_","goog.events.KeyHandler.prototype.handleKeyup_","goog.events.KeyHandler.prototype.handleEvent","be","getBrowserEvent","charCode","IE","type","KEYPRESS","ESC","isCharacterKey","QUESTION_MARK","WIN_KEY","SLASH","key","keyIdentifier","repeat","event","dispatchEvent","getElement","goog.events.KeyHandler.prototype.getElement","goog.events.KeyHandler.prototype.attach","element","detach","listen","KEYDOWN","KEYUP","goog.events.KeyHandler.prototype.detach","unlistenByKey","disposeInternal","goog.events.KeyHandler.prototype.disposeInternal","superClass_"]
}
