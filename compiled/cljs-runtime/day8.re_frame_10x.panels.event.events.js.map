{"version":3,"sources":["day8/re_frame_10x/panels/event/events.cljs"],"mappings":";AAIA,wGAAA,6JAAA,rQAACA,wVAEE,yJAAA,mFAAA,qDAAA,jSAACC,gXAA6BC,4EAC/B,4BAAAC,jBAAKG;AAAL,AAAA,IAAAF,aAAAD;uBAAA,AAAAE,4CAAAD,WAAA,IAAA,9EAAiBG;kBAAjB,AAAAF,4CAAAD,WAAA,IAAA,zEAA4BI;AAA5B,AACE,OAACC,mBAASH,iBAAWC,iBAAWC;;AAEpC,wGAAA,4JAAA,pQAACR,uVAEE,yJAAA,mFAAA,qDAAA,jSAACC,6XAAmCC,4EACrC,aAAAQ,FAAKE;AAAL,AAAA,IAAAD,aAAAD;6BAAA,AAAAL,4CAAAM,WAAA,IAAA,pFAAQE;AAAR,AACEA;;AAEJ,wGAAA,2IAAA,nPAACb,sUAEE,yJAAA,mFAAA,qDAAA,jSAACC,6XAAmCC,4EACrC,aAAAY,FAAKF;AAAL,AAAA,IAAAG,aAAAD;eAAA,AAAAT,4CAAAU,WAAA,IAAA,tEAAQC;AAAR,AACEA;;AAEJ,wGAAA,qJAAA,7PAAChB,gVAEE,yJAAA,mFAAA,qDAAA,jSAACC,6XAAmCC,4EACrC,gBAAAe,LAAKE;AAAL,AAAA,IAAAD,aAAAD;eAAA,AAAAZ,4CAAAa,WAAA,IAAA,tEAAWF;AAAX,AACE,GAAI,AAACI,6CAAED,KAAKH;AAAZ;;AAEEA;;;AAEN,wGAAA,0JAAA,lQAAChB,qVAEE,yJAAA,mFAAA,qDAAA,jSAACC,uXAAiCC,4EACnC,aAAAmB,FAAKT;AAAL,AAAA,IAAAU,aAAAD;2BAAA,AAAAhB,4CAAAiB,WAAA,IAAA,lFAAQC;AAAR,AACEA;;AAEJ,wGAAA,iJAAA,zPAACvB,4UAEE,yJAAA,mFAAA,qDAAA,jSAACC,wXAAiCC,4EACnC,yBAAAsB,dAAKE;AAAL,AAAA,IAAAD,aAAAD;gBAAA,AAAAnB,4CAAAoB,WAAA,IAAA,vEAAoBE;AAApB,AACE,GAAI,EAAK,2DAAA,3DAACP,6CAAEM,+EAAwB,uDAAA,vDAACN,6CAAEO;AAAvC;;AAEE,GAAI,uDAAA,vDAACP,6CAAEO;AAAP;;AAAA","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.path","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/trim-v","p__21646","vec__21647","cljs.core.nth","code-open?","open?-path","open?","cljs.core/assoc-in","p__21650","vec__21651","_","execution-order?","p__21654","vec__21655","new-form","p__21658","vec__21659","form","cljs.core._EQ_","p__21666","vec__21667","show-all-code?","p__21670","vec__21671","current-state","new-state"],"sourcesContent":["(ns day8.re-frame-10x.panels.event.events\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]))\n\n(rf/reg-event-db\n  ::set-code-visibility\n  [(rf/path [:code :code-open?]) rf/trim-v]\n  (fn [code-open? [open?-path open?]]\n    (assoc-in code-open? open?-path open?)))\n\n(rf/reg-event-db\n  ::set-execution-order\n  [(rf/path [:code :execution-order?]) rf/trim-v]\n  (fn [_ [execution-order?]]\n    execution-order?))\n\n(rf/reg-event-db\n  ::hover-form\n  [(rf/path [:code :highlighted-form]) rf/trim-v]\n  (fn [_ [new-form]]\n    new-form))\n\n(rf/reg-event-db\n  ::exit-hover-form\n  [(rf/path [:code :highlighted-form]) rf/trim-v]\n  (fn [form [new-form]]\n    (if (= form new-form)\n      nil\n      new-form)))\n\n(rf/reg-event-db\n  ::set-show-all-code?\n  [(rf/path [:code :show-all-code?]) rf/trim-v]\n  (fn [_ [show-all-code?]]\n    show-all-code?))\n\n(rf/reg-event-db\n  ::repl-msg-state\n  [(rf/path [:code :repl-msg-state]) rf/trim-v]\n  (fn [current-state [new-state]]\n    (if (and (= current-state :running) (= new-state :start)) ;; Toggles between :running and :re-running to guarantee rerenderig when you continuously call this event\n      :re-running\n      (if (= new-state :start) :running :end))))"]}