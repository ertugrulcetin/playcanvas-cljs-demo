{"version":3,"sources":["day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/std_interceptors.cljc"],"mappings":"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","names":["day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/debug","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.__GT_interceptor","context","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.loggers.console","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_coeffect","event","orig-db","new-db","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.get_effect","cljs.core._EQ_","vec__16672","cljs.core.nth","only-before","only-after","clojure.data/diff","db-changed?","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.loggers/console","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/unwrap","vec__16678","_","payload","cljs.core/count","cljs.core/map?","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/assoc-coeffect","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/trim-v","cljs.core/vector?","cljs.core/type","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.update_coeffect","cljs.core/subvec","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/db-handler->interceptor","handler-fn","new-context","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__16695","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/*current-trace*","*current-trace*-temp-val__16697","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/start-trace","end__16508__auto__","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop/now","duration__16509__auto__","cljs.core.swap_BANG_","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/run-tracing-callbacks!","map__16703","cljs.core/--destructure-map","cljs.core.get","map__16704","db","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/assoc-effect","new-trace__16510__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.dissoc","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/fx-handler->interceptor","*current-trace*-orig-val__16708","*current-trace*-temp-val__16709","map__16710","map__16711","coeffects","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/ctx-handler->interceptor","*current-trace*-orig-val__16737","*current-trace*-temp-val__16738","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/path","seq16745","self__5752__auto__","cljs.core/seq","args","path","cljs.core/flatten","db-store-key","cljs.core/empty?","original-db","cljs.core.get_in","db-store","cljs.core/peek","new-db-store","cljs.core/pop","context'","cljs.core/assoc-in","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/enrich","f","cljs.core/contains?","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/after","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/on-changes","seq16766","G__16767","cljs.core/first","cljs.core/next","G__16768","self__5751__auto__","out-path","in-paths","old-db","new-ins","p1__16762#","cljs.core.map","old-ins","p1__16763#","changed-ins?","and__5041__auto__","cljs.core/some","cljs.core/false?","cljs.core/identical?","cljs.core.apply","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors/inject-global-interceptors","p1__16774#","cljs.core.into","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.settings/get-global-interceptors"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.std-interceptors\n  \"contains re-frame supplied, standard interceptors\"\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-coeffect assoc-effect update-coeffect]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.loggers :refer [console]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.settings :as settings]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db :refer [app-db]]\n    [clojure.data :as data]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx :as cofx]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.utils :as utils]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace :as trace :include-macros true]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor :as interceptor]))\n\n\n(def debug\n  (->interceptor\n    :id     :debug\n    :before (fn debug-before\n              [context]\n              (console :log \"Handling re-frame event:\" (get-coeffect context :event))\n              context)\n    :after  (fn debug-after\n              [context]\n              (let [event   (get-coeffect context :event)\n                    orig-db (get-coeffect context :db)\n                    new-db  (get-effect   context :db ::not-found)]\n                (if (= new-db ::not-found)\n                  (console :log \"No app-db changes in:\" event)\n                  (let [[only-before only-after] (data/diff orig-db new-db)\n                        db-changed?    (or (some? only-before) (some? only-after))]\n                    (if db-changed?\n                      (do (console :group \"db clojure.data/diff for:\" event)\n                          (console :log \"only before:\" only-before)\n                          (console :log \"only after :\" only-after)\n                          (console :groupEnd))\n                      (console :log \"No app-db changes resulted from:\" event))))\n                context))))\n\n\n(def unwrap\n  (->interceptor\n    :id      :unwrap\n    :before  (fn unwrap-before\n               [context]\n               (let [[_ payload :as event] (get-coeffect context :event)]\n                 (if-not (and (= 2 (count event))\n                              (map? payload))\n                   (do\n                     (console :warn \"re-frame: \\\"unwrap\\\" interceptor requires event to be a 2-vector of [event-id payload-map]. Got \" event)\n                     context)\n                   (assoc-coeffect context :event payload))))\n    :after   (fn unwrap-after\n               [context]\n               (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n\n(def trim-v\n  (->interceptor\n    :id      :trim-v\n    :before  (fn trim-v-before\n               [context]\n               (if-not (vector? (get-coeffect context :event))\n                 (do\n                   (console :warn \"re-frame: \\\"trim-v\\\" interceptor expected event to be a vector. Got a \" (type (get-coeffect context :event)))\n                   context)\n                 (update-coeffect context :event subvec 1)))\n    :after   (fn trim-v-after\n               [context]\n               (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n\n;; -- Interceptor Factories - PART 1 ---------------------------------------------------------------\n;;\n;; These 3 factories wrap the 3 kinds of event handlers.\n;;\n\n(defn db-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`\"\n  [handler-fn]\n  (->interceptor\n    :id     :db-handler\n    :before (fn db-handler-before\n              [context]\n              (let [new-context\n                    (trace/with-trace\n                      {:op-type   :event/handler\n                       :operation (get-coeffect context :original-event)}\n                      (let [{:keys [db event]} (get-coeffect context)]\n                        (->> (handler-fn db event)\n                             (assoc-effect context :db))))]\n                ;; We merge these tags outside of the :event/handler trace because we want them to be assigned to the parent\n                ;; wrapping trace.\n                (trace/merge-trace!\n                  {:tags {:effects   (get-effect new-context)\n                          :coeffects (get-coeffect context)}})\n                new-context))))\n\n\n(defn fx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`\"\n  [handler-fn]\n(->interceptor\n  :id     :fx-handler\n  :before (fn fx-handler-before\n            [context]\n            (let [new-context\n                  (trace/with-trace\n                    {:op-type   :event/handler\n                     :operation (get-coeffect context :original-event)}\n                    (let [{:keys [event] :as coeffects} (get-coeffect context)]\n                      (->> (handler-fn coeffects event)\n                           (assoc context :effects))))]\n              (trace/merge-trace!\n                {:tags {:effects   (get-effect new-context)\n                        :coeffects (get-coeffect context)}})\n              new-context))))\n\n\n(defn ctx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))\"\n  [handler-fn]\n  (->interceptor\n    :id     :ctx-handler\n    :before (fn ctx-handler-before\n              [context]\n              (let [new-context\n                    (trace/with-trace\n                      {:op-type   :event/handler\n                       :operation (get-coeffect context :original-event)}\n                      (handler-fn context))]\n                (trace/merge-trace!\n                  {:tags {:effects   (get-effect new-context)\n                          :coeffects (get-coeffect context)}})\n                new-context))))\n\n\n;; -- Interceptors Factories -  PART 2 ------------------------------------------------------------\n\n\n(defn path\n  [& args]\n  (let [path (flatten args)\n        db-store-key :re-frame-path/db-store]    ;; this is where, within `context`, we store the original dbs\n    (when (empty? path)\n      (console :error \"re-frame: \\\"path\\\" interceptor given no params\"))\n    (->interceptor\n      :id      :path\n      :before  (fn\n                 [context]\n                 (let [original-db (get-coeffect context :db)]\n                   (-> context\n                       (update db-store-key conj original-db)\n                       (assoc-coeffect :db (get-in original-db path)))))\n      :after   (fn [context]\n                 (let [db-store     (db-store-key context)\n                       original-db  (peek db-store)\n                       new-db-store (pop db-store)\n                       context'     (-> (assoc context db-store-key new-db-store)\n                                        (assoc-coeffect :db original-db))     ;; put the original db back so that things like debug work later on\n                       db           (get-effect context :db ::not-found)]\n                   (if (= db ::not-found)\n                     context'\n                     (->> (assoc-in original-db path db)\n                          (assoc-effect context' :db))))))))\n\n\n\n\n(defn enrich\n  [f]\n  (->interceptor\n    :id :enrich\n    :after (fn enrich-after\n             [context]\n             (let [event (get-coeffect context :event)\n                   db    (if (contains? (get-effect context) :db)\n                           (get-effect context :db) ;; If no db effect is returned, we provide the original coeffect.\n                           (get-coeffect context :db))]\n               (->> (f db event)\n                    (assoc-effect context :db))))))\n\n\n\n(defn after\n  [f]\n  (->interceptor\n    :id :after\n    :after (fn after-after\n             [context]\n             (let [db    (if (contains? (get-effect context) :db)\n                           (get-effect context :db)\n                           (get-coeffect context :db))\n                   event (get-coeffect context :event)]\n               (f db event) ;; call f for side effects\n               context)))) ;; context is unchanged\n\n(defn  on-changes\n  [f out-path & in-paths]\n  (->interceptor\n    :id    :on-changes\n    :after (fn on-change-after\n             [context]\n             (let [new-db   (get-effect context :db)\n                   old-db   (get-coeffect context :db)\n\n                   ;; work out if any \"inputs\" have changed\n                   new-ins      (map #(get-in new-db %) in-paths)\n                   old-ins      (map #(get-in old-db %) in-paths)\n                   ;; make sure the db is actually set in the effect\n                   changed-ins? (and (contains? (get-effect context) :db)\n                                     (some false? (map identical? new-ins old-ins)))]\n\n               ;; if one of the inputs has changed, then run 'f'\n               (if changed-ins?\n                 (->> (apply f new-ins)\n                      (assoc-in new-db out-path)\n                      (assoc-effect context :db))\n                 context)))))\n\n\n(def inject-global-interceptors\n  \"An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\"\n  (->interceptor\n    :id     :inject-global-interceptors\n    :before (fn inject-global-interceptors-before\n              [context]\n              (update context :queue #(into (settings/get-global-interceptors) %)))))\n"]}