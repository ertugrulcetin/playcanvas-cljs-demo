{"version":3,"sources":["day8/re_frame_10x/navigation/epochs/subs.cljs"],"mappings":"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","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_sub","p__21261","map__21262","cljs.core/--destructure-map","cljs.core.get","epochs","_","p__21263","map__21265","matches-by-id","cljs.core.map","cljs.core.juxt","cljs.core/key","cljs.core.comp","day8.re-frame-10x.tools.metamorphic/matched-event","cljs.core/val","cljs.core.sort_by","cljs.core/first","cljs.core/>","p__21268","map__21272","selected-epoch-id","p__21280","map__21282","match-ids","p__21285","map__21286","matches","p__21293","vec__21298","cljs.core.nth","cljs.core/last","p__21307","map__21309","match-info","match","trace","cljs.core.get_in","cljs.core/count","p__21322","map__21324","selected-epoch-index","p__21340","vec__21344","p__21355","vec__21359","day8.re-frame-10x.tools.coll/last-in-vec"],"sourcesContent":["(ns day8.re-frame-10x.navigation.epochs.subs\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.tools.metamorphic                          :as metam]\n    [day8.re-frame-10x.tools.coll                                 :as tools.coll]))\n\n(rf/reg-sub\n  ::root\n  (fn [{:keys [epochs]} _]\n    epochs))\n\n(rf/reg-sub\n  ::matches-by-id\n  :<- [::root]\n  (fn [{:keys [matches-by-id]} _]\n    matches-by-id))\n\n(rf/reg-sub\n  ::events-by-id\n  :<- [::matches-by-id]\n  (fn [matches-by-id _]\n    (->> (map (juxt key (comp :event :tags metam/matched-event :match-info val))\n              matches-by-id)\n         (sort-by first >))))\n\n(rf/reg-sub\n  ::selected-epoch-id\n  :<- [::root]\n  (fn [{:keys [selected-epoch-id]} _]\n    selected-epoch-id))\n\n(rf/reg-sub\n  ::match-ids\n  :<- [::root]\n  (fn [{:keys [match-ids]} _]\n    match-ids))\n\n(rf/reg-sub\n  ::matches\n  :<- [::root]\n  (fn [{:keys [matches]} _]\n    matches))\n\n(rf/reg-sub\n  ::selected-match-state\n  :<- [::match-ids]\n  :<- [::matches]\n  :<- [::matches-by-id]\n  :<- [::selected-epoch-id]\n  (fn [[match-ids matches matches-by-id selected-epoch-id] _]\n    (cond\n      (nil? selected-epoch-id) (last matches)\n      (< selected-epoch-id (first match-ids)) (first matches)\n      ;; This case seems impossible, but can happen if the user filters out\n      ;; an event that they are 'on'.\n      (> selected-epoch-id (last match-ids)) (last matches)\n      :else (get matches-by-id selected-epoch-id))))\n\n(rf/reg-sub\n  ::selected-match\n  :<- [::selected-match-state]\n  (fn [{:keys [match-info]} _]\n    match-info))\n\n(rf/reg-sub\n  ::selected-event-trace\n  :<- [::selected-match]\n  (fn [match _]\n    (metam/matched-event match)))\n\n(rf/reg-sub\n  ::selected-event\n  :<- [::selected-event-trace]\n  (fn [trace _]\n    (get-in trace [:tags :event])))\n\n(rf/reg-sub\n  ::number-of-matches\n  :<- [::matches]\n  (fn [matches _]\n    (count matches)))\n\n(rf/reg-sub\n  ::selected-event-index\n  :<- [::root]\n  (fn [{:keys [selected-epoch-index]} _]\n    selected-epoch-index))\n\n(rf/reg-sub\n  ::beginning-trace-id\n  :<- [::selected-match]\n  (fn [match _]\n    (:id (first match))))\n\n(rf/reg-sub\n  ::ending-trace-id\n  :<- [::selected-match]\n  (fn [match _]\n    (:id (last match))))\n\n(rf/reg-sub\n  ::older-epochs-available?\n  :<- [::selected-epoch-id]\n  :<- [::match-ids]\n  (fn [[selected-epoch-id match-ids] _]\n    (and (< 1 (count match-ids))\n         (or (nil? selected-epoch-id)\n             (> selected-epoch-id (nth match-ids 0))))))\n\n(rf/reg-sub\n  ::newer-epochs-available?\n  :<- [::selected-epoch-id]\n  :<- [::match-ids]\n  (fn [[selected-epoch-id match-ids] _]\n    (and (< 1 (count match-ids))\n         (some? selected-epoch-id)\n         (< selected-epoch-id (tools.coll/last-in-vec match-ids)))))\n\n"]}