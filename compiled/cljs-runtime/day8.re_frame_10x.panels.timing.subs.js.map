{"version":3,"sources":["day8/re_frame_10x/panels/timing/subs.cljs"],"mappings":"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","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_sub","traces","start-of-epoch","cljs.core.nth","end-of-epoch","day8.re-frame-10x.tools.coll/last-in-vec","day8.re-frame-10x.tools.metamorphic/elapsed-time","p1__24698#","cljs.core.filter","day8.re-frame-10x.tools.metamorphic/request-animation-frame?","day8.re-frame-10x.tools.metamorphic/request-animation-frame-end?","frame-traces","cljs.core/count","var_args","G__24712","day8.re-frame-10x.panels.timing.subs/+nil","args-arr__5791__auto__","len__5766__auto__","i__5767__auto__","argseq__5792__auto__","cljs.core/IndexedSeq","seq24705","G__24706","cljs.core/first","cljs.core/next","G__24707","self__5751__auto__","x","y","more","cljs.core.reduce","cljs.core/+","p__24724","p__24725","vec__24726","vec__24729","af-start-end","epoch-traces","_","frame-number","frame-pairs","cljs.core.partition","vec__24733","start","end","af-traces","cljs.core.into","day8.re-frame-10x.tools.metamorphic/id-between-xf","total-time","subs-time","cljs.core.transduce","cljs.core.comp","day8.re-frame-10x.tools.metamorphic/subscription?","cljs.core.map","render-time","day8.re-frame-10x.tools.metamorphic/render?","match","map__24738","cljs.core/--destructure-map","cljs.core.get","event-time","event-handler-time","event-dofx-time","event-run-time","remaining-interceptors","start-of-render","cljs.core/seq"],"sourcesContent":["(ns day8.re-frame-10x.panels.timing.subs\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.tools.metamorphic                          :as metam]\n    [day8.re-frame-10x.navigation.epochs.subs                     :as epochs.subs]\n    [day8.re-frame-10x.panels.traces.subs                         :as traces.subs]\n    [day8.re-frame-10x.tools.coll                                 :as tools.coll]))\n\n(rf/reg-sub\n  ::total-epoch-time\n  :<- [::traces.subs/filtered-by-epoch-always]\n  (fn [traces]\n    (let [start-of-epoch (nth traces 0)\n          end-of-epoch   (tools.coll/last-in-vec traces)]\n      (metam/elapsed-time start-of-epoch end-of-epoch))))\n\n(rf/reg-sub\n  ::animation-frame-traces\n  :<- [::traces.subs/filtered-by-epoch-always]\n  (fn [traces]\n    (filter #(or (metam/request-animation-frame? %)\n                 (metam/request-animation-frame-end? %))\n            traces)))\n\n(rf/reg-sub\n  ::animation-frame-count\n  :<- [::animation-frame-traces]\n  (fn [frame-traces]\n    (count (filter metam/request-animation-frame? frame-traces))))\n\n(defn ^number +nil\n  \"Returns the sum of nums. (+) returns nil (not 0 like in cljs.core).\"\n  ([] nil)\n  ([x] x)\n  ([x y] (cljs.core/+ x y))\n  ([x y & more]\n   (reduce + (cljs.core/+ x y) more)))\n\n(rf/reg-sub\n  ::animation-frame-time\n  :<- [::animation-frame-traces]\n  :<- [::traces.subs/filtered-by-epoch-always]\n  (fn [[af-start-end epoch-traces] [_ frame-number]]\n    (let [frame-pairs (partition 2 af-start-end)]\n      (when (> (count frame-pairs) frame-number)\n        (let [[start end] (nth frame-pairs (dec frame-number))\n              af-traces   (into [] (metam/id-between-xf (:id start) (:id end)) epoch-traces)\n              total-time  (metam/elapsed-time start end)\n              ;; TODO: these times double count renders/subs that happened as a child of another\n              ;; need to fix either here, at ingestion point, or most preferably in re-frame at tracing point.\n              subs-time   (transduce (comp\n                                       (filter metam/subscription?)\n                                       (map :duration))\n                                     +nil af-traces)\n              render-time (transduce (comp\n                                       (filter metam/render?)\n                                       (map :duration))\n                                     +nil af-traces)]\n          {:timing/animation-frame-total  total-time\n           :timing/animation-frame-subs   subs-time\n           :timing/animation-frame-render render-time\n           ;; TODO: handle rounding weirdness here, make sure it is never below 0.\n           :timing/animation-frame-misc   (- total-time subs-time render-time)})))))\n\n\n(rf/reg-sub\n  ::event-processing-time\n  :<- [::epochs.subs/selected-match-state]\n  (fn [match]\n    (let [{:re-frame/keys [event-time event-handler-time event-dofx-time event-run-time]} (get match :timing)\n          ;; The scope of tracing is:\n          ;; event-run-time\n          ;;   event-time\n          ;;     event-handler-time\n          ;;     event-dofx-time\n          ;;     <other stuff>\n          ;;   <other stuff>\n          remaining-interceptors (- event-time event-handler-time event-dofx-time)]\n      {:timing/event-total        event-run-time\n       :timing/event-handler      event-handler-time\n       :timing/event-effects      event-dofx-time\n       :timing/event-interceptors remaining-interceptors\n       ;; TODO: look at splitting out interceptors from misc, there was a suspiciously high amount of time\n       ;; in misc on some events, so that needs to be investigated.\n       ; :timing/event-misc (- event-run-time event-time)\n       :timing/event-misc         (- event-run-time event-handler-time event-dofx-time)})))\n\n(rf/reg-sub\n  ::render-time\n  :<- [::traces.subs/filtered-by-epoch-always]\n  (fn [traces]\n    (let [start-of-render (first (filter metam/request-animation-frame? traces))\n          end-of-epoch    (tools.coll/last-in-vec traces)]\n      (metam/elapsed-time start-of-render end-of-epoch))))\n\n(rf/reg-sub\n  ::data-available?\n  :<- [::traces.subs/filtered-by-epoch-always]\n  (fn [traces]\n    (seq traces)))\n\n"]}