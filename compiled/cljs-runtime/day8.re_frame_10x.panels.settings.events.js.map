{"version":3,"sources":["day8/re_frame_10x/panels/settings/events.cljs"],"mappings":"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","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.path","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/trim-v","day8.re_frame_10x.fx.local_storage.save","p__20897","vec__20898","cljs.core.nth","_","width%","x__5128__auto__","y__5129__auto__","p__20901","vec__20902","width","p__20905","vec__20906","selected-tab","showing?","cljs.core/not","p__20910","vec__20911","show-panel?","db","day8.re-frame-10x.fx.local-storage/delete-all-keys!","js/location.reload","p__20914","vec__20915","ambiance","p__20918","vec__20920","syntax-color-scheme","p__20923","vec__20924","num-str","num","js/parseInt","js/isNaN","cljs.core/pos-int?","day8.re-frame-10x.panels.settings.events/ignored-event-interceptors","ignored-events","id","cljs.core/random-uuid","cljs.core.assoc","js/Date.now","p__20932","vec__20936","cljs.core.dissoc","p__20943","vec__20944","event-str","event","day8.re-frame-10x.tools.reader.edn/read-string-maybe","cljs.core/assoc-in","cljs.core.update_in","old-event","p__20948","vec__20949","day8.re-frame-10x.panels.settings.events/filtered-view-trace-interceptors","filtered-view-trace","p__20964","vec__20967","p__20972","vec__20976","ns-str","p__20982","vec__20983","day8.re-frame-10x.panels.settings.events/low-level-trace-interceptors","p__20993","vec__20994","low-level","p__21002","vec__21006","trace-type","capture?","p__21011","vec__21012","debug?","p__21021","vec__21022","follows-events?","p__21027","vec__21028","external-window-dimensions","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/unwrap","p__21040","map__21041","cljs.core/--destructure-map","cljs.core.get","height","p__21044","map__21045","left","top","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_fx","p__21052","map__21053","settings","now-showing?","external-panel?","using-trace?","or__5043__auto__","cljs.core.merge","p__21071","vec__21072","show-event-history?","p__21078","vec__21079","open-new-inspectors?"],"sourcesContent":["(ns day8.re-frame-10x.panels.settings.events\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.fx.local-storage                           :as local-storage]\n    [day8.re-frame-10x.fx.trace                                   :as trace]\n    [day8.re-frame-10x.tools.reader.edn                           :as reader.edn]))\n\n(rf/reg-event-db\n  ::panel-width%\n  [(rf/path [:settings :panel-width%]) rf/trim-v (local-storage/save \"panel-width-ratio\")]\n  (fn [_ [width%]]\n    (max width% 0.05)))\n\n(rf/reg-event-db\n  ::window-width\n  [(rf/path [:settings :window-width]) rf/trim-v]\n  (fn [_ [width]]\n    width))\n\n(rf/reg-event-db\n  ::selected-tab\n  [(rf/path [:settings :selected-tab]) rf/trim-v (local-storage/save \"selected-tab\")]\n  (fn [_ [selected-tab]]\n    selected-tab))\n\n(rf/reg-event-db\n  ::toggle\n  [(rf/path [:settings :showing-settings?])]\n  (fn [showing? _]\n    (not showing?)))\n\n(rf/reg-event-db\n  ::show-panel?\n  [(rf/path [:settings :show-panel?]) rf/trim-v (local-storage/save \"show-panel\")]\n  (fn [_ [show-panel?]]\n    show-panel?))\n\n(rf/reg-event-db\n  ::factory-reset\n  (fn [db _]\n    ;; [IJ] TODO: these should be fx\n    (local-storage/delete-all-keys!)\n    (js/location.reload)\n    db))\n\n(rf/reg-event-db\n  ::set-ambiance\n  [(rf/path [:settings :ambiance]) rf/trim-v (local-storage/save \"ambiance\")]\n  (fn [_ [ambiance]]\n    ambiance))\n\n(rf/reg-event-db\n  ::set-syntax-color-scheme\n  [(rf/path [:settings :syntax-color-scheme]) rf/trim-v (local-storage/save \"syntax-color-scheme\")]\n  (fn [_ [syntax-color-scheme]]\n    syntax-color-scheme))\n\n(rf/reg-event-db\n  ::set-number-of-retained-epochs\n  [(rf/path [:settings :number-of-epochs]) rf/trim-v (local-storage/save \"retained-epochs\")]\n  (fn [_ [num-str]]\n    ;; TODO: this is not perfect, there is an issue in re-com\n    ;; where it won't update its model if it never receives another\n    ;; changes after it's on-change is fired.\n    ;; TODO: you could reset the stored epochs on change here\n    ;; once the way they are processed is refactored.\n    (let [num (js/parseInt num-str)\n          num (if (and (not (js/isNaN num)) (pos-int? num))\n                num\n                5)]\n      num)))\n\n(def ignored-event-interceptors\n  [(rf/path [:settings :ignored-events])\n   rf/trim-v\n   (local-storage/save \"ignored-events\")])\n\n(rf/reg-event-db\n  ::add-ignored-event\n  ignored-event-interceptors\n  (fn [ignored-events _]\n    (let [id (random-uuid)]\n      (assoc ignored-events id {:id id :event-str \"\" :event-id nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  ::remove-ignored-event\n  ignored-event-interceptors\n  (fn [ignored-events [id]]\n    (dissoc ignored-events id)))\n\n(rf/reg-event-db\n  ::update-ignored-event\n  ignored-event-interceptors\n  (fn [ignored-events [id event-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (reader.edn/read-string-maybe event-str)]\n      (-> ignored-events\n          (assoc-in [id :event-str] event-str)\n          (update-in [id :event-id] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  ::set-ignored-events\n  ignored-event-interceptors\n  (fn [_ [ignored-events]]\n    ignored-events))\n\n(def filtered-view-trace-interceptors\n  [(rf/path [:settings :filtered-view-trace])\n   rf/trim-v\n   (local-storage/save \"filtered-view-trace\")])\n\n(rf/reg-event-db\n  ::add-filtered-view-trace\n  filtered-view-trace-interceptors\n  (fn [filtered-view-trace _]\n    (let [id (random-uuid)]\n      (assoc filtered-view-trace id {:id id :ns-str \"\" :ns nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n  ::remove-filtered-view-trace\n  filtered-view-trace-interceptors\n  (fn [filtered-view-trace [id]]\n    (dissoc filtered-view-trace id)))\n\n(rf/reg-event-db\n  ::update-filtered-view-trace\n  filtered-view-trace-interceptors\n  (fn [filtered-view-trace [id ns-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n    (let [event (reader.edn/read-string-maybe ns-str)]\n      (-> filtered-view-trace\n          (assoc-in [id :ns-str] ns-str)\n          (update-in [id :ns] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n  ::set-filtered-view-trace\n  filtered-view-trace-interceptors\n  (fn [_ [ignored-events]]\n    ignored-events))\n\n(def low-level-trace-interceptors\n  [(rf/path [:settings :low-level-trace])\n   rf/trim-v\n   (local-storage/save \"low-level-trace\")])\n\n(rf/reg-event-db\n  ::set-low-level-trace\n  low-level-trace-interceptors\n  (fn [_ [low-level]]\n    low-level))\n\n(rf/reg-event-db\n  ::low-level-trace\n  low-level-trace-interceptors\n  (fn [low-level [trace-type capture?]]\n    (assoc low-level trace-type capture?)))\n\n(rf/reg-event-db\n  ::debug?\n  [(rf/path [:settings :debug?]) rf/trim-v]\n  (fn [_ [debug?]]\n    debug?))\n\n(rf/reg-event-db\n  ::app-db-follows-events?\n  [(rf/path [:settings :app-db-follows-events?]) rf/trim-v (local-storage/save \"app-db-follows-events?\")]\n  (fn [_ [follows-events?]]\n    follows-events?))\n\n(rf/reg-event-db\n  ::external-window-dimensions\n  [(rf/path [:settings :external-window-dimensions]) rf/trim-v (local-storage/save \"external-window-dimensions\")]\n  (fn [_ [external-window-dimensions]]\n    external-window-dimensions))\n\n(rf/reg-event-db\n  ::external-window-resize\n  [(rf/path [:settings :external-window-dimensions]) rf/unwrap (local-storage/save \"external-window-dimensions\")]\n  (fn [external-window-dimensions {:keys [width height]}]\n    (assoc external-window-dimensions :width width :height height)))\n\n(rf/reg-event-db\n  ::external-window-position\n  [(rf/path [:settings :external-window-dimensions]) rf/unwrap (local-storage/save \"external-window-dimensions\")]\n  (fn [external-window-dimensions {:keys [left top]}]\n    (assoc external-window-dimensions :left left :top top)))\n\n(rf/reg-event-fx\n  ::user-toggle-panel\n  [(rf/path [:settings])\n   (local-storage/save \"using-trace?\" :using-trace?)\n   (local-storage/save \"show-panel\" :show-panel?)]\n  (fn [{settings :db} _]\n    (let [now-showing?    (not (get settings :show-panel?))\n          external-panel? (get settings :external-window?)\n          using-trace?    (or external-panel? now-showing?)]\n      (merge\n        {:db (-> settings\n                 (assoc :using-trace? using-trace?)\n                 (assoc :show-panel? now-showing?))}\n        (if now-showing?\n          {::trace/enable {:key ::cb}}\n          (when-not external-panel?\n            {::trace/disable {:key ::cb}}))))))\n\n(rf/reg-event-fx\n  ::enable-tracing\n  (fn [_ _]\n    {::trace/enable {:key ::cb}}))\n\n(rf/reg-event-fx\n  ::disable-tracing\n  (fn [_ _]\n    {::trace/disable {:key ::cb}}))\n\n(rf/reg-event-db\n  ::show-event-history?\n  [(rf/path [:settings :show-event-history?]) rf/trim-v (local-storage/save \"show-event-history\")]\n  (fn [_ [show-event-history?]]\n    show-event-history?))\n\n(rf/reg-event-db\n  ::open-new-inspectors?\n  [(rf/path [:settings :open-new-inspectors?]) rf/trim-v (local-storage/save \"open-new-inspectors?\")]\n  (fn [_ [open-new-inspectors?]]\n    open-new-inspectors?))"]}