{"version":3,"sources":["day8/re_frame_10x/fx/window.cljs"],"mappings":";;;;AAOA,wCAAA,xCAAMA,wFACHC;AADH,6DAGO,AAACC,+CAAO,eAAAC,JAAKG,vHAKb,yDAAA,lDAACM;AALO,AAAA,IAAAR,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAUG;QAAV,AAAAF,4CAAAD,WAAA,IAAA,/DAAYI;AAAZ,AACE,IAAMD,QAAE,EAAI,cAAAE,bAAUF,iCAAG,AAACG,eAAKH,GAAGA;IAC5BC,QAAE,EAAI,cAAAC,bAAUD,iCAAG,AAACE,eAAKF,GAAGA;AADlC,AAEE,OAACG,6CAAKL,IAAI,oDAAA,PAAKC,uDAAMC;oCAJjCP,jCACA;;AAOP;;;mDAAA,2DAAAY,9GAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEAEWI;aAFX,AAAAF,4CAAAF,eAAA,pEAEiBK;UAFjB,AAAAH,4CAAAF,eAAA,jEAEwBM;WAFxB,AAAAJ,4CAAAF,eAAA,lEAE4BO;cAF5B,AAAAL,4CAAAF,eAAA,rEAEiCQ;iBAFjC,AAAAN,4CAAAF,eAAA,xEAEyCS;iBAFzC,AAAAP,4CAAAF,eAAA,xEAEoDU;AAFpD,AAGE,IAAMC,iBAAgBC;IAChBC,eAAgB,AAACC,yBAAqB,CAAA,8DAAuBH;IAC7DI,cAAgB,CAAA,0EAAA,dACKF;IAErBG,kBAAgB,sCAAA,wCAAA,oDAAA,uDAAA,gEAAA,0DAAA,mEAAA,4DAAA,iEAAA,2DAAA,yDAAA,iEAAA,kDAAA,iDAAA,iDAAA,iDAAA,kDAAA,/5BAAC9B,kqBACekB,8SACAC,OACAE,zTACAD;AATtC,AAkBE,IAAAW,qBAAW,YAAA,cAAA,1BAACE,gDAAmDH;AAA/D,AAAA,oBAAAC;AAAA,QAAAA,JAASC;AAAT,AAEE,IAAME,IAAE,AAAYF;AAApB,AAQE,AAAOE;;AACP,AAAQA,QAAEL;;AACV,0DAAA,1DAACM,wDAASH,WAAW,AAACI,gDAAQd,QAAQU,EAAEE;;AACxC,AAAQA;;AACR,OAACG,sEAAYd;;AACf,OAACc,sEAAYb;;;AAEnB,oEAAA,pEAACc,6MAECrB","names":["day8.re-frame-10x.fx.window/m->str","m","cljs.core.reduce","p__20472","vec__20473","cljs.core.nth","ret","k","v","cljs.core/Keyword","cljs.core/name","cljs.core.conj","clojure.string.join","p__20477","map__20478","cljs.core/--destructure-map","cljs.core.get","day8.re-frame-10x.fx.window/open-debugger-window","width","height","top","left","on-load","on-success","on-failure","document-title","js/document.title","window-title","goog.string/escapeString","window-html","window-features","temp__5802__auto__","w","js/window.open","d","day8.re_frame_10x.fx.window.goog$module$goog$object.set","cljs.core.partial","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/reg-fx"],"sourcesContent":["(ns day8.re-frame-10x.fx.window\n  (:require\n    [goog.object                                                  :as gobj]\n    [goog.string                                                  :as gstring]\n    [clojure.string                                               :as string]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]))\n\n(defn m->str\n  [m]\n  (->> m\n       (reduce (fn [ret [k v]]\n                 (let [k (if (keyword? k) (name k) k)\n                       v (if (keyword? v) (name v) v)]\n                   (conj ret (str k \"=\" v))))\n               [])\n       (string/join \",\")))\n\n(defn open-debugger-window\n  \"Originally copied from re-frisk.devtool/open-debugger-window\"\n  [{:keys [width height top left on-load on-success on-failure]}]\n  (let [document-title  js/document.title\n        window-title    (gstring/escapeString (str \"re-frame-10x | \" document-title))\n        window-html     (str \"<head><title>\"\n                             window-title\n                             \"</title></head><body style=\\\"margin: 0px;\\\"></body>\")\n        window-features (m->str\n                          {:width       width\n                           :height      height\n                           :left        left\n                           :top         top\n                           :resizable   :yes\n                           :scrollbars  :yes\n                           :status      :no\n                           :directories :no\n                           :toolbar     :no\n                           :menubar     :no})]\n    ;; We would like to set the windows left and top positions to match the monitor that it was on previously, but Chrome doesn't give us\n    ;; control over this, it will only position it within the same display that it was popped out on.\n    (if-let [w (js/window.open \"about:blank\" \"re-frame-10x-popout\" window-features)]\n\n      (let [d (.-document w)]\n        ;; We had to comment out the following unmountComponentAtNode as it causes a React exception we assume\n        ;; because React says el is not a root container that it knows about.\n        ;; In theory by not freeing up the resources associated with this container (e.g. event handlers) we may be\n        ;; creating memory leaks. However with observation of the heap in developer tools we cannot see any significant\n        ;; unbounded growth in memory usage.\n        ;(when-let [el (.getElementById d \"--re-frame-10x--\")]\n        ;  (r/unmount-component-at-node el)))\n        (.open d)\n        (.write d window-html)\n        (gobj/set w \"onload\" (partial on-load w d))\n        (.close d)\n        (rf/dispatch on-success))\n      (rf/dispatch on-failure))))\n\n(rf/reg-fx\n  ::open-debugger-window\n  open-debugger-window)"]}