{"version":3,"sources":["day8/re_frame_10x/inlined_deps/spade/git_sha_93ef290/runtime.cljc"],"mappings":";AAOA,GAAA,QAAAA,iCAAAC,8CAAAC,2DAAAC,iEAAAC,iFAAAC,yFAAAC;AAAA;AAAA,AAAA,6FAAA,2CAAA,xIAAmBC,+MACSC;;AAG5B,GAAA,QAAAR,iCAAAC,8CAAAC,2DAAAC,iEAAAC,iFAAAC,yFAAAI;AAAA;AAAA,AAAA,AAAmBC,2FAAkB,AAACC;;AAEtC,4EAAA,5EAAMC,gKAAWC;AAAjB,AACE,mFAAA,5EAACC,kFAAoBD;;AAEvB,2EAAA,3EAAME,8JAAaC;AAAnB,AACE,OAACC,qJAAWV,2FAAoBS;;AAElC,6EAAA,qFAAAE,lKAAOI;AAAP,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;iBAAA,AAAAE,4CAAAF,eAAA,xEAAuBI;eAAvB,AAAAF,4CAAAF,eAAA,tEAAwCK;AAAxC,AACE,GAAA,AAAAC,cAAQD;AACND;;6DAKK,AAACK,4CAAI,WAAKC,pHAeV,yDAAA,lDAACG;AAfI,AACE,GACE,OAASH;AAAMA;;AADjB,GAIE,EAAK,AAACC,qBAAKD,WACN,OAAS,AAAA,sFAAQA;AACtB,OAAA,sFAAQA;;AANV,AASE,MAAO,kJAAA,2CAAA,2EAAA,xQAACE,gDACC,CAAA,iFACKF,2HACQN,iEACLM;;;;GAjB1B,oGAAA,lGAAI,AAACH,qBAAKF,WACR,AAACG,6CAAKH,SAASD,+FACdC,SAASD;;;AAkBrB,kFAAA,lFAAMU,4KAAeC,KAAKC,gBAAgBC,QAAQC;AAAlD,AACE,IAAAC,aAA2C,AAACG,8CAAML,QAAQD,gBAAgBE,OAAOA;IAAjFC,iBAAA,AAAAlB,4BAAAkB;WAAAA,PAAqCE;UAArC,AAAAnB,4CAAAiB,eAAA,jEAAOC;iBAAP,AAAAlB,4CAAAiB,eAAA,xEAAgBf;AAAhB,AAEE,AAACmB,iFAAgBhC,yFAAkBa,WAAWgB;;AAE9C,IAAAI,WAAMT;IAANS,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,kDAAA,wDACiB,AAACrB,2EAAckB;;;KADhC;KAAA;AAEsB,OAAClB,2EAAckB;;;KAFrC;AAGUD;;;;AAHV,MAAA,KAAAM,MAAA,CAAA,mEAAAF","names":["js/day8","js/day8.re-frame-10x","js/day8.re-frame-10x.inlined-deps","js/day8.re-frame-10x.inlined-deps.spade","js/day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290","js/day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime","js/day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime.*css-compile-flags*","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime/*css-compile-flags*","js/goog.DEBUG","js/day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime.*style-container*","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime/*style-container*","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime.defaults/create-container","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime/->css-var","n","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.types/->CSSFunction","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime/compile-css","elements","day8.re_frame_10x.inlined_deps.garden.v1v3v10.garden.core.css","p__19397","map__19398","cljs.core/--destructure-map","cljs.core.get","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime/compose-names","style-name","composed","cljs.core/not","cljs.core/seq?","cljs.core.into","cljs.core.map","item","cljs.core/map?","cljs.core.ex_info","clojure.string.join","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime/ensure-style!","mode","base-style-name","factory","params","map__19403","css","info","cljs.core.apply","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.container/mount-style!","G__19404","cljs.core/Keyword","js/Error"],"sourcesContent":["(ns day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime\n  (:require [clojure.string :as str]\n            [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.core :as garden]\n            [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.types :refer [->CSSFunction]]\n            [day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.container :as sc]\n            [day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime.defaults :as defaults]))\n\n(defonce ^:dynamic *css-compile-flags*\n  {:pretty-print? #? (:cljs goog.DEBUG\n                      :clj false)})\n\n(defonce ^:dynamic *style-container* (defaults/create-container))\n\n(defn ->css-var [n]\n  (->CSSFunction \"var\" n))\n\n(defn compile-css [elements]\n  (garden/css *css-compile-flags* elements))\n\n(defn- compose-names [{style-name :name composed :composes}]\n  (if-not composed\n    style-name\n\n    (->> (if (seq? composed)\n           (into composed style-name)\n           [composed style-name])\n         (map (fn [item]\n                (cond\n                  (string? item) item\n\n                  ; unpack a defattrs\n                  (and (map? item)\n                       (string? (:class item)))\n                  (:class item)\n\n                  :else\n                  (throw (ex-info\n                           (str \"Invalid argument to :composes key:\"\n                                item)\n                           {:style-name style-name\n                            :value item})))))\n         (str/join \" \"))))\n\n(defn ensure-style! [mode base-style-name factory params]\n  (let [{css :css style-name :name :as info} (apply factory base-style-name params params)]\n\n    (sc/mount-style! *style-container* style-name css)\n\n    (case mode\n      :attrs {:class (compose-names info)}\n      (:class :keyframes) (compose-names info)\n      :global css)))\n"]}