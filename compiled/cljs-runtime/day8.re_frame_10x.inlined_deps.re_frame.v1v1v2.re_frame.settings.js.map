{"version":3,"sources":["day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/settings.cljc"],"mappings":";AAKA,4EAAA,2CAAA,4DAAA,MAAA,zLAAKA,6QAEmBC;AAExB,AAAKC,yEACH,AAACC,6CAAKH;AAER,wEAAA,xEAACI;AAAD,AACG,OAACC,mDAAMH,uEAAM,WAAKI;AAAL,AAAQ,uDAAA,4DAAA,5GAACC,8CAAMD;;;AAE/B,iFAAA,jFAAME;AAAN,AAEE,OAAA,0FAAA,AAAAC,gBAAWP;;AAEb,+FAAA,/FAAMQ,sMACHC,oBAAoBC;AADvB,AAEE,OAACC,+CACC,WAAKC,IAAIC;AAAT,AACE,GAAI,AAACC,6CAAE,AAAA,gFAAKJ,aACL,AAAA,gFAAKG;AACV,AACE,GAAME;AAAN,AACE,GAAM,AAACC,cAAI,AAACV;AAAZ,AACE,6GAAA,uGAAA,pNAACW,4QAAsE,AAAA,gFAAKP;;AAD9E;;AADF;;AAGA,OAACQ,6CAAKN,IAAIF;;AACZ,OAACQ,6CAAKN,IAAIC;;GACdd,4EACAU;;AAEJ,0FAAA,kGAAAU,5LAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;kBAAAA,dACmBV;SADnB,AAAAY,4CAAAF,eAAA,hEACWI;AADX,AAEE,kJAAA,3IAACrB,mDAAMH,uEAAMyB,qGACN,WAAKhB;AAAL,AACE,IAAMiB,MAAI,4CAAA,5CAACC,8FAAQlB;AAAnB,AACE,oBAAI,eAAA,fAACmB,8DAAOJ,KAAIE;AAGd,OAAClB,6FAA4BC,oBAAoBC;;AACjD,OAACQ,6CAAKT,oBAAoBC;;;;AAEzC,2FAAA,3FAAMmB;AAAN,AAEE,OAAA,kHAAA,AAAAtB,gBAAuBP;;AAEzB,AAAA,6FAAA,qGAAA8B,lMAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,yHAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2HAAA,3HAAMD;AAAN,AAEG,iJAAA,1IAAC7B,mDAAMH,uEAAMkC,oGAA2BnC;;;AAF3C,CAAA,2HAAA,3HAAMiC,sIAGFR;AAHJ,AAIG,kJAAA,3IAACrB,mDAAMH,uEAAMyB,qGACN,WAAKhB;AAAL,AACE,OAAC0B,6CAAKpC,4EAAoB,+CAAA,WAAAqC,1DAACC;AAAD,AAAS,OAACvB,6CAAEU,GAAG,AAAA,gFAAAY;GAAS3B;;;;AAN9D,CAAA,qHAAA,rHAAMuB;;AAAN","names":["day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.settings/defaults","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop/empty-queue","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.settings/store","cljs.core.atom","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop/on-load","cljs.core.swap_BANG_","m","cljs.core.assoc","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.settings/loaded?","cljs.core/deref","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.settings/-replace-global-interceptor","global-interceptors","interceptor","cljs.core.reduce","ret","existing-interceptor","cljs.core._EQ_","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop/debug-enabled?","cljs.core/not","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.loggers.console","cljs.core.conj","p__16015","map__16016","cljs.core/--destructure-map","cljs.core.get","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.settings/reg-global-interceptor","id","cljs.core/update","ids","cljs.core.map","cljs.core/some","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.settings/get-global-interceptors","var_args","G__16030","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.settings/clear-global-interceptors","js/Error","cljs.core/assoc","cljs.core.into","p1__16024#","cljs.core.remove"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.settings\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop :as interop]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.loggers :refer [console]]))\n\n(def defaults\n  {:loaded?             false\n   :global-interceptors interop/empty-queue})\n\n(def store\n  (atom defaults))\n\n(interop/on-load\n  #(swap! store (fn [m] (assoc m :loaded? true))))\n\n(defn loaded?\n  []\n  (:loaded? @store))\n\n(defn -replace-global-interceptor\n  [global-interceptors interceptor]\n  (reduce\n    (fn [ret existing-interceptor]\n      (if (= (:id interceptor)\n             (:id existing-interceptor))\n        (do\n          (when interop/debug-enabled?\n            (when (not (loaded?))\n              (console :warn \"re-frame: replacing duplicate global interceptor id: \" (:id interceptor))))\n          (conj ret interceptor))\n        (conj ret existing-interceptor)))\n    interop/empty-queue\n    global-interceptors))\n\n(defn reg-global-interceptor\n  [{:keys [id] :as interceptor}]\n  (swap! store update :global-interceptors\n         (fn [global-interceptors]\n           (let [ids (map :id global-interceptors)]\n             (if (some #{id} ids)\n               ;; If the id already exists we replace it in-place to maintain the ordering of\n               ;; global interceptors esp during hot-code reloading in development.\n               (-replace-global-interceptor global-interceptors interceptor)\n               (conj global-interceptors interceptor))))))\n\n(defn get-global-interceptors\n  []\n  (:global-interceptors @store))\n\n(defn clear-global-interceptors\n  ([]\n   (swap! store assoc :global-interceptors interop/empty-queue))\n  ([id]\n   (swap! store update :global-interceptors\n          (fn [global-interceptors]\n            (into interop/empty-queue (remove #(= id (:id %)) global-interceptors))))))\n"]}