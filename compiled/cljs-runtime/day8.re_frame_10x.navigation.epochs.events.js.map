{"version":3,"sources":["day8/re_frame_10x/navigation/epochs/events.cljs"],"mappings":"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","names":["day8.re-frame-10x.navigation.epochs.events/first-match-id","m","cljs.core/first","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_fx","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/trim-v","p__20541","vec__20542","cljs.core.nth","_","js-dom","p__20549","vec__20550","p__20556","p__20557","map__20559","cljs.core/--destructure-map","cljs.core.get","vec__20560","db","new-traces","temp__5802__auto__","sorted-traces","cljs.core.sort_by","map__20564","number-of-epochs-to-retain","cljs.core.get_in","events-to-ignore","cljs.core/vals","cljs.core.map","cljs.core/set","previous-traces","parse-state","day8.re-frame-10x.tools.metamorphic/initial-parse-state","drop-re-frame","drop-reagent","all-traces","cljs.core.into","day8.re-frame-10x.tools.metamorphic/parse-traces","new-matches","previous-matches","cljs.core.assoc","cljs.core.remove","match","event","day8.re-frame-10x.tools.metamorphic/matched-event","cljs.core/contains?","subscription-info","day8.re-frame-10x.tools.metamorphic/subscription-info","sub-state","day8.re-frame-10x.tools.metamorphic/initial-sub-state","subscription-match-state","day8.re-frame-10x.tools.metamorphic/subscription-match-state","subscription-matches","cljs.core/rest","new-sub-state","cljs.core/last","timing","cljs.core.mapv","epoch-traces","cljs.core.comp","day8.re-frame-10x.tools.coll/id-between-xf","start-of-epoch","event-handler-trace","cljs.core.filter","day8.re-frame-10x.tools.metamorphic/event-handler?","dofx-trace","day8.re-frame-10x.tools.metamorphic/event-dofx?","event-trace","day8.re-frame-10x.tools.metamorphic/event-run?","finish-run","or__5043__auto__","day8.re-frame-10x.tools.metamorphic/finish-run?","day8.re-frame-10x.tools.coll/last-in-vec","day8.re-frame-10x.tools.metamorphic/elapsed-time","sub-match","t","quiescent?","cljs.core/seq","day8.re-frame-10x.tools.metamorphic/quiescent?","all-matches","retained-matches","cljs.core/take-last","first-id-to-retain","retained-traces","p1__20554#","cljs.core.drop_while","trace","day8.re-frame-10x.tools.metamorphic/low-level-reagent-trace?","day8.re-frame-10x.tools.metamorphic/low-level-re-frame-trace?","cljs.core/assoc-in","cljs.core.update","epochs","selected-index","selected-id","cljs.core.juxt","cljs.core/identity","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.path","p__20578","map__20579","temp__5806__auto__","match-ids","match-array-index","day8.re-frame-10x.tools.coll/find-index-in-vec","x","cljs.core._EQ_","new-id","cljs.core/count","p__20594","map__20597","p__20612","map__20613","p__20617","p__20618","map__20621","vec__20622","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db","selected-epoch-id","app-db-before","day8.re-frame-10x.tools.metamorphic/app-db-before","cljs.core/reset!","re-frame.db/app-db","event-to-replay","re-frame.core/dispatch","cljs.core.dissoc","re-frame.trace/reset-tracing!","day8.re-frame-10x.tools.coll/dissoc-in","p__20629","vec__20630","match-id","temp__5808__auto__","new-db","day8.re-frame-10x.tools.metamorphic/app-db-after"],"sourcesContent":["(ns day8.re-frame-10x.navigation.epochs.events\n  (:require\n    [re-frame.core]\n    [re-frame.db]\n    [re-frame.trace]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.fx.debounce                                :as debounce]\n    [day8.re-frame-10x.fx.scroll                                  :as scroll]\n    [day8.re-frame-10x.tools.metamorphic                          :as metam]\n    [day8.re-frame-10x.tools.coll                                 :as tools.coll]))\n\n(defn first-match-id\n  [m]\n  (-> m :match-info first :id))\n\n(rf/reg-event-fx\n  ::scroll-into-view-debounced\n  [rf/trim-v]\n  (fn [_ [js-dom]]\n    {:fx [[::debounce/dispatch {:key   ::scroll-into-view\n                                :event [::scroll-into-view js-dom]\n                                :delay 128}]]}))\n\n(rf/reg-event-fx\n  ::scroll-into-view\n  [rf/trim-v]\n  (fn [_ [js-dom]]\n    {:fx [[::scroll/into-view {:js-dom js-dom}]]}))\n\n(rf/reg-event-fx\n  ::receive-new-traces\n  [rf/trim-v]\n  (fn [{:keys [db]} [new-traces]]\n    (if-let [sorted-traces (sort-by :id new-traces)]\n      (let [number-of-epochs-to-retain (get-in db [:settings :number-of-epochs])\n            events-to-ignore           (->> (get-in db [:settings :ignored-events]) vals (map :event-id) set)\n            previous-traces            (get-in db [:traces :all] [])\n            parse-state                (get-in db [:epochs :parse-state] metam/initial-parse-state)\n            {drop-re-frame :re-frame drop-reagent :reagent} (get-in db [:settings :low-level-trace])\n            all-traces                 (into previous-traces sorted-traces)\n            parse-state                (metam/parse-traces parse-state sorted-traces)\n            new-matches                (:partitions parse-state)\n            previous-matches           (get-in db [:epochs :matches] [])\n            parse-state                (assoc parse-state :partitions []) ;; Remove matches we know about\n            new-matches                (remove (fn [match]\n                                                 (let [event (get-in (metam/matched-event match) [:tags :event])]\n                                                   (contains? events-to-ignore (first event)))) new-matches)\n            ;; subscription-info is calculated separately from subscription-match-state because they serve different purposes:\n            ;; - subscription-info collects all the data that we know about the subscription itself, like its layer, inputs and other\n            ;;   things that are defined as part of the reg-sub.\n            ;; - subscription-match-state collects all the data that we know about the state of specific instances of subscriptions\n            ;;   like its reagent id, when it was created, run, disposed, what values it returned, e.t.c.\n            subscription-info          (metam/subscription-info (get-in db [:epochs :subscription-info] {}) sorted-traces (get-in db [:app-db :reagent-id]))\n            sub-state                  (get-in db [:epochs :sub-state] metam/initial-sub-state)\n            subscription-match-state   (metam/subscription-match-state sub-state all-traces new-matches)\n            subscription-matches       (rest subscription-match-state)\n\n            new-sub-state              (last subscription-match-state)\n            timing                     (mapv (fn [match]\n                                               (let [epoch-traces        (into []\n                                                                               (comp\n                                                                                 (tools.coll/id-between-xf (:id (first match)) (:id (last match))))\n                                                                               all-traces)\n                                                     ;; TODO: handle case when there are no epoch-traces\n                                                     start-of-epoch      (nth epoch-traces 0)\n                                                     ;; TODO: optimise trace searching\n                                                     event-handler-trace (first (filter metam/event-handler? epoch-traces))\n                                                     dofx-trace          (first (filter metam/event-dofx? epoch-traces))\n                                                     event-trace         (first (filter metam/event-run? epoch-traces))\n                                                     finish-run          (or (first (filter metam/finish-run? epoch-traces))\n                                                                             (tools.coll/last-in-vec epoch-traces))]\n                                                 {:re-frame/event-run-time     (metam/elapsed-time start-of-epoch finish-run)\n                                                  :re-frame/event-time         (:duration event-trace)\n                                                  :re-frame/event-handler-time (:duration event-handler-trace)\n                                                  :re-frame/event-dofx-time    (:duration dofx-trace)}))\n                                             new-matches)\n\n            new-matches                (map (fn [match sub-match t] {:match-info match\n                                                                     :sub-state  sub-match\n                                                                     :timing     t})\n                                            new-matches subscription-matches timing)\n            ;; If there are new matches found, then by definition, a quiescent trace must have been received\n            ;; However in cases where we reset the db in a replay, we won't get an event match.\n            ;; We short circuit here to avoid iterating over the traces when it's unnecessary.\n            quiescent?                 (or (seq new-matches)\n                                           (filter metam/quiescent? sorted-traces))\n            all-matches                (into previous-matches new-matches)\n            retained-matches           (into [] (take-last number-of-epochs-to-retain all-matches))\n            first-id-to-retain         (first-match-id (first retained-matches))\n            retained-traces            (into [] (comp (drop-while #(< (:id %) first-id-to-retain))\n                                                      (remove (fn [trace]\n                                                                (or (when drop-reagent (metam/low-level-reagent-trace? trace))\n                                                                    (when drop-re-frame (metam/low-level-re-frame-trace? trace)))))) all-traces)]\n        {:db       (-> db\n                       (assoc-in [:traces :all] retained-traces)\n                       (update :epochs (fn [epochs]\n                                         (let [selected-index (:selected-epoch-index epochs)\n                                               selected-id    (:selected-epoch-id epochs)]\n                                           (assoc epochs\n                                             :matches retained-matches\n                                             :matches-by-id (into {} (map (juxt first-match-id identity)) retained-matches)\n                                             :match-ids (mapv first-match-id retained-matches)\n                                             :parse-state parse-state\n                                             :sub-state new-sub-state\n                                             :subscription-info subscription-info\n                                             ;; Reset selected epoch to the head of the list if we got a new event in.\n                                             :selected-epoch-id (if (seq new-matches) (first-match-id (last retained-matches)) selected-id)\n                                             :selected-epoch-index (if (seq new-matches) nil selected-index))))))\n         :dispatch (when quiescent? [::quiescent])})\n      ;; Else\n      {:db db})))\n\n;; TODO: this code is a bit messy, needs refactoring and cleaning up.\n(rf/reg-event-fx\n  ::previous\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [selected-id (:selected-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (tools.coll/find-index-in-vec (fn [x] (= selected-id x)) match-ids)\n            new-id            (nth match-ids (dec match-array-index))]\n        {:db       (assoc db :selected-epoch-id new-id)\n         :dispatch [::reset-current-epoch-app-db new-id]})\n      (let [new-id (nth (:match-ids db)\n                        (- (count (:match-ids db)) 2))]\n        {:db       (assoc db :selected-epoch-id new-id)\n         :dispatch [::reset-current-epoch-app-db new-id]}))))\n\n\n(rf/reg-event-fx\n  ::next\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (if-some [selected-id (:selected-epoch-id db)]\n      (let [match-ids         (:match-ids db)\n            match-array-index (tools.coll/find-index-in-vec (fn [x] (= selected-id x)) match-ids)\n            new-id            (nth match-ids (inc match-array-index))]\n        {:db       (assoc db :selected-epoch-id new-id)\n         :dispatch [::reset-current-epoch-app-db new-id]})\n      (let [new-id (tools.coll/last-in-vec (:match-ids db))]\n        {:db       (assoc db :selected-epoch-id new-id)\n         :dispatch [::reset-current-epoch-app-db new-id]}))))\n\n(rf/reg-event-fx\n  ::most-recent\n  [(rf/path [:epochs])]\n  (fn [{:keys [db]} _]\n    (let [new-id (tools.coll/last-in-vec (:match-ids db))]\n      {:db       (assoc db :selected-epoch-index nil\n                           :selected-epoch-id new-id)\n       :dispatch [::reset-current-epoch-app-db new-id]})))\n\n(rf/reg-event-fx\n  ::load\n  [(rf/path [:epochs]) rf/trim-v]\n  (fn [{:keys [db]} [new-id]]\n    {:db       (assoc db :selected-epoch-id new-id)\n     :dispatch [::reset-current-epoch-app-db new-id]}))\n\n(rf/reg-event-db\n  ::replay\n  [(rf/path [:epochs])]\n  (fn [epochs _]\n    (let [selected-epoch-id (or (get epochs :selected-epoch-id)\n                                (tools.coll/last-in-vec (get epochs :match-ids)))\n          event-trace      (-> (get-in epochs [:matches-by-id selected-epoch-id :match-info])\n                               (metam/matched-event))\n          app-db-before    (metam/app-db-before event-trace)\n          event            (get-in event-trace [:tags :event])]\n      (reset! re-frame.db/app-db app-db-before)\n      ;; Wait for quiescence\n      (assoc epochs :replay event))))\n\n(rf/reg-event-db\n  ::quiescent\n  [(rf/path [:epochs])]\n  (fn [db _]\n    (if-some [event-to-replay (:replay db)]\n      (do (re-frame.core/dispatch event-to-replay)\n          (dissoc db :replay))\n      db)))\n\n(rf/reg-event-db\n  ::reset\n  (fn [db]\n    (re-frame.trace/reset-tracing!)\n    (-> db\n      (dissoc :epochs)\n      (tools.coll/dissoc-in [:traces :all]))))\n\n(rf/reg-event-db\n  ::reset-current-epoch-app-db\n  [rf/trim-v]\n  (fn [db [new-id]]\n    (when (get-in db [:settings :app-db-follows-events?])\n      (let [epochs   (:epochs db)\n            match-id (or new-id\n                         ;; new-id may be nil when we call this event from :settings/play\n                         (tools.coll/last-in-vec (get epochs :match-ids)))\n            match    (get-in epochs [:matches-by-id match-id])\n            event    (metam/matched-event (:match-info match))]\n        ;; Don't mess up the users app if there is a problem getting app-db-after.\n        (when-some [new-db (metam/app-db-after event)]\n          (reset! re-frame.db/app-db new-db))))\n    db))"]}