{"version":3,"sources":["day8/re_frame_10x.cljs"],"mappings":"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","names":["js/goog.define","day8.re-frame-10x/debug?","day8.re-frame-10x/resizer-style","draggable-area","day8.re-frame-10x/ease-transition","day8.re-frame-10x/devtools-outer","opts","panel-width%","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.subscribe","showing?","dragging?","day8.re_frame_10x.inlined_deps.reagent.v1v0v0.reagent.core.atom","window-width","js/window.innerWidth","handle-window-resize","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch","_","window-width-val","cljs.core/reset!","handle-keys","e","tag-name","entering-input?","cljs.core/contains?","and__5041__auto__","cljs.core._EQ_","handle-mousemove","cljs.core/deref","x","new-window-width","width%","handle-mouse-up","day8.re_frame_10x.inlined_deps.reagent.v1v0v0.reagent.core.create_class","js/window.addEventListener","js/window.removeEventListener","left","transition","day8.re-frame-10x.components.re-com/box","day8.re-frame-10x.components.re-com/h-box","day8.re-frame-10x.navigation.views/devtools-inner","day8.re-frame-10x/traced-result","trace-id","fragment-id","trace","cljs.core/first","p1__26358#","cljs.core.filter","cljs.core.get_in","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db/app-db","day8.re-frame-10x/factory-reset!","day8.re-frame-10x/show-panel!","show-panel?","day8.re-frame-10x/inject!","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/clear-subscription-cache!","shadow-root","day8.re-frame-10x.tools.shadow-dom/shadow-root","js/document","container","day8.re_frame_10x.inlined_deps.spade.git_sha_93ef290.container.dom.create_container","day8.re_frame_10x.inlined_deps.reagent.v1v0v0.reagent.dom.render","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.react/with-style-container","day8.re-frame-10x/patch!","day8.reagent.impl.component/patch-custom-wrapper","day8.reagent.impl.component/patch-wrap-funs","day8.reagent.impl.batching/patch-next-tick","day8.re-frame-10x/init!","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch-sync"],"sourcesContent":["(ns day8.re-frame-10x\n  (:require\n    [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.core           :as r]\n    [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.dom            :as rdom]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core         :as rf]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db]\n    [day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.container.dom   :as spade.dom]\n    [day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.react           :as spade.react]\n    [day8.reagent.impl.batching                                           :refer [patch-next-tick]]\n    [day8.reagent.impl.component                                          :refer [patch-wrap-funs patch-custom-wrapper]]\n    [day8.re-frame-10x.tools.shadow-dom                                   :as tools.shadow-dom]\n    [day8.re-frame-10x.events                                             :as events]\n    [day8.re-frame-10x.components.re-com                                  :as rc]\n    [day8.re-frame-10x.navigation.views                                   :as container]\n    [day8.re-frame-10x.panels.settings.subs                               :as settings.subs]\n    [day8.re-frame-10x.panels.settings.events                             :as settings.events]))\n\n(goog-define debug? false)\n\n#_(defonce real-schedule reagent.impl.batching/schedule)\n#_(defonce do-after-render-trace-scheduled? (atom false))\n\n\n\n\n(defn resizer-style [draggable-area]\n  {:position \"absolute\" :z-index 2 :opacity 0\n   :left     (str (- (/ draggable-area 2)) \"px\") :width \"10px\" :height \"100%\" :top \"0px\" :cursor \"col-resize\"})\n\n(def ease-transition \"left 0.2s ease-out, top 0.2s ease-out, width 0.2s ease-out, height 0.2s ease-out\")\n\n(defn devtools-outer [opts]\n  ;; Add clear button\n  ;; Filter out different trace types\n  (let [panel-width%         (rf/subscribe [::settings.subs/panel-width%])\n        showing?             (rf/subscribe [::settings.subs/show-panel?])\n        dragging?            (r/atom false)\n        window-width         (r/atom js/window.innerWidth)\n        handle-window-resize (do (rf/dispatch [::settings.events/window-width js/window.innerWidth]) ;; Set initial\n                                 (fn [_]\n                                   ;; N.B. I don't think this should be a perf bottleneck.\n                                   (let [window-width-val js/window.innerWidth]\n                                     (rf/dispatch [::settings.events/window-width window-width-val])\n                                     (reset! window-width window-width-val))))\n        handle-keys          (fn [e]\n                               (let [tag-name        (.-tagName (.-target e))\n                                     entering-input? (contains? #{\"INPUT\" \"SELECT\" \"TEXTAREA\"} tag-name)]\n                                 (when (and (not entering-input?)\n                                            (= (.-key e) \"h\")\n                                            (.-ctrlKey e))\n                                   (rf/dispatch [::settings.events/user-toggle-panel])\n                                   (.preventDefault e))))\n        handle-mousemove     (fn [e]\n                               (when @dragging?\n                                 (let [x                (.-clientX e)\n                                       #_#_y                (.-clientY e)\n                                       new-window-width js/window.innerWidth]\n                                   (.preventDefault e)\n                                   (let [width% (/ (- new-window-width x) new-window-width)]\n                                     (when (<= width% 0.9)\n                                       (rf/dispatch [::settings.events/panel-width% width%])))\n                                   (reset! window-width new-window-width))))\n        handle-mouse-up      (fn [_] (reset! dragging? false))]\n    (r/create-class\n      {:component-did-mount    (fn []\n                                 (js/window.addEventListener \"keydown\" handle-keys)\n                                 (js/window.addEventListener \"mousemove\" handle-mousemove)\n                                 (js/window.addEventListener \"mouseup\" handle-mouse-up)\n                                 (js/window.addEventListener \"resize\" handle-window-resize))\n       :component-will-unmount (fn []\n                                 (js/window.removeEventListener \"keydown\" handle-keys)\n                                 (js/window.removeEventListener \"mousemove\" handle-mousemove)\n                                 (js/window.removeEventListener \"mouseup\" handle-mouse-up)\n                                 (js/window.removeEventListener \"resize\" handle-window-resize))\n       :display-name           \"devtools outer\"\n       :reagent-render         (fn []\n                                 (let [draggable-area 10\n                                       left           (if @showing? (str (* 100 (- 1 @panel-width%)) \"%\")\n                                                                    (str @window-width \"px\"))\n                                       transition     (if @dragging?\n                                                        \"\"\n                                                        ease-transition)]\n                                   [rc/box\n                                    :width  \"0px\"\n                                    :height \"0px\"\n                                    :style  {:position \"fixed\"\n                                             :top      \"0px\"\n                                             :left     \"0px\"\n                                             :z-index  99999999}\n                                    :child [rc/h-box\n                                            :width (str (* 100 @panel-width%) \"%\")\n                                            :height \"100%\"\n                                            :style {:position   \"fixed\"\n                                                    :z-index    1\n                                                    :box-shadow \"rgba(0, 0, 0, 0.3) 0px 0px 4px\"\n                                                    :background \"white\"\n                                                    :left       left\n                                                    :top        \"0px\"\n                                                    :transition transition}\n                                            :children [[:div.panel-resizer (when @showing? {:style         (resizer-style draggable-area)\n                                                                                            :on-mouse-down #(reset! dragging? true)})]\n                                                       [container/devtools-inner opts]]]]))})))\n\n\n\n\n\n\n(defn traced-result [trace-id fragment-id]\n  ;; TODO: this is not terribly efficient, figure out how to get the index of the trace directly.\n  (let [trace (first (filter #(= trace-id (:id %)) (get-in @day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db/app-db [:traces :all])))]\n    (get-in trace [:tags :code fragment-id :result])))\n\n(defn ^:export factory-reset! []\n  (rf/dispatch [::settings.events/factory-reset]))\n\n(defn ^:export show-panel! [show-panel?]\n  (rf/dispatch [::settings.events/show-panel? show-panel?]))\n\n;; --- NEW ---\n\n\n\n(defn inject!\n  []\n  (rf/clear-subscription-cache!)\n  (let [shadow-root (tools.shadow-dom/shadow-root js/document \"--re-frame-10x--\")\n        container   (spade.dom/create-container shadow-root)]\n\n    (rdom/render\n      [spade.react/with-style-container container\n       [devtools-outer\n        {:panel-type :inline\n         :debug?     debug?}]]\n      shadow-root)))\n\n(defn patch!\n  \"Sets up any initial state that needs to be there for tracing. Does not enable tracing.\"\n  []\n  (patch-custom-wrapper)\n  (patch-wrap-funs)\n  (patch-next-tick))\n\n(defn init!\n  []\n  (patch!)\n  (rf/dispatch-sync [::events/init {:debug? debug?}])\n  (inject!))"]}