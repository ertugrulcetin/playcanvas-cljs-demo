{
"version":3,
"file":"goog.storage.storage.js",
"lineCount":34,
"mappings":"AAWAA,IAAKC,CAAAA,OAAL,CAAa,sBAAb,CAAA;AAEAD,IAAKE,CAAAA,OAAL,CAAa,WAAb,CAAA;AACAF,IAAKE,CAAAA,OAAL,CAAa,wBAAb,CAAA;AACAF,IAAKG,CAAAA,WAAL,CAAiB,kCAAjB,CAAA;AAYAH,IAAKI,CAAAA,OAAQC,CAAAA,OAAb,GAAuBC,QAAQ,CAACC,SAAD,CAAY;AAOzC,MAAKA,CAAAA,SAAL,GAAiBA,SAAjB;AAPyC,CAA3C;AAiBAP,IAAKI,CAAAA,OAAQC,CAAAA,OAAQG,CAAAA,SAAUC,CAAAA,GAA/B,GAAqCC,QAAQ,CAACC,GAAD,EAAMC,KAAN,CAAa;AAExD,MAAIA,KAAJ,KAAcC,SAAd,CAAyB;AACvB,QAAKN,CAAAA,SAAUO,CAAAA,MAAf,CAAsBH,GAAtB,CAAA;AACA;AAFuB;AAIzB,MAAKJ,CAAAA,SAAUE,CAAAA,GAAf,CAAmBE,GAAnB,EAAwBX,IAAKe,CAAAA,IAAKC,CAAAA,SAAV,CAAoBJ,KAApB,CAAxB,CAAA;AANwD,CAA1D;AAgBAZ,IAAKI,CAAAA,OAAQC,CAAAA,OAAQG,CAAAA,SAAUS,CAAAA,GAA/B,GAAqCC,QAAQ,CAACP,GAAD,CAAM;AAEjD,MAAII,IAAJ;AACA,KAAI;AACFA,QAAA,GAAO,IAAKR,CAAAA,SAAUU,CAAAA,GAAf,CAAmBN,GAAnB,CAAP;AADE,GAEF,QAAOQ,CAAP,CAAU;AAKV,WAAON,SAAP;AALU;AAOZ,MAAIE,IAAJ,KAAa,IAAb;AACE,WAAOF,SAAP;AADF;AAIA,KAAI;AACF,WAAOO,IAAKC,CAAAA,KAAL,CAAWN,IAAX,CAAP;AADE,GAEF,QAAOI,CAAP,CAAU;AACV,UAAMnB,IAAKI,CAAAA,OAAQkB,CAAAA,SAAUC,CAAAA,aAA7B;AADU;AAlBqC,CAAnD;AA6BAvB,IAAKI,CAAAA,OAAQC,CAAAA,OAAQG,CAAAA,SAAUM,CAAAA,MAA/B,GAAwCU,QAAQ,CAACb,GAAD,CAAM;AAEpD,MAAKJ,CAAAA,SAAUO,CAAAA,MAAf,CAAsBH,GAAtB,CAAA;AAFoD,CAAtD;;",
"sources":["goog/storage/storage.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Provides a convenient API for data persistence using a selected\n * data storage mechanism.\n */\n\ngoog.provide('goog.storage.Storage');\n\ngoog.require('goog.json');\ngoog.require('goog.storage.ErrorCode');\ngoog.requireType('goog.storage.mechanism.Mechanism');\n\n\n\n/**\n * The base implementation for all storage APIs.\n *\n * @param {!goog.storage.mechanism.Mechanism} mechanism The underlying\n *     storage mechanism.\n * @constructor\n * @struct\n */\ngoog.storage.Storage = function(mechanism) {\n  'use strict';\n  /**\n   * The mechanism used to persist key-value pairs.\n   *\n   * @protected {goog.storage.mechanism.Mechanism}\n   */\n  this.mechanism = mechanism;\n};\n\n\n/**\n * Sets an item in the data storage.\n *\n * @param {string} key The key to set.\n * @param {*} value The value to serialize to a string and save.\n */\ngoog.storage.Storage.prototype.set = function(key, value) {\n  'use strict';\n  if (value === undefined) {\n    this.mechanism.remove(key);\n    return;\n  }\n  this.mechanism.set(key, goog.json.serialize(value));\n};\n\n\n/**\n * Gets an item from the data storage.\n *\n * @param {string} key The key to get.\n * @return {*} Deserialized value or undefined if not found.\n */\ngoog.storage.Storage.prototype.get = function(key) {\n  'use strict';\n  let json;\n  try {\n    json = this.mechanism.get(key);\n  } catch (e) {\n    // If, for any reason, the value returned by a mechanism's get method is not\n    // a string, an exception is thrown.  In this case, we must fail gracefully\n    // instead of propagating the exception to clients.  See b/8095488 for\n    // details.\n    return undefined;\n  }\n  if (json === null) {\n    return undefined;\n  }\n\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    throw goog.storage.ErrorCode.INVALID_VALUE;\n  }\n};\n\n\n/**\n * Removes an item from the data storage.\n *\n * @param {string} key The key to remove.\n */\ngoog.storage.Storage.prototype.remove = function(key) {\n  'use strict';\n  this.mechanism.remove(key);\n};\n"],
"names":["goog","provide","require","requireType","storage","Storage","goog.storage.Storage","mechanism","prototype","set","goog.storage.Storage.prototype.set","key","value","undefined","remove","json","serialize","get","goog.storage.Storage.prototype.get","e","JSON","parse","ErrorCode","INVALID_VALUE","goog.storage.Storage.prototype.remove"]
}
