{"version":3,"sources":["day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/trace.cljc"],"mappings":";AAUA,AAAKA,mEAAG,6CAAA,7CAACC;AACT,0FAAA,1FAAeC;AAEf,oFAAA,pFAAMC;AAAN,AACE,8FAAA,vFAACC,sBAAOJ;;AAED;;;qFAAA,AAAAK,YAAA,qFAAA,tLAAaC;AAGtB;;;wFAAA,xFAAeC;AAAf,AAOED;;AAEF,AAAKE,0EAAU,6CAAA,7CAACP;AAChB,GAAA,QAAAQ,iCAAAC,8CAAAC,2DAAAC,oEAAAC,2EAAAC,oFAAAC,0FAAAC;AAAA;AAAA,AAAA,AAASC,uEAAO,6CAAA,7CAAChB;;AACjB,GAAA,QAAAQ,iCAAAC,8CAAAC,2DAAAC,oEAAAC,2EAAAC,oFAAAC,0FAAAG;AAAA;AAAA,AAAA,AAASC,8EAAc,6CAAA,7CAAClB;;AAExB;;;;kFAAA,lFAAMmB,4KAGHC,IAAIC;AAHP,AAIE,GAAIhB;AACF,OAACiB,mDAAMf,wEAAUgB,gBAAMH,IAAIC;;AAC3B,oHAAA,uGAAA,pNAACG;;;AAEL,gFAAA,hFAAMC,wKAAiBL;AAAvB,AACE,AAACE,mDAAMf,wEAAUmB,iBAAON;;AAD1B;;AAIA,wEAAA,xEAAMO;AAAN,AAAiB,OAACL,mDAAMvB,iEAAG6B;;AAE3B,4EAAA,oFAAAC,hKAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;gBAAA,AAAAE,4CAAAF,eAAA,vEAA2BI;cAA3B,AAAAF,4CAAAF,eAAA,rEAAqCK;WAArC,AAAAH,4CAAAF,eAAA,lEAA6CM;eAA7C,AAAAJ,4CAAAF,eAAA,tEAAkDO;AAAlD,AAAA,kDAAA,0HAAA,0EAAA,oEAAA,0DAAA,hRACc,AAACV,wIACDO,sEACAC,6DACAC,kEACA,iBAAAE,mBAAID;AAAJ,AAAA,oBAAAC;AAAAA;;AAAa,OAAA,gFAAKrC;;KALhC,uDAMc,AAACsC;;AAcf,8EAAA,9EAAKC;AAEL,yEAAA,zEAAMC,0JAAUpB,EAAEqB;AAAlB,AACW,OAACC,wBAAwBtB,EAAEqB;;AAGtC,AAAKE,kFACH,AAACH,uEACC;AAAA,AACE,IAAAI,mBAAA,AAAAC,cAAA,AAAAC,gBAAgBxC;IAAhByC,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,IAAAE,mBAAA,AAAAH,wDAAAE;cAAA,AAAAE,4CAAAD,iBAAA,IAAA,3EAASW;eAAT,AAAAV,4CAAAD,iBAAA,IAAA,5EAAWY;AAAX,AAAA,AACE,IAAA,AAAK,IAAAG,iBAAA,AAAAnB,gBAAK/B;AAAL,AAAA,iFAAAkD,qCAAAA,rHAACH,yCAAAA,yDAAAA;gBAAN,cAAAC,VAG8BI;AAH9B,AAIgB,6GAAA,yGAAA,qCAAA,gBAAA,AAAArB,3QAACvB,mPAA4CsC,wCAAmB9C,sEAAOoD;;AALzF;AAAA,eAAAvB;eAAAG;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAG,2BAAA,AAAAP,cAAAD;AAAA,AAAA,GAAAQ;AAAA,AAAA,IAAAR,uBAAAQ;AAAA,AAAA,GAAA,AAAAC,6BAAAT;AAAA,IAAAU,wBAAA,AAAAC,sBAAAX;AAAA,AAAA,eAAA,AAAAY,qBAAAZ;eAAAU;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAI,mBAAA,AAAAC,gBAAAf;cAAA,AAAAO,4CAAAO,iBAAA,IAAA,3EAASG;eAAT,AAAAV,4CAAAO,iBAAA,IAAA,5EAAWI;AAAX,AAAA,AACE,IAAA,AAAK,IAAAI,iBAAA,AAAApB,gBAAK/B;AAAL,AAAA,iFAAAmD,qCAAAA,rHAACJ,yCAAAA,yDAAAA;gBAAN,cAAAE,VAG8BG;AAH9B,AAIgB,6GAAA,yGAAA,qCAAA,gBAAA,AAAArB,3QAACvB,mPAA4CsC,wCAAmB9C,sEAAOoD;;AALzF;AAAA,eAAA,AAAAP,eAAAhB;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAMA,kGAAA,3FAAC1C,sBAAOa;GACVwB;AAEJ,4FAAA,5FAAM6B,gMAAwBC;AAA9B,AAOE,GAAM,CAAG,CAAA,AAAAvB,+FAAA,/EAAI7B,uFAAkBoD;AAA/B,AACE,CAAC1B,gHAAAA,kHAAAA;;AAID,OAACzC,sBAAOe,4EAAc,CAAGoD,MAAI9B;;AAL/B;;;AAOF","names":["day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/id","cljs.core.atom","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/*current-trace*","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/reset-tracing!","cljs.core/reset!","js/goog.define","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/trace-enabled?","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/is-trace-enabled?","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/trace-cbs","js/day8","js/day8.re-frame-10x","js/day8.re-frame-10x.inlined-deps","js/day8.re-frame-10x.inlined-deps.re-frame","js/day8.re-frame-10x.inlined-deps.re-frame.v1v1v2","js/day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame","js/day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace","js/day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace.traces","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/traces","js/day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace.next-delivery","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/next-delivery","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/register-trace-cb","key","f","cljs.core.swap_BANG_","cljs.core/assoc","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.loggers.console","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/remove-trace-cb","cljs.core/dissoc","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/next-id","cljs.core/inc","p__16532","map__16533","cljs.core/--destructure-map","cljs.core.get","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/start-trace","operation","op-type","tags","child-of","or__5043__auto__","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop/now","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/debounce-time","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/debounce","interval","goog.functions/debounce","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/schedule-debounce","seq__16534","cljs.core/seq","cljs.core/deref","chunk__16535","count__16536","i__16537","vec__16550","cljs.core.nth","temp__5804__auto__","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__16555","cljs.core/first","cljs.core/next","k","cb","e16553","e16558","G__16554","G__16559","e","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/run-tracing-callbacks!","now"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace\n  \"Tracing for re-frame.\n  Alpha quality, subject to change/break at any time.\"\n  #?(:cljs (:require-macros [net.cgrand.macrovich :as macros]\n                            [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace :refer [finish-trace with-trace merge-trace!]]))\n  (:require [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop :as interop]\n            [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.loggers :refer [console]]\n            #?(:clj [net.cgrand.macrovich :as macros])\n            #?(:cljs [goog.functions])))\n\n(def id (atom 0))\n(def ^:dynamic *current-trace* nil)\n\n(defn reset-tracing! []\n  (reset! id 0))\n\n#?(:cljs (goog-define trace-enabled? false)\n   :clj  (def ^boolean trace-enabled? false))\n\n(defn ^boolean is-trace-enabled?\n  \"See https://groups.google.com/d/msg/clojurescript/jk43kmYiMhA/IHglVr_TPdgJ for more details\"\n  ;; We can remove this extra step of type hinting indirection once our minimum CLJS version includes\n  ;; https://dev.clojure.org/jira/browse/CLJS-1439\n  ;; r1.10.63 is the first version with this:\n  ;; https://github.com/clojure/clojurescript/commit/9ec796d791b1b2bd613af2f62cdecfd25caa6482\n  []\n  trace-enabled?)\n\n(def trace-cbs (atom {}))\n(defonce traces (atom []))\n(defonce next-delivery (atom 0))\n\n(defn register-trace-cb\n  \"Registers a tracing callback function which will receive a collection of one or more traces.\n  Will replace an existing callback function if it shares the same key.\"\n  [key f]\n  (if trace-enabled?\n    (swap! trace-cbs assoc key f)\n    (console :warn \"Tracing is not enabled. Please set {\\\"re_frame.trace.trace_enabled_QMARK_\\\" true} in :closure-defines. See: https://github.com/day8/re-frame-10x#installation.\")))\n\n(defn remove-trace-cb [key]\n  (swap! trace-cbs dissoc key)\n  nil)\n\n(defn next-id [] (swap! id inc))\n\n(defn start-trace [{:keys [operation op-type tags child-of]}]\n  {:id        (next-id)\n   :operation operation\n   :op-type   op-type\n   :tags      tags\n   :child-of  (or child-of (:id *current-trace*))\n   :start     (interop/now)})\n\n;; On debouncing\n;;\n;; We debounce delivering traces to registered cbs so that\n;; we can deliver them in batches. This aids us in efficiency\n;; but also importantly lets us avoid slowing down the host\n;; application by running any trace code in the critical path.\n;;\n;; We add a lightweight check on top of goog.functions/debounce\n;; to avoid constant setting and cancelling of timeouts. This\n;; means that we will deliver traces between 10-50 ms from the\n;; last trace being created, which still achieves our goals.\n\n(def debounce-time 50)\n\n(defn debounce [f interval]\n  #?(:cljs (goog.functions/debounce f interval)\n     :clj  (f)))\n\n(def schedule-debounce\n  (debounce\n    (fn tracing-cb-debounced []\n      (doseq [[k cb] @trace-cbs]\n        (try (cb @traces)\n             #?(:clj (catch Exception e\n                       (console :error \"Error thrown from trace cb\" k \"while storing\" @traces e)))\n             #?(:cljs (catch :default e\n                        (console :error \"Error thrown from trace cb\" k \"while storing\" @traces e)))))\n      (reset! traces []))\n    debounce-time))\n\n(defn run-tracing-callbacks! [now]\n  ;; Optimised debounce, we only re-debounce\n  ;; if we are close to delivery time\n  ;; to avoid constant setting and cancelling\n  ;; timeouts.\n\n  ;; If we are within 25 ms of next delivery\n  (when (< (- @next-delivery 25) now)\n    (schedule-debounce)\n    ;; The next-delivery time is not perfectly accurate\n    ;; as scheduling the debounce takes some time, but\n    ;; it's good enough for our purposes here.\n    (reset! next-delivery (+ now debounce-time))))\n\n(macros/deftime\n  (defmacro finish-trace [trace]\n     `(when (is-trace-enabled?)\n        (let [end#      (interop/now)\n              duration# (- end# (:start ~trace))]\n          (swap! traces conj (assoc ~trace\n                               :duration duration#\n                               :end (interop/now)))\n          (run-tracing-callbacks! end#))))\n\n (defmacro with-trace\n     \"Create a trace inside the scope of the with-trace macro\n\n          Common keys for trace-opts\n          :op-type - what kind of operation is this? e.g. :sub/create, :render.\n          :operation - identifier for the operation, for a subscription it would be the subscription keyword\n          :tags - a map of arbitrary kv pairs\"\n     [{:keys [operation op-type tags child-of] :as trace-opts} & body]\n     `(if (is-trace-enabled?)\n        (binding [*current-trace* (start-trace ~trace-opts)]\n          (try ~@body\n               (finally (finish-trace *current-trace*))))\n        (do ~@body)))\n\n  (defmacro merge-trace! [m]\n     ;; Overwrite keys in tags, and all top level keys.\n     `(when (is-trace-enabled?)\n        (let [new-trace# (-> (update *current-trace* :tags merge (:tags ~m))\n                             (merge (dissoc ~m :tags)))]\n          (set! *current-trace* new-trace#))\n        nil)))\n"]}