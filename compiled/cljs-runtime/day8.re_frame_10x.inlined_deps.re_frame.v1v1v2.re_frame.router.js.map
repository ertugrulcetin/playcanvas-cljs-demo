{"version":3,"sources":["day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/router.cljc"],"mappings":"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","names":["day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/later-fns","f","G__16688","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop/after-render","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop/next-tick","day8$re-frame-10x$inlined-deps$re-frame$v1v1v2$re-frame$router$IEventQueue$push$dyn","x__5390__auto__","m__5391__auto__","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/push","goog/typeOf","m__5389__auto__","cljs.core/missing-protocol","day8$re-frame-10x$inlined-deps$re-frame$v1v1v2$re-frame$router$IEventQueue$add_post_event_callback$dyn","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/add-post-event-callback","day8$re-frame-10x$inlined-deps$re-frame$v1v1v2$re-frame$router$IEventQueue$remove_post_event_callback$dyn","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/remove-post-event-callback","day8$re-frame-10x$inlined-deps$re-frame$v1v1v2$re-frame$router$IEventQueue$purge$dyn","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/purge","day8$re-frame-10x$inlined-deps$re-frame$v1v1v2$re-frame$router$IEventQueue$_fsm_trigger$dyn","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/-fsm-trigger","day8$re-frame-10x$inlined-deps$re-frame$v1v1v2$re-frame$router$IEventQueue$_add_event$dyn","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/-add-event","day8$re-frame-10x$inlined-deps$re-frame$v1v1v2$re-frame$router$IEventQueue$_process_1st_event_in_queue$dyn","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/-process-1st-event-in-queue","day8$re-frame-10x$inlined-deps$re-frame$v1v1v2$re-frame$router$IEventQueue$_run_next_tick$dyn","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/-run-next-tick","day8$re-frame-10x$inlined-deps$re-frame$v1v1v2$re-frame$router$IEventQueue$_run_queue$dyn","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/-run-queue","day8$re-frame-10x$inlined-deps$re-frame$v1v1v2$re-frame$router$IEventQueue$_exception$dyn","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/-exception","day8$re-frame-10x$inlined-deps$re-frame$v1v1v2$re-frame$router$IEventQueue$_pause$dyn","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/-pause","day8$re-frame-10x$inlined-deps$re-frame$v1v1v2$re-frame$router$IEventQueue$_resume$dyn","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/-resume","day8$re-frame-10x$inlined-deps$re-frame$v1v1v2$re-frame$router$IEventQueue$_call_post_event_callbacks$dyn","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/-call-post-event-callbacks","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/IEventQueue","this","event","id","callack","trigger","arg","ex","later-fn","cljs.core/PROTOCOL_SENTINEL","this__5327__auto__","writer__5328__auto__","opt__5329__auto__","cljs.core/-write","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/EventQueue","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/->EventQueue","fsm-state","queue","post-event-callback-fns","_","callback-fn","cljs.core/contains?","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.loggers.console","cljs.core.assoc","cljs.core.dissoc","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop/empty-queue","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__16790","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/*current-trace*","*current-trace*-temp-val__16791","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/start-trace","end__16508__auto__","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop/now","duration__16509__auto__","cljs.core.swap_BANG_","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/traces","cljs.core/conj","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/run-tracing-callbacks!","vec__16792","cljs.core.nth","vec__16800","new-fsm-state","action-fn","G__16795","cljs.core._EQ_","G__16803","cljs.core/empty?","cljs.core.ex_info","new-trace__16510__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.conj","event-v","cljs.core/peek","e16814","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.events/handle","cljs.core/pop","G__16786","n","cljs.core/count","temp__5802__auto__","cljs.core/some","cljs.core/meta","cljs.core/keys","G__16810","seq__16816","cljs.core/seq","chunk__16817","count__16818","i__16819","temp__5804__auto__","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","callback","cljs.core/vals","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/event-queue","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/dispatch","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/dispatch-sync"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router\n  (:require [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.events  :refer [handle]]\n            [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop :refer [after-render empty-queue next-tick]]\n            [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.loggers :refer [console]]\n            [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace   :as trace :include-macros true]))\n\n\n;; -- Router Loop ------------------------------------------------------------\n;;\n;; A call to \"re-frame.core/dispatch\" places an event on a queue for processing.\n;; A short time later, the handler registered to handle this event will be run.\n;; What follows is the implementation of this process.\n;;\n;; The task is to process queued events in a perpetual loop, one after\n;; the other, FIFO, calling the registered event-handler for each, being idle when\n;; there are no events, and firing up when one arrives.\n;;\n;; But browsers only have a single thread of control and we must be\n;; careful to not hog the CPU. When processing events one after another, we\n;; must regularly hand back control to the browser, so it can redraw, process\n;; websockets, etc. But not too regularly! If we are in a de-focused browser\n;; tab, our app will be CPU throttled. Each time we get back control, we have\n;; to process all queued events, or else something like a bursty websocket\n;; (producing events) might overwhelm the queue. So there's a balance.\n;;\n;; The processing/handling of an event happens \"asynchronously\" sometime after\n;; that event was enqueued via \"dispatch\". The original implementation of this router loop\n;; used `core.async`. As a result, it was fairly simple, and it mostly worked,\n;; but it did not give enough control. So now we hand-roll our own,\n;; finite-state-machine and all.\n;;\n;; In what follows, the strategy is this:\n;;   - maintain a FIFO queue of `dispatched` events.\n;;   - when a new event arrives, \"schedule\" processing of this queue using\n;;     goog.async.nextTick, which means it will happen \"very soon\".\n;;   - when processing events, one after the other, do ALL the currently\n;;     queued events. Don't stop. Don't yield to the browser. Hog that CPU.\n;;   - but if any new events are dispatched during this cycle of processing,\n;;     don't do them immediately. Leave them queued. Yield first to the browser,\n;;     and do these new events in the next processing cycle. That way we drain\n;;     the queue up to a point, but we never hog the CPU forever. In\n;;     particular, we handle the case where handling one event will beget\n;;     another event. The freshly begotten event will be handled next cycle,\n;;     with yielding in-between.\n;;   - In some cases, an event should not be handled until after the GUI has been\n;;     updated, i.e., after the next Reagent animation frame. In such a case,\n;;     the event should be dispatched with :flush-dom metadata like this:\n;;       (dispatch ^:flush-dom [:event-id other params])\n;;     Such an event will temporarily block all further processing because\n;;     events are processed sequentially: we handle one event completely\n;;     before we handle the ones behind it.\n;;\n;; Implementation notes:\n;;   - queue processing can be in a number of states: scheduled, running, paused\n;;     etc. So it is modeled as a Finite State Machine.\n;;     See \"-fsm-trigger\" (below) for the states and transitions.\n;;   - the scheduling is done via \"goog.async.nextTick\" which is pretty quick\n;;   - when the event has :flush-dom metadata we schedule via\n;;       \"reagent.core.after-render\"\n;;     which will run event processing after the next Reagent animation frame.\n;;\n\n;; Events can have metadata which says to pause event processing.\n;; event metadata -> \"run later\" functions\n(def later-fns\n  {:flush-dom (fn [f] (after-render #(next-tick f)))   ;; one tick after the end of the next animation frame\n   :yield     next-tick})               ;; almost immediately\n\n\n;; Event Queue Abstraction\n(defprotocol IEventQueue\n\n  ;; -- API\n  (push [this event])\n  (add-post-event-callback [this id callack])\n  (remove-post-event-callback [this f])\n  (purge [this])\n\n  ;; -- Implementation via a Finite State Machine\n  (-fsm-trigger [this trigger arg])\n\n  ;; -- Finite State Machine actions\n  (-add-event [this event])\n  (-process-1st-event-in-queue [this])\n  (-run-next-tick [this])\n  (-run-queue [this])\n  (-exception [this ex])\n  (-pause [this later-fn])\n  (-resume [this])\n  (-call-post-event-callbacks [this event]))\n\n\n;; Concrete implementation of IEventQueue\n(deftype EventQueue [#?(:cljs ^:mutable fsm-state               :clj ^:volatile-mutable fsm-state)\n                     #?(:cljs ^:mutable queue                   :clj ^:volatile-mutable queue)\n                     #?(:cljs ^:mutable post-event-callback-fns :clj ^:volatile-mutable post-event-callback-fns)]\n  IEventQueue\n\n  ;; -- API ------------------------------------------------------------------\n\n  (push [this event]         ;; presumably called by dispatch\n    (-fsm-trigger this :add-event event))\n\n  ;; register a callback function which will be called after each event is processed\n  (add-post-event-callback [_ id callback-fn]\n    (if (contains? post-event-callback-fns id)\n      (console :warn \"re-frame: overwriting existing post event call back with id:\" id))\n    (->> (assoc post-event-callback-fns id callback-fn)\n         (set! post-event-callback-fns)))\n\n  (remove-post-event-callback [_ id]\n    (if-not (contains? post-event-callback-fns id)\n      (console :warn \"re-frame: could not remove post event call back with id:\" id)\n      (->> (dissoc post-event-callback-fns id)\n           (set! post-event-callback-fns))))\n\n  (purge [_]\n    (set! queue empty-queue))\n\n  ;; -- FSM Implementation ---------------------------------------------------\n\n  (-fsm-trigger\n    [this trigger arg]\n\n    ;; The following \"case\" implements the Finite State Machine.\n    ;; Given a \"trigger\", and the existing FSM state, it computes the\n    ;; new FSM state and the transition action (function).\n\n    (locking this\n      (trace/with-trace {:op-type ::fsm-trigger}\n        (let [[new-fsm-state action-fn]\n              (case [fsm-state trigger]\n\n                ;; You should read the following \"case\" as:\n                ;; [current-FSM-state trigger] -> [new-FSM-state action-fn]\n                ;;\n                ;; So, for example, the next line should be interpreted as:\n                ;; if you are in state \":idle\" and a trigger \":add-event\"\n                ;; happens, then move the FSM to state \":scheduled\" and execute\n                ;; that two-part \"do\" function.\n                [:idle :add-event] [:scheduled #(do (-add-event this arg)\n                                                    (-run-next-tick this))]\n\n                ;; State: :scheduled  (the queue is scheduled to run, soon)\n                [:scheduled :add-event] [:scheduled #(-add-event this arg)]\n                [:scheduled :run-queue] [:running #(-run-queue this)]\n\n                ;; State: :running (the queue is being processed one event after another)\n                [:running :add-event] [:running #(-add-event this arg)]\n                [:running :pause] [:paused #(-pause this arg)]\n                [:running :exception] [:idle #(-exception this arg)]\n                [:running :finish-run] (if (empty? queue)     ;; FSM guard\n                                         [:idle]\n                                         [:scheduled #(-run-next-tick this)])\n\n                ;; State: :paused (:flush-dom metadata on an event has caused a temporary pause in processing)\n                [:paused :add-event] [:paused #(-add-event this arg)]\n                [:paused :resume] [:running #(-resume this)]\n\n                (throw (ex-info (str \"re-frame: router state transition not found. \" fsm-state \" \" trigger)\n                                {:fsm-state fsm-state, :trigger trigger})))]\n\n          ;; The \"case\" above computed both the new FSM state, and the action. Now, make it happen.\n\n          (trace/merge-trace! {:operation [fsm-state trigger]\n                               :tags      {:current-state fsm-state\n                                           :new-state     new-fsm-state}})\n          (set! fsm-state new-fsm-state)\n          (when action-fn (action-fn))))))\n\n  (-add-event\n    [_ event]\n    (set! queue (conj queue event)))\n\n  (-process-1st-event-in-queue\n    [this]\n    (let [event-v (peek queue)]\n      (try\n        (handle event-v)\n        (set! queue (pop queue))\n        (-call-post-event-callbacks this event-v)\n        (catch #?(:cljs :default :clj Exception) ex\n          (-fsm-trigger this :exception ex)))))\n\n  (-run-next-tick\n    [this]\n    (next-tick #(-fsm-trigger this :run-queue nil)))\n\n  ;; Process all the events currently in the queue, but not any new ones.\n  ;; Be aware that events might have metadata which will pause processing.\n  (-run-queue\n    [this]\n    (loop [n (count queue)]\n      (if (zero? n)\n        (-fsm-trigger this :finish-run nil)\n        (if-let [later-fn (some later-fns (-> queue peek meta keys))]  ;; any metadata which causes pausing?\n          (-fsm-trigger this :pause later-fn)\n          (do (-process-1st-event-in-queue this)\n              (recur (dec n)))))))\n\n  (-exception\n    [this ex]\n    (purge this)   ;; purge the queue\n    (throw ex))\n\n  (-pause\n    [this later-fn]\n    (later-fn #(-fsm-trigger this :resume nil)))\n\n  (-call-post-event-callbacks\n    [_ event-v]\n    (doseq [callback (vals post-event-callback-fns)]\n      (callback event-v queue)))\n\n  (-resume\n    [this]\n    (-process-1st-event-in-queue this)  ;; do the event which paused processing\n    (-run-queue this)))                 ;; do the rest of the queued events\n\n\n;; ---------------------------------------------------------------------------\n;; Event Queue\n;; When \"dispatch\" is called, the event is added into this event queue.  Later,\n;;  the queue will \"run\" and the event will be \"handled\" by the registered function.\n;;\n(def event-queue (->EventQueue :idle empty-queue {}))\n\n\n;; ---------------------------------------------------------------------------\n;; Dispatching\n;;\n\n(defn dispatch\n  [event]\n  (if (nil? event)\n      (throw (ex-info \"re-frame: you called \\\"dispatch\\\" without an event vector.\" {}))\n      (push event-queue event))\n  nil)                                           ;; Ensure nil return. See https://github.com/day8/re-frame/wiki/Beware-Returning-False\n\n(defn dispatch-sync\n  [event-v]\n  (handle event-v)\n  (-call-post-event-callbacks event-queue event-v)  ;; slightly ugly hack. Run the registered post event callbacks.\n  nil)                                              ;; Ensure nil return. See https://github.com/day8/re-frame/wiki/Beware-Returning-False\n"]}