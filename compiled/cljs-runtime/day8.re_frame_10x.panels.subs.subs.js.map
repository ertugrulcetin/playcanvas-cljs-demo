{"version":3,"sources":["day8/re_frame_10x/panels/subs/subs.cljs"],"mappings":"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","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_sub","p__21768","map__21769","cljs.core/--destructure-map","cljs.core.get","subs","_","traces","cljs.core.filter","day8.re-frame-10x.tools.metamorphic/subscription?","p__21775","map__21776","subscription-info","p__21777","map__21779","sub-state","p__21783","map__21784","day8.re-frame-10x.panels.subs.subs/sub-type->value","sub-type","G__21786","cljs.core/Keyword","day8.re-frame-10x.panels.subs.subs/accumulate-sub-value","order","exp","total","temp__5802__auto__","cljs.core/first","js/Math.pow","cljs.core/rest","day8.re-frame-10x.panels.subs.subs/accumulate-sub-value-memoized","cljs.core/memoize","day8.re-frame-10x.panels.subs.subs/sub-sort-val","order-x","order-y","cljs.core/compare","p__21791","p__21792","vec__21793","cljs.core.nth","vec__21796","day8.re-frame-10x.panels.subs.subs/prepare-pod-info","sub-info","subscription","remove-fn","cljs.core._EQ_","me","cljs.core/val","cljs.core/constantly","subx","cljs.core.remove","cljs.core.map","state","sub","cljs.core/key","cljs.core.get_in","cljs.core.pr_str","or__5043__auto__","cljs.core/contains?","cljs.core.assoc","cljs.core.sort_by","p__21803","map__21804","pre-epoch-state","p__21805","map__21806","reaction-state","p__21813","map__21814","filter-str","p__21815","vec__21816","all-subs","ignore-unchanged-l2?","pins","compare-fn","s1","s2","p1","cljs.core/boolean","p2","G__21819","cljs.core.sort","day8.re-frame-10x.tools.metamorphic/unchanged-l2-subscription?","cljs.core/not-empty","p__21820","map__21821","path","id","clojure.string/includes?","cljs.core.mapcat","cljs.core/frequencies","counts","cljs.core/count","p__21822","map__21823","expansions","p__21824","map__21825","pinned"],"sourcesContent":["(ns day8.re-frame-10x.panels.subs.subs\n  (:require\n    [clojure.string                                               :as string]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.navigation.epochs.subs                     :as epochs.subs]\n    [day8.re-frame-10x.panels.traces.subs                         :as traces.subs]\n    [day8.re-frame-10x.tools.metamorphic                          :as metam]))\n\n(rf/reg-sub\n  ::root\n  (fn [{:keys [subs]} _]\n    subs))\n\n(rf/reg-sub\n  ::all-sub-traces\n  :<- [::traces.subs/filtered-by-epoch-always]\n  (fn [traces]\n    (filter metam/subscription? traces)))\n\n(rf/reg-sub\n  ::subscription-info\n  :<- [::epochs.subs/root]\n  (fn [{:keys [subscription-info]} _]\n    subscription-info))\n\n(rf/reg-sub\n  ::sub-state\n  :<- [::epochs.subs/root]\n  (fn [{:keys [sub-state]} _]\n    sub-state))\n\n(rf/reg-sub\n  ::current-epoch-sub-state\n  :<- [::epochs.subs/selected-match-state]\n  (fn [{:keys [sub-state]} _]\n    sub-state))\n\n(defn sub-type->value\n  [sub-type]\n  (case sub-type\n    :sub/create  5\n    :sub/run     4\n    :sub/dispose 3\n    :sub/not-run 2\n                 1))\n\n(defn accumulate-sub-value\n  \"Calculate a sorting value for a series of subscription trace types.\"\n  ;; A reader might reasonably ask, \"Why are we going to all this work here?\"\n  ;; We calculate a custom value rather than just comparing two order vectors,\n  ;; because the default compare logic for comparing vectors is to sort shorter\n  ;; vectors above longer ones, whereas we want all CRR, CR, C orders to be\n  ;; sorted adjacent to each other, in that order.\n  ;;\n  ;; The first sub type in the order is worth (n * 10^3),\n  ;; then the next one (if it exists), is worth (n * 10^2), and so-on.\n  [order]\n  (loop [exp   3\n         total 0\n         order order]\n    (if-let [sub-type (first order)]\n      (recur (dec exp)\n             (+ total (* (sub-type->value sub-type) (js/Math.pow 10 exp)))\n             (rest order))\n      total)))\n\n(def accumulate-sub-value-memoized\n  (memoize accumulate-sub-value))\n\n(defn sub-sort-val [order-x order-y]\n  ;; Note x and y are reversed here so that the \"highest\" sub orders get sorted first.\n  (compare (accumulate-sub-value-memoized order-y)\n           (accumulate-sub-value-memoized order-x)))\n\n(defn prepare-pod-info\n  \"Returns sub info prepared for rendering in pods\"\n  [[sub-info sub-state] [subscription]]\n  (let [remove-fn (if (= subscription ::intra-epoch-subs)\n                    (fn [me] (nil? (:order (val me))))\n                    (constantly false))\n        subx      (->> sub-state\n                       (remove remove-fn)\n                       (map (fn [me] (let [state        (val me)\n                                           subscription (:subscription state)\n                                           sub          {:id         (key me)\n                                                         :reagent-id (key me)\n                                                         :layer      (get-in sub-info [(first subscription) :layer])\n                                                         :path-data  subscription\n                                                         :path       (pr-str subscription)\n                                                         :order      (or (:order state) [:sub/not-run])\n                                                         :sub/traits (:sub/traits state)}\n                                           sub          (if (contains? state :value)\n                                                          (assoc sub :value (:value state))\n                                                          sub)\n                                           sub          (if (contains? state :previous-value)\n                                                          (assoc sub :previous-value (:previous-value state))\n                                                          sub)]\n                                       sub)))\n                       (sort-by :order sub-sort-val)        ;; Also sort by subscription-id\n                       #_(sort-by :path))]\n    subx))\n\n(rf/reg-sub\n  ::pre-epoch-state\n  :<- [::current-epoch-sub-state]\n  (fn [{:keys [pre-epoch-state]} _]\n    pre-epoch-state))\n\n(rf/reg-sub\n  ::reaction-state\n  :<- [::current-epoch-sub-state]\n  (fn [{:keys [reaction-state]} _]\n    reaction-state))\n\n(rf/reg-sub\n  ::intra-epoch-subs\n  :<- [::subscription-info]\n  :<- [::pre-epoch-state]\n  prepare-pod-info)\n\n(rf/reg-sub\n  ::all-subs\n  :<- [::subscription-info]\n  :<- [::reaction-state]\n  prepare-pod-info)\n\n(rf/reg-sub\n  ::filter-str\n  :<- [::root]\n  (fn [{:keys [filter-str]} _]\n    filter-str))\n\n(rf/reg-sub\n  ::visible-subs\n  :<- [::all-subs]\n  :<- [::ignore-unchanged-l2-subs?]\n  :<- [::filter-str]\n  :<- [::sub-pins]\n  (fn [[all-subs ignore-unchanged-l2? filter-str pins]]\n    (let [compare-fn (fn [s1 s2]\n                       (let [p1 (boolean (get-in pins [(:id s1) :pin?]))\n                             p2 (boolean (get-in pins [(:id s2) :pin?]))]\n                         (if (= p1 p2)\n                           (compare (:path s1) (:path s2))\n                           p1)))]\n      (cond->> (sort compare-fn all-subs)\n               ignore-unchanged-l2? (remove metam/unchanged-l2-subscription?)\n               (not-empty filter-str) (filter (fn [{:keys [path id]}]\n                                                (or (string/includes? path filter-str)\n                                                    (get-in pins [id :pin?]))))))))\n\n(rf/reg-sub\n  ::sub-counts\n  :<- [::visible-subs]\n  (fn [subs _]\n    (->> subs\n         (mapcat :order)\n         (frequencies))))\n\n(rf/reg-sub\n  ::created-count\n  :<- [::sub-counts]\n  (fn [counts]\n    (get counts :sub/create 0)))\n\n(rf/reg-sub\n  ::re-run-count\n  :<- [::sub-counts]\n  (fn [counts]\n    (get counts :sub/run 0)))\n\n(rf/reg-sub\n  ::destroyed-count\n  :<- [::sub-counts]\n  (fn [counts]\n    (get counts :sub/dispose 0)))\n\n(rf/reg-sub\n  ::not-run-count\n  :<- [::sub-counts]\n  (fn [counts]\n    (get counts :sub/not-run 0)))\n\n(rf/reg-sub\n  ::unchanged-l2-subs-count\n  :<- [::all-subs]\n  (fn [subs]\n    (count (filter metam/unchanged-l2-subscription? subs))))\n\n(rf/reg-sub\n  ::ignore-unchanged-l2-subs?\n  :<- [::root]\n  (fn [subs _]\n    (:ignore-unchanged-subs? subs true)))\n\n(rf/reg-sub\n  ::sub-expansions\n  :<- [::root]\n  (fn [{:keys [expansions]} _]\n    expansions))\n\n(rf/reg-sub\n  ::sub-pins\n  :<- [::root]\n  (fn [{:keys [pinned]} _]\n    pinned))\n"]}