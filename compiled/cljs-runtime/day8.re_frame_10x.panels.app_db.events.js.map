{"version":3,"sources":["day8/re_frame_10x/panels/app_db/events.cljs"],"mappings":"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","names":["day8.re-frame-10x.panels.app-db.events/paths-interceptors","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.path","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/trim-v","day8.re_frame_10x.fx.local_storage.save","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_db","p__21267","vec__21269","cljs.core.nth","paths","open-new-inspectors?","cljs.core.assoc","js/Date.now","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_event_fx","p__21283","p__21284","map__21287","cljs.core/--destructure-map","cljs.core.get","vec__21288","db","skip-to-path","path-id","p__21294","vec__21295","path-str","path","day8.re-frame-10x.tools.reader.edn/read-string-maybe","cljs.core/assoc-in","cljs.core/sequential?","clojure.string/blank?","p__21308","vec__21310","map__21314","valid-path?","cljs.core.pr_str","p__21316","vec__21317","open?","p__21323","vec__21328","diff?","cljs.core.get_in","p__21334","vec__21335","cljs.core.dissoc","p__21339","vec__21341","_","p__21347","vec__21348","search-string","p__21358","vec__21364","p__21368","vec__21369","cljs.core/contains?","cljs.core.disj","cljs.core.conj","re-frame.interop/reagent-id","re-frame.db/app-db","p__21377","vec__21378","sort","p__21384","vec__21385","data-path-annotations?","p__21393","vec__21394","expand?"],"sourcesContent":["(ns day8.re-frame-10x.panels.app-db.events\n  (:require\n    [re-frame.db]\n    [re-frame.interop]\n    [clojure.string                                               :as string]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.fx.local-storage                           :as local-storage]\n    [day8.re-frame-10x.tools.reader.edn                           :as reader.edn]))\n\n(def paths-interceptors\n  [(rf/path [:app-db :paths])\n   rf/trim-v\n   (local-storage/save \"app-db-paths\")])\n\n;; The core idea with :app-db/update-path and :app-db/update-path-blur\n;; is that we need to separate the users text input (`path-str`) with the\n;; parsing of that string (`path`). We let the user type any string that\n;; they like, and check it for validity on each change. If it is valid\n;; then we update `path` and mark the pod as valid. If it isn't valid then\n;; we don't update `path` and mark the pod as invalid.\n;;\n;; On blur of the input, we reset path-str to the last valid path, if\n;; the pod isn't currently valid.\n\n(rf/reg-event-db\n  ::create-path\n  paths-interceptors\n  (fn [paths [open-new-inspectors?]]\n    (assoc paths\n      (js/Date.now)\n      {:diff?       false\n       :open?       open-new-inspectors?\n       :path        nil\n       :path-str    \"\"\n       :valid-path? true})))\n\n(rf/reg-event-fx\n  ::create-path-and-skip-to\n  paths-interceptors\n  (fn [{:keys [db]} [skip-to-path open-new-inspectors?]]\n    (let [path-id (js/Date.now)]\n      {:db       (assoc db\n                   path-id\n                   {:diff?       false\n                    :open?       open-new-inspectors?\n                    :path        nil\n                    :path-str    \"\"\n                    :valid-path? true})\n       :dispatch [::update-path path-id skip-to-path]})))\n\n(rf/reg-event-db\n  ::update-path\n  paths-interceptors\n  (fn [paths [path-id path-str]]\n    (let [path  (reader.edn/read-string-maybe path-str)\n          paths (assoc-in paths [path-id :path-str] path-str)]\n      (if (or (and (some? path)\n                   (sequential? path))\n              (string/blank? path-str))\n        (-> paths\n            (assoc-in [path-id :path] path)\n            (assoc-in [path-id :valid-path?] true))\n        (assoc-in paths [path-id :valid-path?] false)))))\n\n\n(rf/reg-event-db\n  ::update-path-blur\n  paths-interceptors\n  (fn [paths [path-id]]\n    (let [{:keys [valid-path? path]} (get paths path-id)]\n      (if valid-path?\n        paths\n        (-> (assoc-in paths [path-id :path-str] (pr-str path))\n            (assoc-in [path-id :valid-path?] true))))))\n\n(rf/reg-event-db\n  ::set-path-visibility\n  paths-interceptors\n  (fn [paths [path-id open?]]\n    (assoc-in paths [path-id :open?] open?)))\n\n(rf/reg-event-db\n  ::set-diff-visibility\n  paths-interceptors\n  (fn [paths [path-id diff?]]\n    (let [open? (if diff?\n                  true\n                  (get-in paths [path-id :open?]))]\n      (-> paths\n          (assoc-in [path-id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n          (assoc-in [path-id :open?] open?)))))\n\n(rf/reg-event-db\n  ::remove-path\n  paths-interceptors\n  (fn [paths [path-id]]\n    (dissoc paths path-id)))\n\n(rf/reg-event-db\n  ::paths\n  paths-interceptors\n  (fn [_ [paths]]\n    paths))\n\n;; [IJ] TODO: This doesn't appear to be used anywhere:\n(rf/reg-event-db\n  ::set-search-string\n  [(rf/path [:app-db :search-string]) rf/trim-v]\n  (fn [_ [search-string]]\n    search-string))\n\n(rf/reg-event-db\n  ::set-json-ml-paths\n  [(rf/path [:app-db :json-ml-expansions]) rf/trim-v (local-storage/save \"app-db-json-ml-expansions\")]\n  (fn [_ [paths]]\n    paths))\n\n(rf/reg-event-db\n  ::toggle-expansion\n  [(rf/path [:app-db :json-ml-expansions]) rf/trim-v (local-storage/save \"app-db-json-ml-expansions\")]\n  (fn [paths [path]]\n    (if (contains? paths path)\n      (disj paths path)\n      (conj paths path))))\n\n(rf/reg-event-db\n  ::reagent-id\n  [(rf/path [:app-db :reagent-id])]\n  (fn [_ _]\n    (re-frame.interop/reagent-id re-frame.db/app-db)))\n\n(rf/reg-event-db\n  ::set-sort-form?\n  paths-interceptors\n  (fn [paths [path-id sort]]\n    (-> paths\n        (assoc-in [path-id :sort?] sort))))\n\n(rf/reg-event-db\n  ::set-data-path-annotations?\n  [(rf/path [:app-db :data-path-annotations?]) rf/trim-v (local-storage/save \"data-path-annotations?\")]\n  (fn [_ [data-path-annotations?]]\n    data-path-annotations?))\n\n(rf/reg-event-db\n  ::set-expand-all?\n  [(rf/path [:app-db :expand-all?]) rf/trim-v]\n  (fn [db [path-id expand?]]\n    (assoc db path-id expand?)))\n"]}