{"version":3,"sources":["day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/cofx.cljc"],"mappings":";AAUA,oEAAA,pEAAKA;AACL,oBAAQ,CAACE,wGAAAA,2KAAAA,rEAAwEF,uJAAAA;AAAjF;AAAA,AAAA,MAAA,KAAAC,MAAA;;AAEA,wEAAA,xEAAME,wJACHC,GAAGC;AADN,AAEE,OAACC,mFAAiBN,kEAAKI,GAAGC;;AAK5B,AAAA,2EAAA,mFAAAE,9JAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uGAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uGAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAR,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yGAAA,zGAAMQ,oHACFL;AADJ,AAEG,mLAAA,kDAAA,8DAAA,5RAACM,sVAEU,wFACGC;AADH,AAEE,IAAAC,qBAAiB,AAACC,4GAAYb,kEAAKI;AAAnC,AAAA,oBAAAQ;AAAA,cAAAA,VAASP;AAAT,AACE,8DAAA,vDAACS,+CAAOH,sEAAmBN;;AAC3B,oHAAA,yGAAA,tNAACU,uPAAgDX;;;;;AARnE,CAAA,yGAAA,zGAAMK,oHASFL,GAAGY;AATP,AAUG,mLAAA,kDAAA,8DAAA,5RAACN,sVAEU,wFACGC;AADH,AAEE,IAAAC,qBAAiB,AAACC,4GAAYb,kEAAKI;AAAnC,AAAA,oBAAAQ;AAAA,cAAAA,VAASP;AAAT,AACE,8DAAA,vDAACS,+CAAOH,sEAAmBN,QAAQW;;AACnC,oHAAA,yGAAA,tNAACD,uPAAgDX;;;;;AAhBnE,CAAA,mGAAA,nGAAMK;;AAAN,AAwBA,sEAAA,tEAACN,sHAEC,4FACGc;AADH,AAEE,+DAAA,gDAAA,AAAAC,xGAACC,8CAAMF,0EAAeG;;AAI1B,AAAKC,yEAAU,uGAAA,vGAACC","names":["day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx/kind","js/Error","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar/kinds","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx/reg-cofx","id","handler","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar/register-handler","var_args","G__16651","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx/inject-cofx","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.__GT_interceptor","context","temp__5802__auto__","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.registrar.get_handler","cljs.core.update","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.loggers.console","value","coeffects","cljs.core/deref","cljs.core.assoc","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db/app-db","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx/inject-db","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.cofx.inject_cofx"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.cofx\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db           :refer [app-db]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor  :refer [->interceptor]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar    :refer [get-handler register-handler]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.loggers      :refer [console]]))\n\n\n;; -- Registration ------------------------------------------------------------\n\n(def kind :cofx)\n(assert (day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar/kinds kind))\n\n(defn reg-cofx\n  [id handler]\n  (register-handler kind id handler))\n\n\n;; -- Interceptor -------------------------------------------------------------\n\n(defn inject-cofx\n  ([id]\n   (->interceptor\n     :id      :coeffects\n     :before  (fn coeffects-before\n                [context]\n                (if-let [handler (get-handler kind id)]\n                  (update context :coeffects handler)\n                  (console :error \"No cofx handler registered for\" id)))))\n  ([id value]\n   (->interceptor\n     :id     :coeffects\n     :before  (fn coeffects-before\n                [context]\n                (if-let [handler (get-handler kind id)]\n                  (update context :coeffects handler value)\n                  (console :error \"No cofx handler registered for\" id))))))\n\n\n;; -- Builtin CoEffects Handlers  ---------------------------------------------\n\n;; :db\n;;\n;; Adds to coeffects the value in `app-db`, under the key `:db`\n(reg-cofx\n  :db\n  (fn db-coeffects-handler\n    [coeffects]\n    (assoc coeffects :db @app-db)))\n\n\n;; Because this interceptor is used so much, we reify it\n(def inject-db (inject-cofx :db))\n\n\n"]}