{"version":3,"sources":["day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/fx.cljc"],"mappings":"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","names":["day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.fx/kind","js/Error","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar/kinds","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.fx/reg-fx","id","handler","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar/register-handler","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.fx/do-fx","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.interceptor.__GT_interceptor","context","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__16831","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/*current-trace*","*current-trace*-temp-val__16832","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/start-trace","end__16508__auto__","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop/now","duration__16509__auto__","cljs.core.swap_BANG_","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/run-tracing-callbacks!","effects","effects-without-db","cljs.core.dissoc","temp__5804__auto__","new-db","fexpr__16835","fexpr__16859","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.registrar.get_handler","seq__16836","cljs.core/seq","chunk__16837","count__16838","i__16839","vec__16852","cljs.core.nth","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__16856","cljs.core/first","cljs.core/next","seq__16863","chunk__16864","count__16865","i__16866","vec__16874","vec__16889","effect-key","effect-value","temp__5802__auto__","effect-fn","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.loggers.console","p__16892","map__16893","cljs.core/--destructure-map","cljs.core.get","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.fx/dispatch-later","ms","dispatch","effect","cljs.core/empty?","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop/set-timeout!","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router/dispatch","value","cljs.core/map?","seq__16899","chunk__16900","count__16901","i__16902","cljs.core.remove","cljs.core/nil?","seq-of-effects","cljs.core/sequential?","cljs.core/type","seq__16908","chunk__16909","count__16910","i__16911","vec__16918","vec__16921","cljs.core._EQ_","cljs.core/vector?","seq__16928","chunk__16929","count__16930","i__16931","event","clear-event","cljs.core.partial","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar/clear-handlers","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.events/kind","seq__16932","chunk__16933","count__16934","i__16935","cljs.core/deref","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db/app-db","cljs.core/reset!"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.fx\n  (:require\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.router      :as router]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db          :refer [app-db]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor :refer [->interceptor]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop     :refer [set-timeout!]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.events      :as events]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar   :refer [get-handler clear-handlers register-handler]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.loggers     :refer [console]]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace :as trace :include-macros true]))\n\n\n;; -- Registration ------------------------------------------------------------\n\n(def kind :fx)\n(assert (day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar/kinds kind))\n\n(defn reg-fx\n  [id handler]\n  (register-handler kind id handler))\n\n;; -- Interceptor -------------------------------------------------------------\n\n(def do-fx\n  \"An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \\\"set flag\\\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed, other than that\n  `:db` is guaranteed to be executed first.\"\n  (->interceptor\n    :id :do-fx\n    :after (fn do-fx-after\n             [context]\n             (trace/with-trace\n               {:op-type :event/do-fx}\n               (let [effects            (:effects context)\n                     effects-without-db (dissoc effects :db)]\n                 ;; :db effect is guaranteed to be handled before all other effects.\n                 (when-let [new-db (:db effects)]\n                   ((get-handler kind :db false) new-db))\n                 (doseq [[effect-key effect-value] effects-without-db]\n                   (if-let [effect-fn (get-handler kind effect-key false)]\n                     (effect-fn effect-value)\n                     (console :warn \"re-frame: no handler registered for effect:\" effect-key \". Ignoring.\"))))))))\n\n;; -- Builtin Effect Handlers  ------------------------------------------------\n\n;; :dispatch-later\n;;\n;; `dispatch` one or more events after given delays. Expects a collection\n;; of maps with two keys:  :`ms` and `:dispatch`\n;;\n;; usage:\n;;\n;;    {:dispatch-later [{:ms 200 :dispatch [:event-id \"param\"]}    ;;  in 200ms do this: (dispatch [:event-id \"param\"])\n;;                      {:ms 100 :dispatch [:also :this :in :100ms]}]}\n;;\n;; Note: nil entries in the collection are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-later [ (when (> 3 5) {:ms 200 :dispatch [:conditioned-out]})\n;;                       {:ms 100 :dispatch [:another-one]}]}\n;;\n(defn dispatch-later\n  [{:keys [ms dispatch] :as effect}]\n  (if (or (empty? dispatch) (not (number? ms)))\n    (console :error \"re-frame: ignoring bad :dispatch-later value:\" effect)\n    (set-timeout! #(router/dispatch dispatch) ms)))\n\n(reg-fx\n  :dispatch-later\n  (fn [value]\n    (if (map? value)\n      (dispatch-later value)\n      (doseq [effect (remove nil? value)]\n        (dispatch-later effect)))))\n\n;; :fx\n;;\n;; Handle one or more effects. Expects a collection of vectors (tuples) of the\n;; form [effect-key effect-value]. `nil` entries in the collection are ignored\n;; so effects can be added conditionally.\n;;\n;; usage:\n;;\n;; {:fx [[:dispatch [:event-id \"param\"]]\n;;       nil\n;;       [:http-xhrio {:method :post\n;;                     ...}]]}\n;;\n\n(reg-fx\n  :fx\n  (fn [seq-of-effects]\n    (if-not (sequential? seq-of-effects)\n      (console :error \"re-frame: \\\":fx\\\" effect expects a seq, but was given \" (type seq-of-effects))\n      (doseq [[effect-key effect-value] (remove nil? seq-of-effects)]\n        (when (= :db effect-key)\n          (console :warn \"re-frame: \\\":fx\\\" effect should not contain a :db effect\"))\n        (if-let [effect-fn (get-handler kind effect-key false)]\n          (effect-fn effect-value)\n          (console :warn \"re-frame: in \\\":fx\\\" effect found \" effect-key \" which has no associated handler. Ignoring.\"))))))\n\n;; :dispatch\n;;\n;; `dispatch` one event. Expects a single vector.\n;;\n;; usage:\n;;   {:dispatch [:event-id \"param\"] }\n\n(reg-fx\n  :dispatch\n  (fn [value]\n    (if-not (vector? value)\n      (console :error \"re-frame: ignoring bad :dispatch value. Expected a vector, but got:\" value)\n      (router/dispatch value))))\n\n\n;; :dispatch-n\n;;\n;; `dispatch` more than one event. Expects a list or vector of events. Something for which\n;; sequential? returns true.\n;;\n;; usage:\n;;   {:dispatch-n (list [:do :all] [:three :of] [:these])}\n;;\n;; Note: nil events are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-n (list (when (> 3 5) [:conditioned-out])\n;;                       [:another-one])}\n;;\n(reg-fx\n  :dispatch-n\n  (fn [value]\n    (if-not (sequential? value)\n      (console :error \"re-frame: ignoring bad :dispatch-n value. Expected a collection, but got:\" value)\n      (doseq [event (remove nil? value)] (router/dispatch event)))))\n\n\n;; :deregister-event-handler\n;;\n;; removes a previously registered event handler. Expects either a single id (\n;; typically a namespaced keyword), or a seq of ids.\n;;\n;; usage:\n;;   {:deregister-event-handler :my-id)}\n;; or:\n;;   {:deregister-event-handler [:one-id :another-id]}\n;;\n(reg-fx\n  :deregister-event-handler\n  (fn [value]\n    (let [clear-event (partial clear-handlers events/kind)]\n      (if (sequential? value)\n        (doseq [event value] (clear-event event))\n        (clear-event value)))))\n\n\n;; :db\n;;\n;; reset! app-db with a new value. `value` is expected to be a map.\n;;\n;; usage:\n;;   {:db  {:key1 value1 key2 value2}}\n;;\n(reg-fx\n  :db\n  (fn [value]\n    (if-not (identical? @app-db value)\n      (reset! app-db value))))\n\n"]}