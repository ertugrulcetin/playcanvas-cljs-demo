{"version":3,"sources":["day8/re_frame_10x/tools/coll.cljs"],"mappings":";AAEA;;;2CAAA,3CAAMA,8FAEHC;AAFH,AAGE,IAAMC,MAAI,AAACC,gBAAMF;AAAjB,AACE,GAAI,SAAA,RAAOC;AAAX;;AAEE,OAACE,4CAAIH,EAAE,OAAA,NAAKC;;;AAElB;;;uDAAA,vDAAMG,sHAEHC,KAAKL;AAFR,AAGE,4DAAA,WAAAM,iBAAAC,jFAACC;AAAD,AAAe,oBAAM,yEAAAD,mCAAAA,3GAACF,qCAAAA,uDAAAA;AAAP,AAAAC;;AAAA;;GAAoBN;;AAErC;;;iDAAA,jDAAMS,0GAEHJ,KAAKL;AAFR,AAGE,OAACU,gBAAM,AAACN,qDAAwBC,KAAKL;;AAEvC;;;6CAAA,7CAAMW,kGAEHC,UAAUC;AAFb,AAGE,sDAAA,WAAAC,1DAACC;AAAD,AAAS,SAAA,sHAAA,rHAAIH,aAAU,AAAA,gFAAAE,yBAAA,AAAA,gFAAAA,qBAAQD;;;AAEjC;;;;;yCAAA,mDAAAG,5FAAMM,0FAIHC;AAJH,AAAA,IAAAN,aAAAD;IAAAE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAV,gBAAAQ;IAAAA,iBAAA,AAAAG,eAAAH;QAAAE,JAIMI;SAJNN,LAIUO;AAJV,AAKE,GAAIA;AACF,IAAAC,qBAAiB,AAACE,4CAAiBL,EAAEC;AAArC,AAAA,oBAAAE;AAAA,cAAAA,VAASC;AAAT,AACE,IAAME,SAAO,CAACP,uEAAAA,mFAAAA,dAAUK,+DAAAA,vDAAQF,+DAAAA;AAAhC,AACE,GAAI,AAACN,cAAIU;AACP,OAACC,8CAAMP,EAAEC,EAAEK;;AACX,OAACE,+CAAOR,EAAEC;;;AACdD;;;AACF,OAACQ,+CAAOR,EAAEC;;;AAEd;;;0DAAA,1DAAMQ,4HAEHT,EAAEE;AAFL,AAGE,OAACQ,+CACC,WAAKC,IAAIV;AAAT,AACE,GACE,EAAI,AAACW,sBAAMD,UAAK,gBAAWE,fAAkBF;AAC7C,OAAC/B,4CAAI+B,IAAIV;;AAFX,GAGE,AAACa,qBAAKH;AACN,GAAI,OAASV;AACX,OAACrB,4CAAI,AAACmC,cAAIJ,KAAKV;;AACf,OAACI,4CAAIM,IAAIV;;;AANb,GAOE,AAACe,qBAAKL;AACN,OAACN,4CAAIM,IAAIV;;AARX,AAUE,OAACI,4CAAIM,IAAIV;;;;;GACbD,EACAE","names":["day8.re-frame-10x.tools.coll/last-in-vec","v","num","cljs.core/count","cljs.core.nth","day8.re-frame-10x.tools.coll/find-all-indexes-in-vec","pred","p1__20323#","p2__20322#","cljs.core.keep_indexed","day8.re-frame-10x.tools.coll/find-index-in-vec","cljs.core/first","day8.re-frame-10x.tools.coll/id-between-xf","beginning","ending","p1__20327#","cljs.core.filter","p__20331","vec__20332","seq__20333","cljs.core/seq","first__20334","cljs.core/next","day8.re-frame-10x.tools.coll/dissoc-in","m","k","ks","temp__5802__auto__","nextmap","cljs.core.get","newmap","cljs.core.assoc","cljs.core.dissoc","day8.re-frame-10x.tools.coll/get-in-with-lists-and-sets","cljs.core.reduce","ret","cljs.core/list?","cljs.core/LazySeq","cljs.core/set?","cljs.core/vec","cljs.core/map?"],"sourcesContent":["(ns day8.re-frame-10x.tools.coll)\n\n(defn last-in-vec\n  \"Get the last element in the vector. Returns nil if v is empty\"\n  [v]\n  (let [num (count v)]\n    (if (zero? num)\n      nil\n      (nth v (dec num)))))\n\n(defn find-all-indexes-in-vec\n  \"Gets the index of all items in vec that match the predicate\"\n  [pred v]\n  (keep-indexed #(when (pred %2) %1) v))\n\n(defn find-index-in-vec\n  \"Gets the index of the first item in vec that matches the predicate\"\n  [pred v]\n  (first (find-all-indexes-in-vec pred v)))\n\n(defn id-between-xf\n  \"Returns a transducer that filters for :id between beginning and ending.\"\n  [beginning ending]\n  (filter #(<= beginning (:id %) ending)))\n\n(defn dissoc-in\n  \"Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\"\n  [m [k & ks]]\n  (if ks\n    (if-let [nextmap (clojure.core/get m k)]\n      (let [newmap (dissoc-in nextmap ks)]\n        (if (seq newmap)\n          (assoc m k newmap)\n          (dissoc m k)))\n      m)\n    (dissoc m k)))\n\n(defn get-in-with-lists-and-sets\n  \"cljs.core/get-in with support for index access of lists and sets\"\n  [m ks]\n  (reduce\n    (fn [ret k]\n      (cond\n        (or (list? ret) (instance? cljs.core/LazySeq ret))\n        (nth ret k)\n        (set? ret)\n        (if (number? k)\n          (nth (vec ret) k)\n          (get ret k))\n        (map? ret)\n        (get ret k)\n        :else\n        (get ret k)))\n    m\n    ks))"]}