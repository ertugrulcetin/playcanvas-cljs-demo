{"version":3,"sources":["day8/re_frame_10x/tools/pretty_print_condensed.cljs"],"mappings":"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","names":["day8$re-frame-10x$tools$pretty-print-condensed$ILimited$_limited_QMARK_$dyn","x__5390__auto__","m__5391__auto__","day8.re-frame-10x.tools.pretty-print-condensed/-limited?","goog/typeOf","m__5389__auto__","cljs.core/missing-protocol","day8.re-frame-10x.tools.pretty-print-condensed/ILimited","x","var_args","G__24321","day8.re-frame-10x.tools.pretty-print-condensed/truncate-string","js/Error","n","string","day8.re_frame_10x.tools.pretty_print_condensed.truncate_string","cut-from","c","cljs.core/count","G__24322","cljs.core/Keyword","cljs.core.subs","G__24323","content-budget","per-side-budget","js/Math.floor","G__24326","cljs.core/even?","G__24328","day8.re-frame-10x.tools.pretty-print-condensed/truncate-segments","s","limit","day8.re_frame_10x.tools.pretty_print_condensed.truncate_segments","match","trunc-prefix","rep","clojure.string/replace","cljs.core._EQ_","day8.re-frame-10x.tools.pretty-print-condensed/truncate-named","named","the-ns","cljs.core/namespace","the-name","cljs.core/name","kw?","ns-prefix-size","prefix","G__24331","end","ns-budget","ns-string","day8.re-frame-10x.tools.pretty-print-condensed/truncate","location","param","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/INamed","day8.re-frame-10x.tools.pretty-print-condensed/str->namespaced-sym","name","cljs.core/second","cljs.core/re-find","cljs.core.symbol","day8.re-frame-10x.tools.pretty-print-condensed/edges","coll","cljs.core/map?","cljs.core/vector?","cljs.core/set?","cljs.core/list?","cljs.core/seq?","day8.re-frame-10x.tools.pretty-print-condensed/with-edges","value","vec__24335","cljs.core.nth","left","right","G__24339","day8.re-frame-10x.tools.pretty-print-condensed/pretty-condensed","form","day8.re_frame_10x.tools.pretty_print_condensed.pretty_condensed","cljs.core/coll?","depth","enter-pred","max-depth","cljs.core/fn?","or__5043__auto__","G__24342","and__5041__auto__","clojure.string.join","cljs.core.mapv","cljs.core.partial","day8.re-frame-10x.tools.pretty-print-condensed/pr-writer-impl","obj","writer","opts","fexpr__24344","cljs.core/pr-writer-impl","day8.re-frame-10x.tools.pretty-print-condensed/pr-writer","temp__5802__auto__","alt-impl","G__24345","G__24346","G__24347","cljs.core.assoc","day8.re-frame-10x.tools.pretty-print-condensed/pr-seq-writer","objs","cljs.core/first","seq__24349","cljs.core/seq","chunk__24350","count__24351","i__24352","temp__5804__auto__","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","cljs.core/-write","day8.re-frame-10x.tools.pretty-print-condensed/string-print","cljs.core/*print-fn*","this__5327__auto__","writer__5328__auto__","opt__5329__auto__","day8.re-frame-10x.tools.pretty-print-condensed/LimitedStringBufferWriter","day8.re-frame-10x.tools.pretty-print-condensed/->LimitedStringBufferWriter","sb","max-string-length","over-limit?","_","day8.re-frame-10x.tools.pretty-print-condensed/pr-sb-with-opts","js/goog.string.StringBuffer","day8.re-frame-10x.tools.pretty-print-condensed/pr-str-with-opts","cljs.core/empty?","day8.re-frame-10x.tools.pretty-print-condensed/pr-opts","cljs.core/*flush-on-newline*","cljs.core/*print-readably*","cljs.core/*print-meta*","cljs.core/*print-dup*","cljs.core/*print-length*","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.tools.pretty-print-condensed/pr-str-truncated","seq24356","G__24357","self__5751__auto__"],"sourcesContent":["(ns ^{:doc    \"Utilities for pretty-printing abbreviated Clojure forms\"\n      :author \"Matthew Huebert\"}\n  day8.re-frame-10x.tools.pretty-print-condensed\n  (:refer-clojure :exclude [pr-seq-writer string-print pr-str-with-opts pr-opts pr])\n  (:require [clojure.string :as str]\n            [goog.string    :as gstring]\n            [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db])\n  (:import [goog.string StringBuffer]))\n\n(defprotocol ILimited\n  (-limited? [x]))\n\n(defn ^js/String truncate-string\n  \"Truncate a string to length `n`.\n\n  Removal occurs at `cut-from`, which may be :start, :end, or :middle.\n\n  Truncation is indicated by `\u2026` at start/end, or `...` at middle, for readability. \"\n  ([n string]\n   (truncate-string n :end string))\n  ([n cut-from string]\n   (let [c (count string)]\n     (if (> c n)\n       (case cut-from\n         :start (str \"\u2026\" (subs string (- c (dec n)) c))\n         :end (str (subs string 0 (dec n)) \"\u2026\")\n         :middle (case n\n                   1 \"\u2026\"\n                   2 (truncate-string n :start string)\n                   3 (str (subs string 0 1) \"\u2026\" (subs string (dec c) c))\n                   (let [content-budget  (- n 2)\n                         per-side-budget (-> content-budget\n                                             (/ 2)\n                                             (js/Math.floor))]\n                     ;; 100 - 9 = 91 / 2 = 45\n                     ;; subs string 0\n                     (str (subs string 0 (cond-> per-side-budget\n                                                 (even? content-budget)\n                                                 (dec)))\n                          \"...\"\n                          (subs string (- c per-side-budget) c)))))\n       string))))\n\n(comment\n  (assert (= (truncate-string 5 :start \"123456789\") \"\u20266789\"))\n  (assert (= (truncate-string 5 :end \"123456789\") \"1234\u2026\"))\n\n  ;; special case use of \u2026 for short :middle-truncated strings\n  (assert (= (truncate-string 1 :middle \"123456789\") \"\u2026\"))\n  (assert (= (truncate-string 2 :middle \"123456789\") \"\u20269\"))\n  (assert (= (truncate-string 3 :middle \"123456789\") \"1\u20269\"))\n\n  (assert (= (truncate-string 4 :middle \"123456789\") \"...9\"))\n  (assert (= (truncate-string 5 :middle \"123456789\") \"1...9\"))\n  (assert (= (truncate-string 6 :middle \"123456789\") \"1...89\"))\n  (assert (= (truncate-string 7 :middle \"123456789\") \"12...89\"))\n  (assert (= (truncate-string 8 :middle \"123456789\") \"12...789\")))\n\n(defn ^js/String truncate-segments\n  ([s limit] (truncate-segments s limit #\"^[^.]+\\.\" \"\u2026\"))\n  ([s limit match trunc-prefix]\n   (if (<= (count s) limit)\n     s\n     (let [rep (str/replace s match trunc-prefix)]\n       (if (= rep s)\n         trunc-prefix\n         (recur (str/replace s match trunc-prefix)\n                limit\n                match\n                trunc-prefix))))))\n\n\n(comment\n  (assert (= (truncate-segments \"a.bcd\" 1) \"\u2026\"))\n  (assert (= (truncate-segments \"a.bcd\" 2) \"\u2026\"))\n  (assert (= (truncate-segments \"a.bcd\" 3) \"\u2026\"))\n  (assert (= (truncate-segments \"a.bcd\" 4) \"\u2026bcd\"))\n  (assert (= (truncate-segments \"a.bcd\" 5) \"a.bcd\"))\n  (assert (= (truncate-segments \"a.bcd\" 6) \"a.bcd\"))\n\n\n  (assert (= (truncate-segments \"a.b.c\" 1) \"\u2026\"))\n  (assert (= (truncate-segments \"a.b.c\" 2) \"\u2026c\"))\n  (assert (= (truncate-segments \"a.b.c\" 3) \"\u2026c\"))\n  (assert (= (truncate-segments \"a.b.c\" 4) \"\u2026b.c\"))\n  (assert (= (truncate-segments \"a.b.c\" 5) \"a.b.c\"))\n  (assert (= (truncate-segments \"a.b.c\" 6) \"a.b.c\")))\n\n(defn ^js/String truncate-named\n  \"Truncates `named`, which must satisfy INamed protocol, to within `n`\n   characters, cutting from beginning. Adds a `\u2026` prefix to indicate where\n   cutting has occurred.\"\n  [n named]\n  (let [the-ns         (namespace named)\n        the-name       (name named)\n        kw?            (keyword? named)\n        ns-prefix-size (if kw? 3 2)]\n    (if (or (> (count the-name) (if the-ns (- n ns-prefix-size) n))\n            (nil? the-ns))\n      (let [prefix (cond-> (if kw? \":\" \"\")\n                           the-ns (str \"\u2026/\"))]\n        (str prefix\n             (truncate-string (- n (count prefix)) :start the-name)))\n      (let [end       (str \"/\" the-name)\n            prefix    (if kw? \":\" \"\")\n            ns-budget (- n (count end) (count prefix))\n            ns-string (truncate-segments the-ns ns-budget)]\n        (str prefix\n             ns-string\n             end)))))\n\n\n(assert (= (truncate-named 12 :city/saskatoon)\n\n           \":\u2026/saskatoon\"))\n\n(comment\n\n  (assert (= (truncate-named 1 :saskatoon) \":\u2026\"))\n  (assert (= (truncate-named 2 :saskatoon) \":\u2026\"))\n  (assert (= (truncate-named 3 :saskatoon) \":\u2026n\"))\n  (assert (= (truncate-named 9 :saskatoon) \":\u2026skatoon\"))\n  (assert (= (truncate-named 10 :saskatoon) \":saskatoon\"))\n\n\n  (assert (= (truncate-named 1 :city/saskatoon) \":\u2026/\u2026\"))\n  (assert (= (truncate-named 2 :city/saskatoon) \":\u2026/\u2026\"))\n  (assert (= (truncate-named 3 :city/saskatoon) \":\u2026/\u2026\"))\n  (assert (= (truncate-named 4 :city/saskatoon) \":\u2026/\u2026\"))\n  (assert (= (truncate-named 5 :city/saskatoon) \":\u2026/\u2026n\"))\n  (assert (= (truncate-named 11 :city/saskatoon) \":\u2026/\u2026skatoon\"))\n  (assert (= (truncate-named 12 :city/saskatoon) \":\u2026/saskatoon\"))\n  (assert (= (truncate-named 13 :city/saskatoon) \":\u2026/saskatoon\"))\n  (assert (= (truncate-named 14 :city/saskatoon) \":\u2026/saskatoon\"))\n  (assert (= (truncate-named 15 :city/saskatoon) \":city/saskatoon\"))\n  (assert (= (truncate-named 16 :city/saskatoon) \":city/saskatoon\"))\n\n  (assert (= (truncate-named 8 'saskatoon) \"\u2026skatoon\"))\n  (assert (= (truncate-named 9 'saskatoon) \"saskatoon\"))\n  (assert (= (truncate-named 10 'saskatoon) \"saskatoon\"))\n\n  (assert (= (truncate-named 1 'city/saskatoon) \"\u2026/\u2026\"))\n  (assert (= (truncate-named 2 'city/saskatoon) \"\u2026/\u2026\"))\n  (assert (= (truncate-named 3 'city/saskatoon) \"\u2026/\u2026\"))\n  (assert (= (truncate-named 4 'city/saskatoon) \"\u2026/\u2026n\"))\n  (assert (= (truncate-named 10 'city/saskatoon) \"\u2026/\u2026skatoon\"))\n  (assert (= (truncate-named 11 'city/saskatoon) \"\u2026/saskatoon\"))\n  (assert (= (truncate-named 12 'city/saskatoon) \"\u2026/saskatoon\"))\n  (assert (= (truncate-named 13 'city/saskatoon) \"\u2026/saskatoon\"))\n  (assert (= (truncate-named 14 'city/saskatoon) \"city/saskatoon\"))\n  (assert (= (truncate-named 15 'city/saskatoon) \"city/saskatoon\")))\n\n(defn ^js/String truncate [n location param]\n  (if (satisfies? INamed param)\n    (truncate-named n param)\n    (truncate-string n location (str param))))\n\n(defn str->namespaced-sym [s]\n  (if (string? s)\n    (let [name (second (re-find #\"\\.([^.]+)$\" s))]\n      (if name (symbol (subs s 0 (- (count s) (count name) 1))\n                       name)\n               (symbol s)))\n    s))\n\n(defn edges\n  \"Return left and right edges of a collection (eg. brackets plus prefixes), defaults to [< >].\"\n  [coll]\n  (cond (map? coll) [\\{ \\}]\n        (vector? coll) [\\[ \\]]\n        (set? coll) [\"#{\" \\}]\n        (or (list? coll)\n            (seq? coll)) [\"(\" \")\"]\n        :else [\"<\" \">\"]))\n\n(defn with-edges\n  \"Wrap `value` with edges of `coll`\"\n  [coll value]\n  (let [[left right] (edges coll)]\n    (str left value right)))\n\n(defn pretty-condensed\n  \"Render form in abbreviated form, showing content only for keywords/strings/symbols and entering collections to a depth of 1.\"\n  ([form] (pretty-condensed 0 coll? 1 form))\n  ([depth enter-pred max-depth form]\n   (cond\n     (satisfies? INamed form) (truncate-named 16 form)\n     (string? form) (truncate-string 16 :middle form)\n     (fn? form) (or (some-> (.-name form)\n                            (str/replace #\"(^.*\\$)(.*)\" \"$2\"))\n                    \"\u0192\")\n     (number? form) (str form)\n     (and (enter-pred form)\n          (< depth max-depth)) (with-edges form\n                                           (str/join \", \" (mapv (partial pretty-condensed (inc depth) enter-pred max-depth) form)))\n     :else (with-edges form \"\u2026\"))))\n\n;; Copied from cljs.core and modified to take a LimitedStringBufferWriter\n\n(defn pr-writer-impl [obj writer opts]\n  (if (-limited? writer)\n    writer\n    (#'cljs.core/pr-writer-impl obj writer opts)))\n\n(defn- pr-writer\n  \"Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.\"\n  [obj writer opts]\n  (if-let [alt-impl (:alt-impl opts)]\n    (alt-impl obj writer (assoc opts :fallback-impl pr-writer-impl))\n    (pr-writer-impl obj writer opts)))\n\n(defn pr-seq-writer [objs writer opts]\n  (pr-writer (first objs) writer opts)\n  (doseq [obj (next objs)]\n    (-write writer \" \")\n    (pr-writer obj writer opts)))\n\n(defn string-print [x]\n  (*print-fn* x)\n  nil)\n\n(deftype LimitedStringBufferWriter [sb max-string-length ^:mutable over-limit?]\n  IWriter\n  (-write [_ s]\n    (when-not over-limit?\n      (if (<= max-string-length (.getLength ^js sb))\n        (set! over-limit? true)\n        (.append sb s)))\n    sb)\n  (-flush [_] nil)\n  ICounted\n  (-count [_]\n    (.getLength ^js sb))\n  ILimited\n  (-limited? [_]\n    over-limit?))\n\n(defn- pr-sb-with-opts [objs opts]\n  (let [sb     (StringBuffer.)\n        writer (LimitedStringBufferWriter. sb (:debux/max-string-length opts 72) false)]\n    (pr-seq-writer objs writer opts)\n    (-flush writer)\n    sb))\n\n(defn pr-str-with-opts\n  \"Prints a sequence of objects to a string, observing all the\n  options given in opts\"\n  [objs opts]\n  (if (empty? objs)\n    \"\"\n    (str (pr-sb-with-opts objs opts))))\n\n(defn- pr-opts []\n  {:flush-on-newline *flush-on-newline*\n   :readably         *print-readably*\n   :meta             *print-meta*\n   :dup              *print-dup*\n   :print-length     *print-length*})\n\n(defn pr-str-truncated\n  \"Like pr, but truncates output at n characters. Use for efficient printing where\n  you don't want to pay the cost of printing the (possibly large) data structure.\"\n  [n & objs]\n  (let [opts (pr-opts)]\n    (->> (pr-str-with-opts objs (assoc opts\n                                  ;; Each sequence element must be at least a single character, plus a space separator\n                                  :print-length (/ n 2)\n                                  :more-marker \"\u2026\"\n                                  :debux/max-string-length (inc n) ;; One higher so we can detect truncation vs. max limit\n                                  :alt-impl pr-writer-impl))\n         (truncate-string n))))\n\n(comment (defn testit []\n           (dotimes [_ 5]\n             (time\n               (pr-str-truncated 200 @day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db/app-db)))\n           (pr-str-truncated 200 \"=>\" @day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db/app-db)))\n"]}