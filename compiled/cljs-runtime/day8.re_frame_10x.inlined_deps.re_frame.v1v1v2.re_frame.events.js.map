{"version":3,"sources":["day8/re_frame_10x/inlined_deps/re_frame/v1v1v2/re_frame/events.cljc"],"mappings":"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","names":["day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.events/kind","js/Error","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar/kinds","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.events/flatten-and-remove-nils","id","interceptors","p1__16660#","make-chain","cljs.core/flatten","cljs.core.remove","cljs.core/nil?","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop/debug-enabled?","cljs.core/coll?","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.loggers.console","chain","cljs.core/empty?","temp__5804__auto__","not-i","cljs.core/first","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/interceptor?","cljs.core/fn?","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.events/register","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar/register-handler","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.events/*handling*","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.events/handle","event-v","event-id","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.utils/first-in-vector","temp__5802__auto__","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.registrar.get_handler","*handling*-orig-val__16667","*handling*-temp-val__16668","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__16669","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/*current-trace*","*current-trace*-temp-val__16670","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/start-trace","end__16508__auto__","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop/now","duration__16509__auto__","cljs.core.swap_BANG_","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace/run-tracing-callbacks!","new-trace__16510__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core/deref","cljs.core.dissoc","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db/app-db","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor/execute"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.events\n  (:require [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.db          :refer [app-db]]\n            [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.utils       :refer [first-in-vector]]\n            [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interop     :refer [empty-queue debug-enabled?]]\n            [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar   :refer [get-handler register-handler]]\n            [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.loggers     :refer [console]]\n            [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.interceptor :as  interceptor]\n            [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.trace       :as trace :include-macros true]))\n\n\n(def kind :event)\n(assert (day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.registrar/kinds kind))\n\n(defn- flatten-and-remove-nils\n  \"`interceptors` might have nested collections, and contain nil elements.\n  return a flat collection, with all nils removed.\n  This function is 9/10 about giving good error messages.\"\n  [id interceptors]\n  (let [make-chain  #(->> % flatten (remove nil?))]\n    (if-not debug-enabled?\n      (make-chain interceptors)\n      (do    ;; do a whole lot of development time checks\n        (when-not (coll? interceptors)\n          (console :error \"re-frame: when registering\" id \", expected a collection of interceptors, got:\" interceptors))\n        (let [chain (make-chain interceptors)]\n          (when (empty? chain)\n            (console :error \"re-frame: when registering\" id \", given an empty interceptor chain\"))\n          (when-let [not-i (first (remove interceptor/interceptor? chain))]\n            (if (fn? not-i)\n              (console :error \"re-frame: when registering\" id \", got a function instead of an interceptor. Did you provide old style middleware by mistake? Got:\" not-i)\n              (console :error \"re-frame: when registering\" id \", expected interceptors, but got:\" not-i)))\n          chain)))))\n\n\n(defn register\n  \"Associate the given event `id` with the given collection of `interceptors`.\n\n   `interceptors` may contain nested collections and there may be nils\n   at any level,so process this structure into a simple, nil-less vector\n   before registration.\n\n   Typically, an `event handler` will be at the end of the chain (wrapped\n   in an interceptor).\"\n  [id interceptors]\n  (register-handler kind id (flatten-and-remove-nils id interceptors)))\n\n\n\n;; -- handle event --------------------------------------------------------------------------------\n\n(def ^:dynamic *handling* nil)    ;; remember what event we are currently handling\n\n(defn handle\n  \"Given an event vector `event-v`, look up the associated interceptor chain, and execute it.\"\n  [event-v]\n  (let [event-id  (first-in-vector event-v)]\n    (if-let [interceptors  (get-handler kind event-id true)]\n      (if *handling*\n        (console :error \"re-frame: while handling\" *handling* \", dispatch-sync was called for\" event-v \". You can't call dispatch-sync within an event handler.\")\n        (binding [*handling*  event-v]\n          (trace/with-trace {:operation event-id\n                             :op-type   kind\n                             :tags      {:event event-v}}\n            (trace/merge-trace! {:tags {:app-db-before @app-db}})\n            (interceptor/execute event-v interceptors)\n            (trace/merge-trace! {:tags {:app-db-after @app-db}})))))))\n\n\n"]}