{"version":3,"sources":["rewrite_clj/node/keyword.cljs"],"mappings":"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","names":["this__5340__auto__","k__5341__auto__","this__5342__auto__","k22207","else__5343__auto__","G__22217","cljs.core/Keyword","k","namespaced?","cljs.core.get","__extmap","this__5360__auto__","f__5361__auto__","init__5362__auto__","cljs.core.reduce","ret__5363__auto__","p__22221","vec__22225","k__5364__auto__","cljs.core.nth","v__5365__auto__","this__5355__auto__","writer__5356__auto__","opts__5357__auto__","pr-pair__5358__auto__","keyval__5359__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__22206","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5338__auto__","__meta","this__5335__auto__","__hash","this__5344__auto__","cljs.core/count","this__5336__auto__","h__5152__auto__","coll__5337__auto__","cljs.core/hash-unordered-coll","this22208","other22209","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__5350__auto__","k__5351__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5347__auto__","G__22252","this__5348__auto__","k__5349__auto__","pred__22257","cljs.core/keyword-identical?","expr__22258","cljs.core.assoc","this__5353__auto__","cljs.core/seq","cljs.core/MapEntry","this__5339__auto__","this__5345__auto__","entry__5346__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-clj.node.keyword/KeywordNode","this__5386__auto__","cljs.core/List","writer__5387__auto__","cljs.core/-write","G__22210","extmap__5382__auto__","G__22262","cljs.core/record?","rewrite-clj.node.keyword/->KeywordNode","rewrite-clj.node.keyword/map->KeywordNode","_","and__5041__auto__","cljs.core/not","cljs.core/namespace","js/Error","this","c","cljs.core/name","temp__5802__auto__","nspace","v","cljs.core.pr_str","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","rewrite-clj.node.keyword/keyword-node","p__22270","vec__22271","seq22265","G__22266","cljs.core/first","cljs.core/next","self__5751__auto__"],"sourcesContent":["(ns rewrite-clj.node.keyword\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Node\n\n(defrecord KeywordNode [k namespaced?]\n  node/Node\n  (tag [_] :token)\n  (printable-only? [_] false)\n  (sexpr [_]\n    (if (and namespaced?\n             (not (namespace k)))\n;;       (keyword\n;;         (name (ns-name *ns*))\n;;         (name k))\n      (throw (js/Error. \"Namespaced keywords not supported !\"))\n      k))\n  (length [this]\n    (let [c (inc (count (name k)))]\n      (if namespaced?\n        (inc c)\n        (if-let [nspace (namespace k)]\n          (+ 1 c (count nspace))\n          c))))\n  (string [_]\n    (let [v (pr-str k)]\n      (if namespaced?\n        (str \":\" v)\n        v)))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n\n\n\n;; TODO\n;;(node/make-printable! KeywordNode)\n\n;; ## Constructor\n\n(defn keyword-node\n  \"Create node representing a keyword. If `namespaced?` is given as `true`\n   a keyword \u00e0 la `::x` or `::ns/x` (i.e. namespaced/aliased) is generated.\"\n  [k & [namespaced?]]\n  {:pre [(keyword? k)]}\n  (->KeywordNode k namespaced?))\n"]}