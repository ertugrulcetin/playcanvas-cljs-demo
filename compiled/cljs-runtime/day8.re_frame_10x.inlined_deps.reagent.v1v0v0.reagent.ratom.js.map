{"version":3,"sources":["day8/re_frame_10x/inlined_deps/reagent/v1v0v0/reagent/ratom.cljs"],"mappings":"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","names":["js/day8","js/day8.re-frame-10x","js/day8.re-frame-10x.inlined-deps","js/day8.re-frame-10x.inlined-deps.reagent","js/day8.re-frame-10x.inlined-deps.reagent.v1v0v0","js/day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent","js/day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom","js/day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom.debug","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/debug","js/day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom.generation","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/generation","js/day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom.-running","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/-running","cljs.core.atom","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/reactive?","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/*ratom-context*","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/running","cljs.core/deref","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/arr-len","x","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/arr-eq","y","len","and__5041__auto__","i","or__5043__auto__","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/in-context","obj","f","*ratom-context*-orig-val__15618","*ratom-context*-temp-val__15619","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/deref-capture","r","res","c","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/notify-deref-watcher!","derefed","temp__5808__auto__","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/check-watches","old","new","cljs.core.swap_BANG_","cljs.core/+","cljs.core/count","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/add-w","this","key","w","cljs.core.assoc","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/remove-w","cljs.core.dissoc","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/notify-w","a","p1__15620#","p2__15621#","p3__15622#","cljs.core/reduce-kv","G__15623","k","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/pr-atom","writer","opts","s","v","cljs.core/-write","cljs.core/pr-writer","*ratom-context*-orig-val__15624","*ratom-context*-temp-val__15625","js/day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom.rea-queue","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/rea-queue","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/rea-enqueue","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.impl.batching/schedule","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/IReactiveAtom","cljs.core/PROTOCOL_SENTINEL","this__5327__auto__","writer__5328__auto__","opt__5329__auto__","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/RAtom","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/->RAtom","state","meta","validator","watches","o","other","new-value","js/Error","old-value","more","cljs.core.apply","_","new-meta","goog/getUid","var_args","G__15629","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/atom","args-arr__5791__auto__","len__5766__auto__","i__5767__auto__","argseq__5792__auto__","cljs.core/IndexedSeq","p__15630","map__15631","cljs.core/--destructure-map","cljs.core.get","seq15627","G__15628","cljs.core/first","cljs.core/next","self__5751__auto__","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/cached-reaction","destroy","m","cljs.core/-deref","G__15632","G__15633","G__15634","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/make-reaction","cljs.core/dec","cljs.core/inc","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/Track","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/->Track","args","reaction","temp__5806__auto__","cljs.core._EQ_","cljs.core/hash","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/make-track","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/make-track!","t","G__15635","G__15636","G__15637","args__5772__auto__","argseq__5773__auto__","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/track","seq15638","G__15639","cljs.core/ifn?","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/track!","seq15640","G__15641","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/RCursor","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/->RCursor","ratom","path","*ratom-context*-orig-val__15642","*ratom-context*-temp-val__15643","oldstate","newstate","cljs.core/native-satisfies?","cljs.core/IDeref","cljs.core.get_in","cljs.core/reset!","cljs.core/assoc-in","G__15645","G__15646","G__15647","G__15648","G__15649","G__15650","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/cursor","src","cljs.core/vector?","cljs.core.pr_str","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/with-let-destroy","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/with-let-values","cljs.core/array","day8$re-frame-10x$inlined-deps$reagent$v1v0v0$reagent$ratom$IDisposable$dispose_BANG_$dyn","x__5390__auto__","m__5391__auto__","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/dispose!","goog/typeOf","m__5389__auto__","cljs.core/missing-protocol","day8$re-frame-10x$inlined-deps$reagent$v1v0v0$reagent$ratom$IDisposable$add_on_dispose_BANG_$dyn","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/add-on-dispose!","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/IDisposable","day8$re-frame-10x$inlined-deps$reagent$v1v0v0$reagent$ratom$IRunnable$run$dyn","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/run","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/IRunnable","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/handle-reaction-change","sender","p__15664","map__15665","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/Reaction","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/->Reaction","dirty?","nocache?","watching","auto-run","caught","was-empty","cljs.core/empty?","newval","cljs.core/fn?","oldval","G__15671","G__15672","G__15673","G__15674","G__15675","G__15676","*ratom-context*-orig-val__15653","*ratom-context*-temp-val__15654","cljs.core/set","seq__15655","cljs.core/seq","chunk__15656","count__15657","i__15658","temp__5804__auto__","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","clojure.set.difference","cljs.core/-add-watch","seq__15659","chunk__15660","count__15661","i__15662","cljs.core/-remove-watch","e15663","e","check","on-set","on-dispose","no-cache","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/flush!","non-reactive","wg","seq__15666","chunk__15667","count__15668","i__15669","n__5633__auto__","fexpr__15670","q","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.impl.batching/ratom-flush","p__15679","map__15680","seq15677","G__15678","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/temp-reaction","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/run-in-reaction","run","day8.re_frame_10x.inlined_deps.reagent.v1v0v0.reagent.ratom.goog$module$goog$object.set","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/check-derefs","ctx","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/Wrapper","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/->Wrapper","callback","changed","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.debug/has-console","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.debug/tracking","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.debug/track-console","js/console","cljs.core/not","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom/make-wrapper","value","callback-fn","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.impl.util/make-partial-fn"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom\n  (:refer-clojure :exclude [atom])\n  (:require-macros [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom])\n  (:require [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.impl.util :as util]\n            [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.debug :refer-macros [warn dev?]]\n            [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.impl.batching :as batch]\n            [clojure.set :as s]\n            [goog.object :as obj]))\n\n(set! *warn-on-infer* false)\n\n(declare flush!)\n\n(declare ^:dynamic *ratom-context*)\n(defonce ^boolean debug false)\n(defonce ^:private generation 0)\n(defonce ^:private -running (clojure.core/atom 0))\n\n(defn ^boolean reactive? []\n  (some? *ratom-context*))\n\n\n;;; Utilities\n\n(defn running []\n  (+ @-running))\n\n(defn- ^number arr-len [x]\n  (if (nil? x) 0 (alength x)))\n\n(defn- ^boolean arr-eq [x y]\n  (let [len (arr-len x)]\n    (and (== len (arr-len y))\n         (loop [i 0]\n           (or (== i len)\n               (if (identical? (aget x i) (aget y i))\n                 (recur (inc i))\n                 false))))))\n\n(defn- in-context\n  \"When f is executed, if (f) derefs any ratoms, they are then added to 'obj.captured'(*ratom-context*).\n\n  See function notify-deref-watcher! to know how *ratom-context* is updated\"\n  [obj f]\n  (binding [*ratom-context* obj]\n    (f)))\n\n(defn- deref-capture\n  \"Returns `(in-context f r)`.  Calls `_update-watching` on r with any\n  `deref`ed atoms captured during `in-context`, if any differ from the\n  `watching` field of r.  Clears the `dirty?` flag on r.\n\n  Inside '_update-watching' along with adding the ratoms in 'r.watching' of reaction,\n  the reaction is also added to the list of watches on each ratoms f derefs.\"\n  [f ^clj r]\n  (set! (.-captured r) nil)\n  (when (dev?)\n    (set! (.-ratomGeneration r) (set! generation (inc generation))))\n  (let [res (in-context r f)\n        c (.-captured r)]\n    (set! (.-dirty? r) false)\n    ;; Optimize common case where derefs occur in same order\n    (when-not (arr-eq c (.-watching r))\n      (._update-watching r c))\n    res))\n\n(defn- notify-deref-watcher!\n  \"Add `derefed` to the `captured` field of `*ratom-context*`.\n\n  See also `in-context`\"\n  [derefed]\n  (when-some [^clj r *ratom-context*]\n    (let [c (.-captured r)]\n      (if (nil? c)\n        (set! (.-captured r) (array derefed))\n        (.push c derefed)))))\n\n(defn- check-watches [old new]\n  (when debug\n    (swap! -running + (- (count new) (count old))))\n  new)\n\n(defn- add-w [^clj this key f]\n  (let [w (.-watches this)]\n    (set! (.-watches this) (check-watches w (assoc w key f)))\n    (set! (.-watchesArr this) nil)))\n\n(defn- remove-w [^clj this key]\n  (let [w (.-watches this)]\n    (set! (.-watches this) (check-watches w (dissoc w key)))\n    (set! (.-watchesArr this) nil)))\n\n(defn- notify-w [^clj this old new]\n  (let [w (.-watchesArr this)\n        a (if (nil? w)\n            ;; Copy watches to array for speed\n            (->> (.-watches this)\n                 (reduce-kv #(doto %1 (.push %2) (.push %3)) #js[])\n                 (set! (.-watchesArr this)))\n            w)\n        len (alength a)]\n    (loop [i 0]\n      (when (< i len)\n        (let [k (aget a i)\n              f (aget a (inc i))]\n          (f k this old new))\n        (recur (+ 2 i))))))\n\n(defn- pr-atom [a writer opts s v]\n  (-write writer (str \"#object[day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.ratom.\" s \" \"))\n  (pr-writer (binding [*ratom-context* nil] v) writer opts)\n  (-write writer \"]\"))\n\n\n;;; Queueing\n\n(defonce ^:private rea-queue nil)\n\n(defn- rea-enqueue [r]\n  (when (nil? rea-queue)\n    (set! rea-queue (array))\n    (batch/schedule))\n  (.push rea-queue r))\n\n;;; Atom\n\n(defprotocol IReactiveAtom)\n\n(deftype RAtom [^:mutable state meta validator ^:mutable watches]\n  IAtom\n  IReactiveAtom\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IDeref\n  (-deref [this]\n    (notify-deref-watcher! this)\n    state)\n\n  IReset\n  (-reset! [a new-value]\n    (when-not (nil? validator)\n      (assert (validator new-value) \"Validator rejected reference state\"))\n    (let [old-value state]\n      (set! state new-value)\n      (when-not (nil? watches)\n        (notify-w a old-value new-value))\n      new-value))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f state)))\n  (-swap! [a f x]        (-reset! a (f state x)))\n  (-swap! [a f x y]      (-reset! a (f state x y)))\n  (-swap! [a f x y more] (-reset! a (apply f state x y more)))\n\n  IWithMeta\n  (-with-meta [_ new-meta] (RAtom. state new-meta validator watches))\n\n  IMeta\n  (-meta [_] meta)\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"RAtom\" {:val (-deref a)}))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IHash\n  (-hash [this] (goog/getUid this)))\n\n(defn atom\n  \"Like clojure.core/atom, except that it keeps track of derefs.\"\n  ([x] (->RAtom x nil nil nil))\n  ([x & {:keys [meta validator]}] (->RAtom x meta validator nil)))\n\n\n;;; track\n\n(declare make-reaction)\n\n(defn- cached-reaction [f ^clj o k ^clj obj destroy]\n  (let [m (.-reagReactionCache o)\n        m (if (nil? m) {} m)\n        r (m k nil)]\n    (cond\n      (some? r) (-deref r)\n      (nil? *ratom-context*) (f)\n      :else (let [r (make-reaction\n                     f :on-dispose (fn [x]\n                                     (when debug (swap! -running dec))\n                                     (as-> (.-reagReactionCache o) _\n                                       (dissoc _ k)\n                                       (set! (.-reagReactionCache o) _))\n                                     (when (some? obj)\n                                       (set! (.-reaction obj) nil))\n                                     (when (some? destroy)\n                                       (destroy x))))\n                  v (-deref r)]\n              (set! (.-reagReactionCache o) (assoc m k r))\n              (when debug (swap! -running inc))\n              (when (some? obj)\n                (set! (.-reaction obj) r))\n              v))))\n\n(deftype Track [f args ^:mutable reaction]\n  IReactiveAtom\n\n  IDeref\n  (-deref [this]\n    (if-some [r reaction]\n      (-deref r)\n      (cached-reaction #(apply f args) f args this nil)))\n\n  IEquiv\n  (-equiv [_ ^clj other]\n    (and (instance? Track other)\n         (= f (.-f other))\n         (= args (.-args other))))\n\n  IHash\n  (-hash [_] (hash [f args]))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Track\" {:val (-deref a)\n                                                    :f f})))\n\n(defn make-track [f args]\n  (Track. f args nil))\n\n(defn make-track! [f args]\n  (let [t (make-track f args)\n        r (make-reaction #(-deref t)\n                         :auto-run true)]\n    @r\n    r))\n\n(defn track [f & args]\n  {:pre [(ifn? f)]}\n  (make-track f args))\n\n(defn track! [f & args]\n  {:pre [(ifn? f)]}\n  (make-track! f args))\n\n;;; cursor\n\n(deftype RCursor [ratom path ^:mutable reaction\n                  ^:mutable state ^:mutable watches]\n  IAtom\n  IReactiveAtom\n\n  IEquiv\n  (-equiv [_ ^clj other]\n    (and (instance? RCursor other)\n         (= path (.-path other))\n         (= ratom (.-ratom other))))\n\n  Object\n  (_peek [this]\n    (binding [*ratom-context* nil]\n      (-deref this)))\n\n  (_set-state [this oldstate newstate]\n    (when-not (identical? oldstate newstate)\n      (set! state newstate)\n      (when (some? watches)\n        (notify-w this oldstate newstate))))\n\n  IDeref\n  (-deref [this]\n    (let [oldstate state\n          newstate (if-some [r reaction]\n                     (-deref r)\n                     (let [f (if (satisfies? IDeref ratom)\n                               #(get-in @ratom path)\n                               #(ratom path))]\n                       (cached-reaction f ratom path this nil)))]\n      (._set-state this oldstate newstate)\n      newstate))\n\n  IReset\n  (-reset! [this new-value]\n    (let [oldstate state]\n      (._set-state this oldstate new-value)\n      (if (satisfies? IDeref ratom)\n        (if (= path [])\n          (reset! ratom new-value)\n          (swap! ratom assoc-in path new-value))\n        (ratom path new-value))\n      new-value))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f (._peek a))))\n  (-swap! [a f x]        (-reset! a (f (._peek a) x)))\n  (-swap! [a f x y]      (-reset! a (f (._peek a) x y)))\n  (-swap! [a f x y more] (-reset! a (apply f (._peek a) x y more)))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"RCursor\" {:val (-deref a)\n                                                      :path path}))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IHash\n  (-hash [_] (hash [ratom path])))\n\n(defn cursor\n  [^clj src path]\n  (assert (or (satisfies? IReactiveAtom src)\n              (and (ifn? src)\n                   (not (vector? src))))\n          (str \"src must be a reactive atom or a function, not \"\n               (pr-str src)\n               \" while attempting to get path: \"\n               (pr-str path)))\n  (->RCursor src path nil nil nil))\n\n\n;;; with-let support\n\n(defn with-let-destroy [v]\n  (when-some [f (.-destroy v)]\n    (f)))\n\n(defn with-let-values [key]\n  (if-some [c *ratom-context*]\n    (cached-reaction array c key nil with-let-destroy)\n    (array)))\n\n\n;;;; reaction\n\n(defprotocol IDisposable\n  (dispose! [this])\n  (add-on-dispose! [this f]))\n\n(defprotocol IRunnable\n  (run [this]))\n\n(defn- handle-reaction-change [^clj this sender old new]\n  (._handle-change this sender old new))\n\n;; Fields of a Reaction javascript object\n;; - auto_run\n;; - captured\n;; - caught\n;; - f\n;; - ratomGeneration\n;; - state\n;; - watches\n;; - watching\n(deftype Reaction [f ^:mutable state ^:mutable ^boolean dirty? ^boolean nocache?\n                   ^:mutable watching ^:mutable watches ^:mutable auto-run\n                   ^:mutable caught]\n  IAtom\n  IReactiveAtom\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]\n    (let [was-empty (empty? watches)]\n      (remove-w this key)\n      (when (and (not was-empty)\n                 (empty? watches)\n                 (nil? auto-run))\n        (dispose! this))))\n\n  IReset\n  (-reset! [a newval]\n    (assert (fn? (.-on-set a)) \"Reaction is read only; on-set is not allowed\")\n    (let [oldval state]\n      (set! state newval)\n      (.on-set a oldval newval)\n      (notify-w a oldval newval)\n      newval))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f (._peek-at a))))\n  (-swap! [a f x]        (-reset! a (f (._peek-at a) x)))\n  (-swap! [a f x y]      (-reset! a (f (._peek-at a) x y)))\n  (-swap! [a f x y more] (-reset! a (apply f (._peek-at a) x y more)))\n\n  Object\n  (_peek-at [this]\n    (binding [*ratom-context* nil]\n      (-deref this)))\n\n  (_handle-change [this sender oldval newval]\n    (when-not (or (identical? oldval newval)\n                  dirty?)\n      (if (nil? auto-run)\n        (do\n          (set! dirty? true)\n          (rea-enqueue this))\n        (if (true? auto-run)\n          (._run this false)\n          (auto-run this)))))\n\n  (_update-watching [this derefed]\n    (let [new (set derefed)\n          old (set watching)]\n      (set! watching derefed)\n      (doseq [w (s/difference new old)]\n        (-add-watch w this handle-reaction-change))\n      (doseq [w (s/difference old new)]\n        (-remove-watch w this))))\n\n  (_queued-run [this]\n    (when (and dirty? (some? watching))\n      (._run this true)))\n\n  (_try-capture [this f]\n    (try\n      (set! caught nil)\n      (deref-capture f this)\n      (catch :default e\n        (set! state e)\n        (set! caught e)\n        (set! dirty? false))))\n\n  (_run [this check]\n    (let [oldstate state\n          res (if check\n                (._try-capture this f)\n                (deref-capture f this))]\n      (when-not nocache?\n        (set! state res)\n        ;; Use = to determine equality from reactions, since\n        ;; they are likely to produce new data structures.\n        (when-not (or (nil? watches)\n                      (= oldstate res))\n          (notify-w this oldstate res)))\n      res))\n\n  (_set-opts [this {:keys [auto-run on-set on-dispose no-cache]}]\n    (when (some? auto-run)\n      (set! (.-auto-run this) auto-run))\n    (when (some? on-set)\n      (set! (.-on-set this) on-set))\n    (when (some? on-dispose)\n      (set! (.-on-dispose this) on-dispose))\n    (when (some? no-cache)\n      (set! (.-nocache? this) no-cache)))\n\n  IRunnable\n  (run [this]\n    (flush!)\n    (._run this false))\n\n  IDeref\n  (-deref [this]\n    (when-some [e caught]\n      (throw e))\n    (let [non-reactive (nil? *ratom-context*)]\n      (when non-reactive\n        (flush!))\n      (if (and non-reactive (nil? auto-run))\n        (when dirty?\n          (let [oldstate state]\n            (set! state (f))\n            (when-not (or (nil? watches) (= oldstate state))\n              (notify-w this oldstate state))))\n        (do\n          (notify-deref-watcher! this)\n          (when dirty?\n            (._run this false)))))\n    state)\n\n  IDisposable\n  (dispose! [this]\n    (let [s state\n          wg watching]\n      (set! watching nil)\n      (set! state nil)\n      (set! auto-run nil)\n      (set! dirty? true)\n      (doseq [w (set wg)]\n        (-remove-watch w this))\n      (when (some? (.-on-dispose this))\n        (.on-dispose this s))\n      (when-some [a (.-on-dispose-arr this)]\n        (dotimes [i (alength a)]\n          ((aget a i) this)))))\n\n  (add-on-dispose! [this f]\n    ;; f is called with the reaction as argument when it is no longer active\n    (if-some [a (.-on-dispose-arr this)]\n      (.push a f)\n      (set! (.-on-dispose-arr this) (array f))))\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Reaction\" {:val (-deref a)}))\n\n  IHash\n  (-hash [this] (goog/getUid this)))\n\n(defn flush! []\n  (loop []\n    (let [q rea-queue]\n      (when-not (nil? q)\n        (set! rea-queue nil)\n        (dotimes [i (alength q)]\n          (let [^Reaction r (aget q i)]\n            (._queued-run r)))\n        (recur)))))\n\n(set! batch/ratom-flush flush!)\n\n(defn make-reaction [f & {:keys [auto-run on-set on-dispose]}]\n  (let [reaction (->Reaction f nil true false nil nil nil nil)]\n    (._set-opts reaction {:auto-run auto-run\n                          :on-set on-set\n                          :on-dispose on-dispose})\n    reaction))\n\n\n\n(def ^:private temp-reaction (make-reaction nil))\n\n\n(defn run-in-reaction\n  \"Evaluates `f` and returns the result.  If `f` calls `deref` on any ratoms,\n   creates a new Reaction that watches those atoms and calls `run` whenever\n   any of those watched ratoms change.  Also, the new reaction is added to\n   list of 'watches' of each of the ratoms. The `run` parameter is a function\n   that should expect one argument.  It is passed `obj` when run.  The `opts`\n   are any options accepted by a Reaction and will be set on the newly created\n   Reaction. Sets the newly created Reaction to the `key` on `obj`.\"\n  [f obj key run opts]\n  (let [r temp-reaction\n        res (deref-capture f r)]\n    (when-not (nil? (.-watching r))\n      (set! temp-reaction (make-reaction nil))\n      (._set-opts r opts)\n      (set! (.-f r) f)\n      (set! (.-auto-run r) #(run obj))\n      (obj/set obj key r))\n    res))\n\n(defn check-derefs [f]\n  (let [ctx (js-obj)\n        res (in-context ctx f)]\n    [res (some? (.-captured ctx))]))\n\n\n;;; wrap\n\n(deftype Wrapper [^:mutable state callback ^:mutable ^boolean changed\n                  ^:mutable watches]\n\n  IAtom\n\n  IDeref\n  (-deref [this]\n    (when (dev?)\n      (when (and changed (some? *ratom-context*))\n        (warn \"derefing stale wrap: \"\n              (pr-str this))))\n    state)\n\n  IReset\n  (-reset! [this newval]\n    (let [oldval state]\n      (set! changed true)\n      (set! state newval)\n      (when (some? watches)\n        (notify-w this oldval newval))\n      (callback newval)\n      newval))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f state)))\n  (-swap! [a f x]        (-reset! a (f state x)))\n  (-swap! [a f x y]      (-reset! a (f state x y)))\n  (-swap! [a f x y more] (-reset! a (apply f state x y more)))\n\n  IEquiv\n  (-equiv [this ^clj other]\n    (and (instance? Wrapper other)\n         ;; If either of the wrappers have changed, equality\n         ;; cannot be relied on.\n         (not changed)\n         (not (.-changed other))\n         (= state (.-state other))\n         (= callback (.-callback other))))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Wrapper\" {:val (-deref a)})))\n\n(defn make-wrapper [value callback-fn args]\n  (->Wrapper value\n             (util/make-partial-fn callback-fn args)\n             false nil))\n\n\n\n\n#_(do\n  (defn ratom-perf []\n    (set! debug false)\n    (dotimes [_ 10]\n      (let [nite 100000\n            a (atom 0)\n            f (fn []\n                (quot @a 10))\n            mid (make-reaction f)\n            res (track! (fn []\n                          ;; (with-let [x 1])\n                          ;; @(track f)\n                          (inc @mid)\n                          ))]\n        @res\n        (time (dotimes [x nite]\n                (swap! a inc)\n                (flush!)))\n        (dispose! res))))\n  (ratom-perf))\n"]}