{"version":3,"sources":["day8/re_frame_10x/inlined_deps/garden/v1v3v10/garden/util.cljc"],"mappings":"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","names":["var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/format","seq17389","G__17390","cljs.core/first","cljs.core/next","self__5751__auto__","fmt","args","cljs.core.apply","goog.string/format","day8$re-frame-10x$inlined-deps$garden$v1v3v10$garden$util$ToString$to_str$dyn","x__5390__auto__","m__5391__auto__","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/to-str","goog/typeOf","m__5389__auto__","cljs.core/missing-protocol","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/ToString","this","cljs.core/PROTOCOL_SENTINEL","cljs.core/Keyword","cljs.core/name","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/as-str","seq17403","self__5752__auto__","cljs.core/seq","cljs.core/str","cljs.core.map","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/string->int","p__17406","vec__17407","cljs.core.nth","seq17404","G__17405","s","radix","or__5043__auto__","js/parseInt","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/int->string","p__17421","vec__17422","seq17414","G__17415","i","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/space-join","xs","clojure.string.join","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/comma-join","ys","iter__5520__auto__","s__17431","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","cljs.core/count","b__17433","cljs.core/chunk-buffer","i__17432","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__17430","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","x","cljs.core/sequential?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/wrap-quotes","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/hash-map?","cljs.core/map?","cljs.core/record?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/rule?","cljs.core/vector?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/declaration?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/at-rule?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.types/CSSAtRule","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/at-media?","cljs.core._EQ_","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/at-supports?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/at-keyframes?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/at-import?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/prefix","p","cljs.core/last","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/vendor-prefix","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/natural?","n","cljs.core/integer?","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/between?","a","b","bottom","x__5131__auto__","y__5132__auto__","top","x__5128__auto__","y__5129__auto__","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/clip","vec__17457","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/average","seq17460","G__17461","G__17462","m","more","cljs.core/+","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util/cartesian-product","seq17465","seqs","v-original-seqs","cljs.core/vec","step","v-seqs","increment","temp__5802__auto__","rst","cljs.core.assoc","cljs.core/every?","cljs.core/chunk-first"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.util\n  \"Utility functions used by Garden.\"\n  (:require\n   [clojure.string :as str]\n   [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.types :as t]\n   #?@(:cljs\n       [[goog.string]\n        [goog.string.format]]))\n  #?(:clj\n     (:refer-clojure :exclude [format]))\n  #?(:clj\n     (:import day8.re_frame_10x.inlined_deps.garden.v1v3v10.garden.types.CSSAtRule)))\n\n;; ---------------------------------------------------------------------\n;; String utilities\n\n#?(:cljs\n   (defn format\n     \"Formats a string using goog.string.format.\"\n     [fmt & args]\n     (apply goog.string/format fmt args)))\n\n;; To avoid the pain of #?cljs :refer.\n#?(:clj\n   (def format #'clojure.core/format))\n\n(defprotocol ToString\n  (^String to-str [this] \"Convert a value into a string.\"))\n\n(extend-protocol ToString\n  #?(:clj clojure.lang.Keyword)\n  #?(:cljs Keyword)\n  (to-str [this] (name this))\n\n  #?(:clj Object)\n  #?(:cljs default)\n  (to-str [this] (str this))\n\n  nil (to-str [this] \"\"))\n\n(defn ^String as-str\n  \"Convert a variable number of values into strings.\"\n  [& args]\n  (apply str (map to-str args)))\n\n(defn string->int\n  \"Convert a string to an integer with optional base.\"\n  [s & [radix]]\n  (let [radix (or radix 10)]\n    #?(:clj\n       (Integer/parseInt ^String s ^Long radix))\n    #?(:cljs\n       (js/parseInt s radix))))\n\n(defn int->string\n  \"Convert an integer to a string with optional base.\"\n  [i & [radix]]\n  (let [radix (or radix 10)]\n    #?(:clj\n       (Integer/toString ^Long i ^Long radix))\n    #?(:cljs\n       (.toString i radix))))\n\n(defn space-join\n  \"Return a space separated list of values.\"\n  [xs]\n  (str/join \" \" (map to-str xs)))\n\n(defn comma-join\n  \"Return a comma separated list of values. Subsequences are joined with\n   spaces.\"\n  [xs]\n  (let [ys (for [x xs]\n             (if (sequential? x)\n               (space-join x)\n               (to-str x)))]\n    (str/join \", \" ys)))\n\n(defn wrap-quotes\n  \"Wrap a string with double quotes.\"\n  [s]\n  (str \\\" s \\\"))\n\n;; ---------------------------------------------------------------------\n;; Predicates\n\n(defn hash-map?\n  \"True if `(map? x)` and `x` does not satisfy `clojure.lang.IRecord`.\"\n  [x]\n  (and (map? x) (not (record? x))))\n\n(def\n  ^{:doc \"Alias to `vector?`.\"}\n  rule? vector?)\n\n(def\n  ^{:doc \"Alias to `hash-map?`.\"}\n  declaration? hash-map?)\n\n(defn at-rule?\n  [x]\n  (instance? #?(:clj CSSAtRule) #?(:cljs t/CSSAtRule) x))\n\n(defn at-media?\n  \"True if `x` is a CSS `@media` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :media)))\n\n(defn at-supports?\n  \"True if `x` is a CSS `@supports` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :feature)))\n\n(defn at-keyframes?\n  \"True if `x` is a CSS `@keyframes` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :keyframes)))\n\n(defn at-import?\n  \"True if `x` is a CSS `@import` rule.\"\n  [x]\n  (and (at-rule? x) (= (:identifier x) :import)))\n\n(defn prefix\n  \"Attach a CSS style prefix to s.\"\n  [p s]\n  (let [p (to-str p)]\n    (if (= \\- (last p))\n      (str p s)\n      (str p \\- s))))\n\n(defn vendor-prefix\n  \"Attach a CSS vendor prefix to s.\"\n  [p s]\n  (let [p (to-str p)]\n    (if (= \\- (first p))\n      (prefix p s) \n      (prefix (str \\- p) s))))\n\n;; ---------------------------------------------------------------------\n;; Math utilities\n\n(defn natural?\n  \"True if n is a natural number.\"\n  [n]\n  (and (integer? n) (pos? n)))\n\n(defn between?\n  \"True if n is a number between a and b.\"\n  [n a b]\n  (let [bottom (min a b)\n        top (max a b)]\n    (and (>= n bottom) (<= n top))))\n\n(defn clip\n  \"Return a number such that n is no less than a and no more than b.\"\n  [a b n]\n  (let [[a b] (if (<= a b) [a b] [b a])] \n    (max a (min b n))))\n\n(defn average\n  \"Return the average of two or more numbers.\"\n  [n m & more]\n  (/ (apply + n m more) (+ 2.0 (count more))))\n\n;; Taken from clojure.math.combinatorics.\n(defn cartesian-product\n  \"All the ways to take one item from each sequence.\"\n  [& seqs]\n  (let [v-original-seqs (vec seqs)\n\tstep\n\t(fn step [v-seqs]\n\t  (let [increment\n\t\t(fn [v-seqs]\n\t\t  (loop [i (dec (count v-seqs)), v-seqs v-seqs]\n\t\t    (if (= i -1) nil\n\t\t\t(if-let [rst (next (v-seqs i))]\n\t\t\t  (assoc v-seqs i rst)\n\t\t\t  (recur (dec i) (assoc v-seqs i (v-original-seqs i)))))))]\n\t    (when v-seqs\n              (cons (map first v-seqs)\n                    (lazy-seq (step (increment v-seqs)))))))]\n    (when (every? seq seqs)\n      (lazy-seq (step v-original-seqs)))))\n"]}