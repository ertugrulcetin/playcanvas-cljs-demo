{"version":3,"sources":["day8/re_frame_10x/panels/event/subs.cljs"],"mappings":"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","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.reg_sub","p__25841","map__25842","cljs.core/--destructure-map","cljs.core.get","code","_","traces","cljs.core.keep_indexed","i","trace","temp__5808__auto__","cljs.core.get_in","cljs.core.pr_str","cljs.core.map_indexed","cljs.core.assoc","cljs.core/vec","cljs.core/first","cljs.core/boolean","p__25846","vec__25847","map__25850","cljs.core.nth","execution-order?","unordered-fragments","cljs.core.remove","line","cljs.core/fn?","cljs.core.sort_by","p__25851","map__25852","trace-id","p__25854","map__25855","form","zprint.core/zprint-str","p__25858","map__25859","code-open?","p__25861","map__25862","highlighted-form","p__25863","map__25864","show-all-code?","p__25867","map__25868","repl-msg-state","day8.re-frame-10x.panels.event.subs/canvas","js/document.createElement","context","p__25879","vec__25880","window-width","char-width","Math/ceil"],"sourcesContent":["(ns day8.re-frame-10x.panels.event.subs\n  (:require\n    [zprint.core                                                  :as zp]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.panels.settings.subs                              :as settings.subs]\n    [day8.re-frame-10x.panels.traces.subs                                :as traces.subs]))\n\n(rf/reg-sub\n  ::root\n  (fn [{:keys [code]} _]\n    code))\n\n(rf/reg-sub\n  ::code-for-epoch\n  :<- [::traces.subs/filtered-by-epoch]\n  (fn [traces _]\n    (->> traces\n      (keep-indexed\n        (fn [i trace]\n          (when-some [code (get-in trace [:tags :code])]\n            {:id       i\n             :trace-id (:id trace)\n             :title    (pr-str (:op-type trace))\n             :code     (->> code (map-indexed (fn [i code] (assoc code :id i))) vec) ;; Add index\n             :form     (get-in trace [:tags :form])})))\n      (first)))) ;; Ignore multiple code executions for now\n\n\n(rf/reg-sub\n  ::code-for-epoch-exists?\n  :<- [::code-for-epoch]\n  (fn [code _]\n    (boolean code)))\n\n(rf/reg-sub\n  ::fragments-for-epoch\n  :<- [::code-for-epoch]\n  :<- [::execution-order?]\n  (fn [[{:keys [code]} execution-order?] _]\n    (let [unordered-fragments (remove (fn [line] (fn? (:result line))) code)]\n      (if execution-order?\n        unordered-fragments\n        (sort-by :syntax-order unordered-fragments)))))\n\n(rf/reg-sub\n  ::trace-id-for-epoch\n  :<- [::code-for-epoch]\n  (fn [{:keys [trace-id]} _]\n    trace-id))\n\n(rf/reg-sub\n  ::form-for-epoch\n  :<- [::code-for-epoch]\n  (fn [{:keys [form]} _]\n    form))\n\n(rf/reg-sub\n  ::zprint-form-for-epoch\n  :<- [::form-for-epoch]\n  (fn [form _]\n    (zp/zprint-str form)))\n\n(rf/reg-sub\n  ::execution-order?\n  :<- [::root]\n  (fn [code _]\n    (get code :execution-order? true)))\n\n(rf/reg-sub\n  ::code-open?\n  :<- [::root]\n  (fn [{:keys [code-open?]} _]\n    code-open?))\n\n(rf/reg-sub\n  ::highlighted-form\n  :<- [::root]\n  (fn [{:keys [highlighted-form]} _]\n    highlighted-form))\n\n(rf/reg-sub\n  ::show-all-code?\n  :<- [::root]\n  (fn [{:keys [show-all-code?]} _]\n    show-all-code?))\n\n(rf/reg-sub\n  ::repl-msg-state\n  :<- [::root]\n  (fn [{:keys [repl-msg-state]} _]\n    repl-msg-state))\n\n;; [IJ] TODO: This should not be a subscription:\n(def canvas (js/document.createElement \"canvas\"))\n\n(rf/reg-sub\n  ::single-character-width\n  (fn [_ _]\n    (let [context (.getContext canvas \"2d\")]\n      (set! (.-font context) \"monospace 1em\")\n      (.-width (.measureText context \"T\")))))\n\n(rf/reg-sub\n  ::max-column-width\n  :<- [::settings.subs/window-width-rounded 100]\n  :<- [::single-character-width]\n  ;; It seems like it would be possible to do something smarter responding to panel sizing,\n  ;; but that introduces a lot of jank, so we just set to maximum possible window width.\n  (fn [[window-width char-width] _]\n    (Math/ceil (/ window-width\n                  char-width))))"]}