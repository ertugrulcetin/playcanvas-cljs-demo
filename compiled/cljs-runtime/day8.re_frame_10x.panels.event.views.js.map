{"version":3,"sources":["day8/re_frame_10x/panels/event/views.cljs"],"mappings":"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","names":["var_args","G__25906","day8.re-frame-10x.panels.event.views/re-seq-idx","js/Error","re","s","day8.re_frame_10x.panels.event.views.re_seq_idx","offset","temp__5808__auto__","matches","match-str","match-vals","cljs.core/vec","match-index","cljs.core/cons","cljs.core/LazySeq","post-idx","x__5128__auto__","y__5129__auto__","cljs.core.subs","day8.re-frame-10x.panels.event.views/collapse-whitespace-and-index","s'","clojure.string/replace","v","i-s","i-s'","cljs.core._EQ_","cljs.core.conj","cljs.core/count","cljs.core.nth","day8.re-frame-10x.panels.event.views/find-bounds","form-str","search-str","num-seen","vec__25914","reindex","esc-str","goog.string/regExpEscape","regex","cljs.core/re-pattern","results","and__5041__auto__","cljs.core/seq","vec__25918","vec__25921","result","_","pre-match","matched-form","index","start","stop","G__25924","clojure.string.index_of","cljs.core.pr_str","length","end","G__25925","day8.re-frame-10x.panels.event.views/code-style-factory$","style-name25926","params25927","base-style25931","key__20795__auto__","cljs.core/meta","cljs.core/first","name25930","fexpr__25932","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.util/build-style-name","style25929","cljs.core.into","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime/compile-css","factory-name25928","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.util/factory->name","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime/ensure-style!","day8.re-frame-10x.panels.event.views/code-style","ambiance","syntax-color-scheme","show-all-code?","day8.re-frame-10x.styles/hljs","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/px","day8.re-frame-10x.styles/gs-5","day8.re-frame-10x.panels.event.views/code","scroll-pos","cljs.core.atom","day8.re_frame_10x.inlined_deps.reagent.v1v0v0.reagent.core.create_class","this","node","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.dom/dom-node","cljs.core/reset!","cljs.core/deref","vec__25933","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.subscribe","highlighted-form","start-index","end-index","before","highlight","after","cljs.core.gensym","day8.re-frame-10x.components.re-com/box","event","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch","cljs.core/not","re-highlight.core/highlight","cljs.core/List","day8.re-frame-10x.panels.event.views/clipboard-notification-style-factory$","style-name25936","params25937","base-style25941","name25940","fexpr__25942","style25939","factory-name25938","day8.re-frame-10x.panels.event.views/clipboard-notification-style","day8.re-frame-10x.styles/nord6","day8.re-frame-10x.styles/nord12","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/ms","day8.re-frame-10x.panels.event.views/clipboard-notification","repl-msg-state","cljs.core.get","day8.re-frame-10x.panels.event.views/copy-button-style-factory$","style-name25943","params25944","base-style25948","name25947","fexpr__25949","style25946","factory-name25945","day8.re-frame-10x.panels.event.views/copy-button-style","day8.re-frame-10x.styles/nord-ghost-white","day8.re-frame-10x.styles/nord1","day8.re-frame-10x.panels.event.views/controls-style-factory$","style-name25950","params25951","base-style25955","name25954","fexpr__25956","style25953","factory-name25952","day8.re-frame-10x.panels.event.views/controls-style","day8.re-frame-10x.panels.event.views/controls","execution-order?","day8.re-frame-10x.components.re-com/h-box","day8.re-frame-10x.components.inputs/checkbox","day8.re-frame-10x.components.buttons/icon","day8.re-frame-10x.material/content-copy","day8.re-frame-10x.fx.clipboard/copy!","day8.re-frame-10x.components.re-com/gap-f","day8.re-frame-10x.styles/gs-7s","day8.re-frame-10x.components.hyperlinks/info","day8.re-frame-10x.panels.event.views/indent-block-style-factory$","style-name25957","params25958","base-style25962","name25961","fexpr__25963","style25960","factory-name25959","day8.re-frame-10x.panels.event.views/indent-block-style","first?","day8.re-frame-10x.styles/colors-2","day8.re-frame-10x.styles/nord4","day8.re-frame-10x.styles/nord3","day8.re-frame-10x.panels.event.views/indent-block","indent-level","iter__5520__auto__","s__25965","temp__5804__auto__","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","b__25967","cljs.core/chunk-buffer","i__25966","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__25964","cljs.core/chunk-rest","cljs.core/rest","cljs.core.range","day8.re-frame-10x.styles/gs-12s","day8.re-frame-10x.panels.event.views/fragment-header-style-factory$","style-name25968","params25969","base-style25973","name25972","fexpr__25979","style25971","factory-name25970","day8.re-frame-10x.panels.event.views/fragment-header-style","day8.re-frame-10x.styles/frame-1","day8.re-frame-10x.styles/gs-19","day8.re-frame-10x.styles/gs-2","day8.re-frame-10x.styles/nord10","day8.re-frame-10x.styles/gs-7","day8.re-frame-10x.styles/nord2","p__25980","map__25981","cljs.core/--destructure-map","day8.re-frame-10x.panels.event.views/fragment-header","id","form","frag","trace-id","open?-path","max-column-width","open?","cljs.core.get_in","line-str","day8.re_frame_10x.tools.pretty_print_condensed.pr_str_truncated","=>str","result-length","day8.re-frame-10x.components.buttons/expansion","day8.re-frame-10x.styles/gs-19s","day8.re-frame-10x.panels.event.views/fragment-body-style-factory$","style-name25982","params25983","base-style25987","name25986","fexpr__25991","style25985","factory-name25984","day8.re-frame-10x.panels.event.views/fragment-body-style","day8.re-frame-10x.styles/code","p__25992","map__25993","day8.re-frame-10x.panels.event.views/fragment-body","day8.re-frame-10x.components.cljs-devtools/simple-render","day8.re-frame-10x.panels.event.views/fragment-style-factory$","style-name25997","params25998","base-style26002","name26001","fexpr__26004","style26000","factory-name25999","day8.re-frame-10x.panels.event.views/fragment-style","p__26011","map__26012","day8.re-frame-10x.panels.event.views/fragment","code-open?","day8.re-frame-10x.components.re-com/v-box","day8.re-frame-10x.panels.event.views/fragments-style-factory$","style-name26013","params26014","base-style26018","name26017","fexpr__26020","style26016","factory-name26015","day8.re-frame-10x.panels.event.views/fragments-style","day8.re-frame-10x.panels.event.views/fragments","fragments","max-fragments","s__26034","b__26036","i__26035","iter__26033","cljs.core.take","day8.re-frame-10x.components.re-com/label","day8.re-frame-10x.panels.event.views/instructions","day8.re-frame-10x.components.re-com/p","day8.re-frame-10x.components.re-com/hyperlink-href","day8.re-frame-10x.panels.event.views/panel","epoch-id","exists?","cljs.core/chunk-first"],"sourcesContent":["(ns day8.re-frame-10x.panels.event.views\n  (:require-macros\n    [day8.re-frame-10x.components.re-com                          :refer [handler-fn]])\n  (:require\n    [clojure.string                                               :as string]\n    [goog.string                                                  :as gstring]\n    [re-highlight.core                                            :as re-highlight]\n    [\"highlight.js/lib/languages/clojure\"]\n    [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units   :refer [px ms]]\n    [day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.core       :refer [defclass]]\n    [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.core   :as r]\n    [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.dom    :as rdom]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.components.buttons                         :as buttons]\n    [day8.re-frame-10x.components.cljs-devtools                   :as cljs-devtools]\n    [day8.re-frame-10x.components.hyperlinks                      :as hyperlinks]\n    [day8.re-frame-10x.components.inputs                          :as inputs]\n    [day8.re-frame-10x.components.re-com                          :as rc]\n    [day8.re-frame-10x.material                                   :as material]\n    [day8.re-frame-10x.styles                                     :as styles]\n    [day8.re-frame-10x.navigation.epochs.subs                     :as epochs.subs]\n    [day8.re-frame-10x.panels.event.events                        :as event.events]\n    [day8.re-frame-10x.panels.event.subs                          :as event.subs]\n    [day8.re-frame-10x.panels.settings.subs                       :as settings.subs]\n    [day8.re-frame-10x.fx.clipboard                               :as clipboard]\n    [day8.re-frame-10x.tools.pretty-print-condensed               :as pp]))\n\n;; Terminology:\n;; Form: a single Clojure form (may have nested children)\n;; Result: the result of execution of a single form\n;; Fragment: the combination of a form and result\n;; Listing: a block of traced Clojure code, e.g. an event handler function\n\n(defn- re-seq-idx\n  \"Like re-seq but returns matches and indices\"\n  ([re s] (re-seq-idx re s 0))\n  ([re s offset]  ;; copied from re-seq* impl https://github.com/clojure/clojurescript/blob/0efe8fede9e06b8e1aa2fcb3a1c70f66cad6392e/src/main/cljs/cljs/core.cljs#L10014\n   (when-some [matches (.exec re s)]\n     (let [match-str (aget matches 0)\n           match-vals (if (== (.-length matches) 1)\n                        match-str\n                        (vec matches))\n           match-index (.-index matches)]\n       (cons [match-vals, (+ offset match-index)]\n             (lazy-seq\n               (let [post-idx (+ (.-index matches)\n                                 (max 1 (.-length match-str)))]\n                 (when (<= post-idx (.-length s))\n                   (re-seq-idx re (subs s post-idx) (+ offset post-idx))))))))))\n\n(defn collapse-whitespace-and-index\n  \"given a string argument `s` it will return a vector of two values:\n     - a modified version of `s`, call it s'\n     - a vector of indexes, v\n   s' will be a copy of s in which all consecutive whitespace is collapsed to one whitespace\n   v  will be a vector of index for characters in s' back to the original s\n   For example:\n      (collapse-whitespace-and-index \\\"a b  c\\\")\n   will return\n       [\\\"a b c\\\" [0 1 2 3 5]]     ;; notice that the 4 is not there\n   \"\n  [s]\n  (let [s' (clojure.string/replace s #\"\\s+\" \" \") ;; generate a new string with whitespace replaced\n        v (loop [v []     ;; Build up an index between the string with and without whitespace\n                 i-s 0\n                 i-s' 0]\n            (cond\n              (= (count s') i-s')           (conj v (count s)) ;; we have reached the end of both strings\n              (= (nth s i-s) (nth s' i-s')) (recur (conj v i-s) (inc i-s) (inc i-s')) ;; when we have a match save the index\n              :else                         (recur v (inc i-s) i-s')))]    ;; no match (whitespace) increment the index on the orignal string\n    [s' v]))\n\n(defn find-bounds\n  \"Try and find the bounds of the form we are searching for. Uses some heuristics to\n  try and avoid matching partial forms, e.g. 'default-|weeks| for the form 'weeks.\"\n  [form-str search-str num-seen]\n  (if (nil? search-str)\n    [0 0]  ;; on mouse out etc\n    (let [[form-str reindex]   (collapse-whitespace-and-index form-str) ;; match without whitespace\n          esc-str    (gstring/regExpEscape search-str)\n          regex      (str \"(\\\\s|\\\\(|\\\\[|\\\\{)\" \"(\" esc-str \")(\\\\s|\\\\)|\\\\]|\\\\})\")\n          re         (re-pattern regex)\n          results    (re-seq-idx re form-str)]\n      ;; (js/console.log \"FIND-BOUNDS\" form-str  regex reindex results)\n      (if (and search-str num-seen (seq results) (>= (count results)  num-seen))\n        (let [result                              (nth results (dec num-seen))\n              [[_ pre-match matched-form] index]  result\n              index                               (+ index (count pre-match))\n              start                               (nth reindex index)\n              stop                                (nth reindex (+ index (count matched-form)))]\n          [start stop])\n        ;; If the regex fails, fall back to string index just in case.\n        (let [start  (some->> form-str\n                              (string/index-of (pr-str search-str))\n                              (nth reindex))\n              length (if (some? start)\n                       (count (pr-str search-str))\n                       1)\n              end    (some->> start\n                              (+ length)\n                              (nth reindex))]\n          [start end])))))\n\n(defclass code-style\n  [ambiance syntax-color-scheme show-all-code?]\n  {:composes      (styles/hljs ambiance syntax-color-scheme)\n   :max-height    (when-not show-all-code? (px (* 10 17)))  ;; Add scrollbar after 10 lines\n   :padding       styles/gs-5\n   :overflow      :auto\n   :white-space   :pre\n   :margin-right  styles/gs-5}) ;; TODO: This is a quick fix for issue #270\n\n(defn code\n  []\n  (let [scroll-pos (atom {:top 0 :left 0})]\n    (r/create-class\n      {:display-name \"code\"\n\n       :get-snapshot-before-update\n                     (fn code-get-snapshot-before-update\n                       [this _ _]\n                       (let [node (rdom/dom-node this)]\n                         (reset! scroll-pos {:top (.-scrollTop node) :left (.-scrollLeft node)})))\n\n       :component-did-update\n                     (fn code-component-did-update\n                       [this]\n                       (let [node (rdom/dom-node this)]\n                         (set! (.-scrollTop node) (:top @scroll-pos))\n                         (set! (.-scrollLeft node) (:left @scroll-pos))))\n\n       :reagent-render\n                     (fn\n                       []\n                       (let [ambiance            @(rf/subscribe [::settings.subs/ambiance])\n                             syntax-color-scheme @(rf/subscribe [::settings.subs/syntax-color-scheme])\n                             highlighted-form    @(rf/subscribe [::event.subs/highlighted-form])\n                             form-str            @(rf/subscribe [::event.subs/zprint-form-for-epoch])\n                             show-all-code?      @(rf/subscribe [::event.subs/show-all-code?])\n                             [start-index end-index] (find-bounds form-str (:form highlighted-form) (:num-seen highlighted-form))\n                             before              (subs form-str 0 start-index)\n                             highlight           (subs form-str start-index end-index)\n                             after               (subs form-str end-index)]\n                         ; DC: We get lots of React errors if we don't force a creation of a new element when the highlight changes. Not really sure why...\n                         ;; Possibly relevant? https://stackoverflow.com/questions/21926083/failed-to-execute-removechild-on-node\n                         ^{:key (gensym)}\n                         [rc/box\n                          :class (code-style ambiance syntax-color-scheme show-all-code?)\n                          :attr {:on-double-click (handler-fn (rf/dispatch [::event.events/set-show-all-code? (not show-all-code?)]))}\n                          :child (if (some? highlighted-form)\n                                   [re-highlight/highlight {:language \"clojure\"}\n                                    (list ^{:key \"before\"} before\n                                          ^{:key \"hl\"} [:span.code-listing--highlighted highlight]\n                                          ^{:key \"after\"} after)]\n                                   [re-highlight/highlight {:language \"clojure\"}\n                                    form-str])]))})))\n\n(defclass clipboard-notification-style\n  [_]\n  {:opacity            0\n   :color              styles/nord6\n   :background-color   styles/nord12\n   :padding            [[0 styles/gs-5]]\n   :white-space        :nowrap\n   :overflow           :hidden\n   :animation-duration (ms 5000)\n   :animation-name     :fade-clipboard-msg-re-frame-10x})\n\n(defn clipboard-notification\n  []\n  (let [ambiance       @(rf/subscribe [::settings.subs/ambiance])\n        repl-msg-state @(rf/subscribe [::event.subs/repl-msg-state])]\n    (when (get #{:running :re-running} repl-msg-state)\n      [:div\n       {:class            (clipboard-notification-style ambiance)\n        :on-animation-end #(rf/dispatch [::event.events/repl-msg-state :end])}\n       \"Clipboard now contains text for pasting into your REPL\"])))\n\n(defclass copy-button-style\n  [ambiance]\n  {:background-color (if (= :bright ambiance) styles/nord-ghost-white styles/nord1)\n   :border-top :none\n   :border-bottom :none\n   :border-right :none})\n\n(defclass controls-style\n  [_]\n  {:margin-right styles/gs-5})\n\n(defn controls\n  []\n  (let [ambiance         @(rf/subscribe [::settings.subs/ambiance])\n        execution-order? @(rf/subscribe [::event.subs/execution-order?])]\n    [rc/h-box\n     :class    (controls-style ambiance)\n     :align    :center\n     :children\n     [[inputs/checkbox\n       {:model     execution-order?\n        :on-change (handler-fn (rf/dispatch [::event.events/set-execution-order (not execution-order?)]))\n        :label     \"show trace in execution order\"}]\n      [rc/box\n       :size  \"1\"\n       :child \"\"]\n      [clipboard-notification]\n      [rc/box\n       :size  \"1\"\n       :child \"\"]\n      [buttons/icon\n       {:icon     [material/content-copy]\n        :label    \"requires\"\n        :title    \"Copy to the clipboard, the require form to set things up for the \\\"repl\\\" links below\"\n        ;; Doing this in a list would be nicer, but doesn't let us use ' as it will be expanded before we can create the string.\n        :on-click #(do (clipboard/copy! \"(require '[day8.re-frame-10x])\")\n                       (rf/dispatch [::event.events/repl-msg-state :start]))}]\n      [rc/gap-f :size styles/gs-7s]\n      [hyperlinks/info \"https://github.com/day8/re-frame-10x/blob/master/docs/HyperlinkedInformation/UsingTheRepl.md\"]]]))\n\n(defclass indent-block-style\n  [ambiance first?]\n  {:composes    (styles/colors-2 ambiance)\n   :border-left [[(px 1) :solid (if (= :bright ambiance) styles/nord4 styles/nord3)]]\n   :border-top  (when first? [[(px 1) :solid (if (= :bright ambiance) styles/nord4 styles/nord3)]])})\n\n(defn indent-block\n  [indent-level first?]\n  (let [ambiance @(rf/subscribe [::settings.subs/ambiance])]\n    [rc/h-box\n     :children\n     (into []\n           (for [_ (range indent-level)]\n             [rc/box\n              :width styles/gs-12s\n              :class (indent-block-style ambiance first?)\n              :child \"\"]))]))\n\n(defclass fragment-header-style\n  [ambiance first?]\n  {:composes   (styles/frame-1 ambiance)\n   :height     styles/gs-19\n   :margin-top (when-not first? (px -1))}\n  [:.code\n   {:margin-left styles/gs-2\n    :white-space :nowrap}]\n  [:.result\n   {:color       styles/nord10\n    :flex        \"1\"\n    :margin-left styles/gs-7\n    :overflow    :hidden\n    :white-space :nowrap\n    :visibility  :hidden}]\n  [:&:hover\n   {:background-color (if (= :bright ambiance) styles/nord6 styles/nord2)}\n   [:.result\n    {:visibility :visible}]])\n\n(defn fragment-header\n  [{:keys [id form result] :as frag}]\n  (let [ambiance         @(rf/subscribe [::settings.subs/ambiance])\n        trace-id         @(rf/subscribe [::event.subs/trace-id-for-epoch])\n        open?-path       [@(rf/subscribe [::epochs.subs/selected-epoch-id]) trace-id id]\n        max-column-width @(rf/subscribe [::event.subs/max-column-width])\n        open?            (get-in @(rf/subscribe [::event.subs/code-open?]) open?-path)\n        line-str         (pp/pr-str-truncated max-column-width form)\n        =>str            \"=> \"\n        result-length    (- max-column-width (count =>str) (count line-str))\n        first?           (zero? id)]\n    [rc/h-box\n     :class    (fragment-header-style ambiance first?)\n     :size     \"1\"\n     :align    :center\n     :children\n     [[rc/box\n       :attr  {:on-click (handler-fn (rf/dispatch [::event.events/set-code-visibility open?-path (not open?)]))}\n       :child\n       [buttons/expansion\n        {:open? open?\n         :size  styles/gs-19s}]]\n      [rc/h-box\n       :size     \"1\"\n       :children\n       [[rc/box\n         :class \"code\"\n         :child\n         [:code line-str]]\n        [rc/box\n         :class \"result\"\n         :child\n         [:code =>str (when (pos? result-length)\n                        (pp/pr-str-truncated result-length result))]]]]\n      [rc/box\n       :width styles/gs-19s\n       :child\n       [buttons/icon\n        {:class    (copy-button-style ambiance)\n         :icon     [material/content-copy {:size \"14px\"}]\n         :title    \"Copy to the clipboard, an expression that will return this form's value in the cljs repl\"\n         :on-click (handler-fn (do (clipboard/copy! (pr-str (list 'day8.re-frame-10x/traced-result trace-id frag)))\n                                   (rf/dispatch [::event.events/repl-msg-state :start])))}]]]]))\n\n(defclass fragment-body-style\n  [ambiance syntax-color-scheme]\n  {:composes   (styles/code ambiance syntax-color-scheme)\n   :overflow-x :auto\n   :overflow-y :hidden\n   :padding    styles/gs-5})\n\n(defn fragment-body\n  [{:keys [id result]}]\n  (let [ambiance            @(rf/subscribe [::settings.subs/ambiance])\n        syntax-color-scheme @(rf/subscribe [::settings.subs/syntax-color-scheme])\n        trace-id            @(rf/subscribe [::event.subs/trace-id-for-epoch])]\n    [rc/box\n     :size  \"1\"\n     :class (fragment-body-style ambiance syntax-color-scheme)\n     :child\n     [cljs-devtools/simple-render\n      result\n      [@(rf/subscribe [::epochs.subs/selected-epoch-id]) trace-id id]]]))\n\n(defclass fragment-style\n  [_]\n  {})\n\n(defn fragment\n  [{:keys [id indent-level] :as frag}]\n  (let [ambiance   @(rf/subscribe [::settings.subs/ambiance])\n        code-open? @(rf/subscribe [::event.subs/code-open?])\n        trace-id   @(rf/subscribe [::event.subs/trace-id-for-epoch])\n        first?     (zero? id)]\n    [rc/v-box\n     :class (fragment-style ambiance)\n     :attr  {:on-mouse-enter (handler-fn (rf/dispatch [::event.events/hover-form frag]))\n             :on-mouse-leave (handler-fn (rf/dispatch [::event.events/exit-hover-form frag]))}\n     :children\n     [[rc/h-box\n       :children\n       [[indent-block indent-level first?]\n        [fragment-header frag]]]\n      (when (get-in code-open? [@(rf/subscribe [::epochs.subs/selected-epoch-id]) trace-id id])\n        [rc/h-box\n         :children\n         [[indent-block indent-level false]\n          [fragment-body frag]]])]]))\n\n(defclass fragments-style\n  [_]\n  {:overflow-y :auto\n   :margin-right styles/gs-5})\n\n(defn fragments\n  []\n  (let [ambiance      @(rf/subscribe [::settings.subs/ambiance])\n        fragments     @(rf/subscribe [::event.subs/fragments-for-epoch])\n        max-fragments 50]\n    [rc/v-box\n     :size     \"1\"\n     :class    (fragments-style ambiance)\n     :children\n     [(into [:<>]\n            (for [frag (take max-fragments fragments)]\n              [fragment frag]))\n      (when (> (count fragments) max-fragments)\n        [rc/label\n         :label (str \"(only showing first \" max-fragments \" of \" (count fragments) \" traces)\")])]]))\n\n(defn instructions\n  []\n  [rc/v-box\n   :children\n   [[rc/p \"Code trace is not available for this event\"]\n    [:br]\n    [rc/hyperlink-href\n     :label  \"Instructions for enabling Event Code Tracing\"\n     :attr   {:rel \"noopener noreferrer\"}\n     :target \"_blank\"\n     :href   \"https://github.com/day8/re-frame-10x/blob/master/docs/HyperlinkedInformation/EventCodeTracing.md\"]]])\n\n(defn panel\n  []\n  (let [epoch-id @(rf/subscribe [::epochs.subs/selected-epoch-id])\n        exists?  @(rf/subscribe [::event.subs/code-for-epoch-exists?])]\n    ;; Create a new id on each panel because Reagent can throw an exception if\n    ;; the data provided in successive renders is sufficiently different.\n    ^{:key epoch-id}\n    [rc/v-box\n     :size     \"1\"\n     :gap      styles/gs-19s\n     :children\n     (if-not exists?\n       [[instructions]]\n       [[code]\n        [controls]\n        [fragments]])]))\n\n"]}